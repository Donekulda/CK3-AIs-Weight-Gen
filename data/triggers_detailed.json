{
    "any_dynasty_member": {
        "desc": "Iterate through all dynasty members",
        "usage": [
            "any_dynasty_member = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "dynasty",
        "supported_targets": "character"
    },
    "blood_legacy_track_perks": {
        "desc": "How many perks in the lifestyle does this dynasty have?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "dynasty",
        "supported_targets": null
    },
    "ce1_heroic_track_perks": {
        "desc": "How many perks in the lifestyle does this dynasty have?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "dynasty",
        "supported_targets": null
    },
    "ce1_legitimacy_legacy_track_perks": {
        "desc": "How many perks in the lifestyle does this dynasty have?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "dynasty",
        "supported_targets": null
    },
    "dynasty_can_unlock_relevant_perk": {
        "desc": "Can the scoped dynasty unlock a 'relevant' perk? Relevant meaning one that isn't the first in its track unless the dynasty has no partially filled tracks",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "dynasty",
        "supported_targets": null
    },
    "dynasty_num_unlocked_perks": {
        "desc": "does the dynasty has the required number of unlocked dynasty perks?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "dynasty",
        "supported_targets": null
    },
    "dynasty_prestige": {
        "desc": "does the dynasty have the required prestige?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "dynasty",
        "supported_targets": null
    },
    "dynasty_prestige_level": {
        "desc": "does the dynasty have the required prestige level?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "dynasty",
        "supported_targets": null
    },
    "ep1_culture_legacy_track_perks": {
        "desc": "How many perks in the lifestyle does this dynasty have?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "dynasty",
        "supported_targets": null
    },
    "ep2_activities_legacy_track_perks": {
        "desc": "How many perks in the lifestyle does this dynasty have?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "dynasty",
        "supported_targets": null
    },
    "ep3_administrative_legacy_track_perks": {
        "desc": "How many perks in the lifestyle does this dynasty have?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "dynasty",
        "supported_targets": null
    },
    "erudition_legacy_track_perks": {
        "desc": "How many perks in the lifestyle does this dynasty have?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "dynasty",
        "supported_targets": null
    },
    "fp1_adventure_legacy_track_perks": {
        "desc": "How many perks in the lifestyle does this dynasty have?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "dynasty",
        "supported_targets": null
    },
    "fp1_pillage_legacy_track_perks": {
        "desc": "How many perks in the lifestyle does this dynasty have?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "dynasty",
        "supported_targets": null
    },
    "fp2_coterie_legacy_track_perks": {
        "desc": "How many perks in the lifestyle does this dynasty have?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "dynasty",
        "supported_targets": null
    },
    "fp2_urbanism_legacy_track_perks": {
        "desc": "How many perks in the lifestyle does this dynasty have?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "dynasty",
        "supported_targets": null
    },
    "fp3_khvarenah_legacy_track_perks": {
        "desc": "How many perks in the lifestyle does this dynasty have?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "dynasty",
        "supported_targets": null
    },
    "glory_legacy_track_perks": {
        "desc": "How many perks in the lifestyle does this dynasty have?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "dynasty",
        "supported_targets": null
    },
    "guile_legacy_track_perks": {
        "desc": "How many perks in the lifestyle does this dynasty have?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "dynasty",
        "supported_targets": null
    },
    "has_dynasty_modifier": {
        "desc": "Does the scoped dynasty have a given modifier",
        "usage": [
            "has_dynasty_modifier = name"
        ],
        "traits": null,
        "supported_scopes": "dynasty",
        "supported_targets": null
    },
    "has_dynasty_modifier_duration_remaining": {
        "desc": "Does the scoped dynasty have the duration remaining on a given modifier",
        "usage": [
            "has_dynasty_modifier_duration_remaining = name"
        ],
        "traits": null,
        "supported_scopes": "dynasty",
        "supported_targets": null
    },
    "has_dynasty_perk": {
        "desc": "Does the dynasty have this dynasty perk? has_dynasty_perk = key",
        "usage": [],
        "traits": null,
        "supported_scopes": "dynasty",
        "supported_targets": null
    },
    "kin_legacy_track_perks": {
        "desc": "How many perks in the lifestyle does this dynasty have?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "dynasty",
        "supported_targets": null
    },
    "law_legacy_track_perks": {
        "desc": "How many perks in the lifestyle does this dynasty have?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "dynasty",
        "supported_targets": null
    },
    "mpo_nomad_legacy_track_perks": {
        "desc": "How many perks in the lifestyle does this dynasty have?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "dynasty",
        "supported_targets": null
    },
    "warfare_legacy_track_perks": {
        "desc": "How many perks in the lifestyle does this dynasty have?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "dynasty",
        "supported_targets": null
    },
    "any_activity_phase_location": {
        "desc": "Iterate through all province locations of the phases of the activity, optionally limited to unique locations.",
        "usage": [
            "any/every/random_activity_phase_location {",
            "unique = yes/no",
            "}",
            "any_activity_phase_location = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "activity",
        "supported_targets": "province"
    },
    "any_activity_phase_location_future": {
        "desc": "Iterate through all future province locations of the phases of the activity, optionally limited to unique locations. ('future' does not include any started phase)",
        "usage": [
            "any/every/random_activity_phase_location_future {",
            "unique = yes/no",
            "}",
            "any_activity_phase_location_future = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "activity",
        "supported_targets": "province"
    },
    "any_activity_phase_location_past": {
        "desc": "Iterate through all past province locations of the phases of the activity, optionally limited to unique locations. ('past' only includes ended phases)",
        "usage": [
            "any/every/random_activity_phase_location_future {",
            "unique = yes/no",
            "}",
            "any_activity_phase_location_past = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "activity",
        "supported_targets": "province"
    },
    "any_attending_character": {
        "desc": "Iterate through all characters attending an activity.",
        "usage": [
            "Invited guests that have not accepted/declined yet are not part of this list.",
            "Supports an optional state the character must be in.",
            "any_attending_character = { state = travel/passive/active }",
            "any_attending_character = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "activity",
        "supported_targets": "character"
    },
    "any_guest_subset": {
        "desc": "any/every/random_guest_subset = {",
        "usage": [
            "name = <subset_key>",
            "phase = <phase_key> # Optional",
            "}",
            "Iterates through characteres within the specified subset for past, current and",
            "future phases. If phase is specified it will only iterate through characters",
            "subsets of that particular phase type.",
            "any_guest_subset = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "activity",
        "supported_targets": "character"
    },
    "any_guest_subset_current_phase": {
        "desc": "any/every/random_guest_subset_current_phase = {",
        "usage": [
            "name = <subset_key>",
            "}",
            "Iterates through characteres within the specified subset of the current phase.",
            "any_guest_subset_current_phase = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "activity",
        "supported_targets": "character"
    },
    "any_invited_character": {
        "desc": "Iterate through all characters invited to an activity. Once they accept/decline, they are removed from this list.",
        "usage": [
            "any_invited_character = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "activity",
        "supported_targets": "character"
    },
    "any_special_guest": {
        "desc": "Iterate through all special guests of an activity.",
        "usage": [
            "any_special_guest = { ... }",
            "any_special_guest = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "activity",
        "supported_targets": "character"
    },
    "has_active_locale": {
        "desc": "Does the scoped activity have the designated locale active?",
        "usage": [
            "has_active_locale = locale_key"
        ],
        "traits": null,
        "supported_scopes": "activity",
        "supported_targets": null
    },
    "has_activity_option": {
        "desc": "has_activity_option = { category = key option = key }",
        "usage": [],
        "traits": null,
        "supported_scopes": "activity",
        "supported_targets": null
    },
    "has_activity_type": {
        "desc": "has_activity_type = key",
        "usage": [],
        "traits": "class CActivityTypeDatabase key",
        "supported_scopes": "activity",
        "supported_targets": "activity_type"
    },
    "has_current_phase": {
        "desc": "has_current_phase = key",
        "usage": [],
        "traits": null,
        "supported_scopes": "activity",
        "supported_targets": null
    },
    "has_phase": {
        "desc": "Check if a phase exists on this activity. You can search for just a type directly, or a complex trigger with  only `type`, `location` or both.",
        "usage": [
            "has_phase = name_of_phase",
            "has_phase = {",
            "type = name_of_phase",
            "location = scope:province",
            "}"
        ],
        "traits": null,
        "supported_scopes": "activity",
        "supported_targets": null
    },
    "has_phase_future": {
        "desc": "Check if a past phase exists on this activity. You can search for just a type directly, or a complex trigger with  only `type`, `location` or both.",
        "usage": [
            "has_phase = name_of_phase",
            "has_phase = {",
            "type = name_of_phase",
            "location = scope:province",
            "}"
        ],
        "traits": null,
        "supported_scopes": "activity",
        "supported_targets": null
    },
    "has_phase_past": {
        "desc": "Check if a past phase exists on this activity. You can search for just a type directly, or a complex trigger with  only `type`, `location` or both.",
        "usage": [
            "has_phase = name_of_phase",
            "has_phase = {",
            "type = name_of_phase",
            "location = scope:province",
            "}"
        ],
        "traits": null,
        "supported_scopes": "activity",
        "supported_targets": null
    },
    "is_activity_complete": {
        "desc": "Check if the current activity is completed or not, this doesn't have much use for content since we delete an activity as soon as we can, but in multiplayer it exists until everyone stops viewing it so we use this to cancel some delayed events",
        "usage": [
            "is_activity_complete = yes/no"
        ],
        "traits": "yes/no",
        "supported_scopes": "activity",
        "supported_targets": null
    },
    "is_current_phase_active": {
        "desc": "Check if the current activity phase is in the active state (else it is in the passive state)",
        "usage": [
            "is_current_phase_active = yes/no"
        ],
        "traits": "yes/no",
        "supported_scopes": "activity",
        "supported_targets": null
    },
    "is_open_invite_activity": {
        "desc": "Check if the scoped activity is an open invite activity",
        "usage": [
            "is_open_invite_activity = yes/no"
        ],
        "traits": "yes/no",
        "supported_scopes": "activity",
        "supported_targets": null
    },
    "is_required_special_guest": {
        "desc": "Is the target character a required special guest in the scoped activity.",
        "usage": [
            "is_required_special_guest = character"
        ],
        "traits": null,
        "supported_scopes": "activity",
        "supported_targets": null
    },
    "is_special_guest": {
        "desc": "Is the target character a special guest in the scoped activity, optionally for a specific type.",
        "usage": [
            "is_special_guest = character",
            "is_special_guest = { target = character type = key }"
        ],
        "traits": null,
        "supported_scopes": "activity",
        "supported_targets": null
    },
    "num_future_phases": {
        "desc": "The number of future phases for the scoped activity.",
        "usage": [
            "num_future_phases > 5"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "activity",
        "supported_targets": null
    },
    "num_past_phases": {
        "desc": "The number of past phases for the scoped activity.",
        "usage": [
            "num_past_phases > 5"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "activity",
        "supported_targets": null
    },
    "num_phases": {
        "desc": "The number total number of planned phases for the scoped activity.",
        "usage": [
            "num_phases > 5"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "activity",
        "supported_targets": null
    },
    "any_culture_county": {
        "desc": "Iterate through all counties of the culture",
        "usage": [
            "any_culture_county = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "culture",
        "supported_targets": "landed_title"
    },
    "any_culture_duchy": {
        "desc": "Iterate through all duchies of the culture (duchies with at least one county of the culture",
        "usage": [
            "any_culture_duchy = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "culture",
        "supported_targets": "landed_title"
    },
    "any_culture_empire": {
        "desc": "Iterate through all empires of the culture (empires with at least one county of the culture",
        "usage": [
            "any_culture_empire = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "culture",
        "supported_targets": "landed_title"
    },
    "any_culture_kingdom": {
        "desc": "Iterate through all kingdoms of the culture (kingdoms with at least one county of the culture",
        "usage": [
            "any_culture_kingdom = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "culture",
        "supported_targets": "landed_title"
    },
    "any_parent_culture": {
        "desc": "Iterate through all parent cultures",
        "usage": [
            "any_parent_culture = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "culture",
        "supported_targets": "culture"
    },
    "any_parent_culture_or_above": {
        "desc": "Iterate through all parent cultures or above",
        "usage": [
            "any_parent_culture_or_above = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "culture",
        "supported_targets": "culture"
    },
    "any_tradition": {
        "desc": "Iterate through all traditions of the given culture",
        "usage": [
            "any_tradition = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "culture",
        "supported_targets": "culture_tradition"
    },
    "can_get_innovation_from": {
        "desc": "Get random applicable innovation from another culture",
        "usage": [],
        "traits": null,
        "supported_scopes": "culture",
        "supported_targets": null
    },
    "cultural_acceptance": {
        "desc": "The cultural acceptance of the scoped culture with the target culture",
        "usage": [
            "cultural_acceptance = { target = culture value > 50 }"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "culture",
        "supported_targets": null
    },
    "culture_age": {
        "desc": "Checks the age of the scope culture in years. If the culture has no creation date set, this will simply return the current year",
        "usage": [
            "culture_age >= 200"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "culture",
        "supported_targets": null
    },
    "culture_number_of_counties": {
        "desc": "How many counties are there of this culture?",
        "usage": [
            "culture_number_of_counties > 10"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "culture",
        "supported_targets": null
    },
    "culture_overlaps_geographical_region": {
        "desc": "Checks if any county with this culture is in the given geographical region",
        "usage": [],
        "traits": "class CGeographicalRegionDatabase key",
        "supported_scopes": "culture",
        "supported_targets": "geographical_region"
    },
    "free_tradition_slot": {
        "desc": "How many free tradition slot are in the scoped culturescope:culture = { free_tradition_slot > 1 }",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "culture",
        "supported_targets": null
    },
    "has_all_innovations": {
        "desc": "Has the culture discovered all innovations matching the filter?",
        "usage": [
            "has_all_innovations = {",
            "with_flag = flag_name # innovation matches if it has the flag; optional",
            "without_flag = flag_name # innovation matches if it does not have the flag; optional",
            "culture_era = era_key # innovation matches if it is from the era; optional",
            "}"
        ],
        "traits": null,
        "supported_scopes": "culture",
        "supported_targets": null
    },
    "has_building_gfx": {
        "desc": "Does the culture have this building gfx?",
        "usage": [
            "<culture> = { has_building_gfx = mena_building_gfx }"
        ],
        "traits": null,
        "supported_scopes": "culture",
        "supported_targets": null
    },
    "has_clothing_gfx": {
        "desc": "Does the culture have this clothing gfx?",
        "usage": [
            "<culture> = { has_building_gfx = mena_clothing_gfx }"
        ],
        "traits": null,
        "supported_scopes": "culture",
        "supported_targets": null
    },
    "has_coa_gfx": {
        "desc": "Does the culture have this CoA gfx?",
        "usage": [
            "<culture> = { has_building_gfx = mena_coa_gfx }"
        ],
        "traits": null,
        "supported_scopes": "culture",
        "supported_targets": null
    },
    "has_cultural_era_or_later": {
        "desc": "Has this culture achieved specified era<culture> = { has_cultural_era_or_later = culture_era_early_medieval }",
        "usage": [],
        "traits": null,
        "supported_scopes": "culture",
        "supported_targets": null
    },
    "has_cultural_parameter": {
        "desc": "Does the culture have this cultural parameter?",
        "usage": [
            "<culture> = { has_cultural_parameter = name }"
        ],
        "traits": null,
        "supported_scopes": "culture",
        "supported_targets": null
    },
    "has_cultural_pillar": {
        "desc": "Does the culture have this cultural pillar?",
        "usage": [
            "<culture> = { has_cultural_pillar = name }"
        ],
        "traits": null,
        "supported_scopes": "culture",
        "supported_targets": null
    },
    "has_cultural_tradition": {
        "desc": "Does the culture have this cultural tradition scope?",
        "usage": [
            "<culture> = { has_cultural_tradition = scope:traditon }"
        ],
        "traits": "class CCultureTraditionDatabase key",
        "supported_scopes": "culture",
        "supported_targets": "culture_tradition"
    },
    "has_innovation": {
        "desc": "Have the culture discovered this innovation?",
        "usage": [],
        "traits": null,
        "supported_scopes": "culture",
        "supported_targets": null
    },
    "has_innovation_flag": {
        "desc": "Has the culture discovered an innovation with this flag? has_innovation_flag = flag",
        "usage": [],
        "traits": null,
        "supported_scopes": "culture",
        "supported_targets": null
    },
    "has_name_list": {
        "desc": "Does the culture have this name list?",
        "usage": [
            "<culture> = { has_name_list = name }"
        ],
        "traits": null,
        "supported_scopes": "culture",
        "supported_targets": null
    },
    "has_primary_name_list": {
        "desc": "Does the culture have this name list as its first name list?",
        "usage": [
            "<culture> = { has_primary_name_list = name }"
        ],
        "traits": null,
        "supported_scopes": "culture",
        "supported_targets": null
    },
    "has_same_culture_ethos": {
        "desc": "Does the culture have the same ethos as the target?",
        "usage": [],
        "traits": "culture scope",
        "supported_scopes": "culture",
        "supported_targets": "culture"
    },
    "has_same_culture_head_determination": {
        "desc": "Does the culture have the same head determination as the target?",
        "usage": [],
        "traits": "culture scope",
        "supported_scopes": "culture",
        "supported_targets": "culture"
    },
    "has_same_culture_heritage": {
        "desc": "Does the culture have the same heritage as the target?",
        "usage": [],
        "traits": "culture scope",
        "supported_scopes": "culture",
        "supported_targets": "culture"
    },
    "has_same_culture_language": {
        "desc": "Does the culture have the same language as the target?",
        "usage": [],
        "traits": "culture scope",
        "supported_scopes": "culture",
        "supported_targets": "culture"
    },
    "has_same_culture_martial_tradition": {
        "desc": "Does the culture have the same martial tradition as the target?",
        "usage": [],
        "traits": "culture scope",
        "supported_scopes": "culture",
        "supported_targets": "culture"
    },
    "has_unit_gfx": {
        "desc": "Does the culture have this unit gfx?",
        "usage": [
            "<culture> = { has_unit_gfx = mena_unit_gfx }"
        ],
        "traits": null,
        "supported_scopes": "culture",
        "supported_targets": null
    },
    "is_divergent_culture": {
        "desc": "Checks if the scope culture was created by diverging from a single parent culture and returns yes if true or no if false.",
        "usage": [
            "is_divergent_culture = yes"
        ],
        "traits": "yes/no",
        "supported_scopes": "culture",
        "supported_targets": null
    },
    "is_hybrid_culture": {
        "desc": "Checks if the scope culture was created from a hybridization of two cultures and returns yes if true or no if false.",
        "usage": [
            "is_hybrid_culture = yes"
        ],
        "traits": "yes/no",
        "supported_scopes": "culture",
        "supported_targets": null
    },
    "num_discovered_innovations": {
        "desc": "Does the culture have the required number of discovered innovations?",
        "usage": [
            "num_discovered_innovations > 20"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "culture",
        "supported_targets": null
    },
    "num_discovered_innovations_in_era": {
        "desc": "Does the scoped culture have the required number of active discovered innovations in the specified era?",
        "usage": [
            "num_discovered_innovations_in_era = {",
            "era = culture_era_early_medieval",
            "value > 5",
            "}",
            "num_discovered_innovations_in_era:culture_era_early_medieval > 15",
            "num_discovered_innovations_in_era:culture_era_early_medieval > scope:target_culture.num_discovered_innovations_in_era:culture_era_early_medieval"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "culture",
        "supported_targets": null
    },
    "any_memory_participant": {
        "desc": "Iterate through all participating character of a memory",
        "usage": [
            "any_memory_participant = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character_memory",
        "supported_targets": "character"
    },
    "has_memory_category": {
        "desc": "has_memory_category = happy",
        "usage": [],
        "traits": null,
        "supported_scopes": "character_memory",
        "supported_targets": null
    },
    "has_memory_participant": {
        "desc": "has_memory_participant = character",
        "usage": [],
        "traits": "character scope",
        "supported_scopes": "character_memory",
        "supported_targets": "character"
    },
    "has_memory_type": {
        "desc": "has_memory_type = battle",
        "usage": [],
        "traits": null,
        "supported_scopes": "character_memory",
        "supported_targets": null
    },
    "is_memory_of_travel": {
        "desc": "Is the scoped memory a memory of a specific travel plan? is_memory_of_travel = travel_plan",
        "usage": [],
        "traits": "travel_plan scope",
        "supported_scopes": "character_memory",
        "supported_targets": "travel_plan"
    },
    "memory_age_years": {
        "desc": "How many years since the memory was created (rounded down).",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character_memory",
        "supported_targets": null
    },
    "memory_creation_date": {
        "desc": "Date when the memory was created.",
        "usage": [],
        "traits": "<, <=, =, >, >= valid date",
        "supported_scopes": "character_memory",
        "supported_targets": null
    },
    "memory_end_date": {
        "desc": "Date when the memory will be forgotten. (this may change over time)",
        "usage": [],
        "traits": "<, <=, =, >, >= valid date",
        "supported_scopes": "character_memory",
        "supported_targets": null
    },
    "can_upgrade_maa": {
        "desc": "Can target MaA regiment be upgraded",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "regiment",
        "supported_targets": null
    },
    "is_event_maa_regiment": {
        "desc": "Is target MaA regiment part of event troops",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "regiment",
        "supported_targets": null
    },
    "is_hired_maa_regiment": {
        "desc": "Was target MaA regiment hired from merc or holy order",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "regiment",
        "supported_targets": null
    },
    "is_maa_in_combat": {
        "desc": "Is target MaA regiment engaged in combat",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "regiment",
        "supported_targets": null
    },
    "is_maa_type": {
        "desc": "Check MaA type of a regiment",
        "usage": [
            "scope:regiment = { is_maa_type = light_footmen }"
        ],
        "traits": "class CMenAtArmsTypeDatabase key",
        "supported_scopes": "regiment",
        "supported_targets": null
    },
    "is_personal_maa_regiment": {
        "desc": "Is target MaA regiment personal",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "regiment",
        "supported_targets": null
    },
    "is_raised": {
        "desc": "Is target MaA regiment raised",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "regiment",
        "supported_targets": null
    },
    "is_regular_maa_regiment": {
        "desc": "Is target MaA regiment just a normal one recruited by a ruler",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "regiment",
        "supported_targets": null
    },
    "is_title_maa_regiment": {
        "desc": "Is target MaA regiment belongs to a title",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "regiment",
        "supported_targets": null
    },
    "is_unit_type": {
        "desc": "Check base MaA type of a regiment",
        "usage": [
            "scope:regiment = { is_unit_type = skirmishers }"
        ],
        "traits": null,
        "supported_scopes": "regiment",
        "supported_targets": null
    },
    "maa_current_troops_count": {
        "desc": "Get current number of soldiers in MaA regiment",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "regiment",
        "supported_targets": null
    },
    "maa_max_troops_count": {
        "desc": "Get max number of soldiers in MaA regiment",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "regiment",
        "supported_targets": null
    },
    "maa_size": {
        "desc": "Get regiment size - number of subregiments in it",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "regiment",
        "supported_targets": null
    },
    "obligation_level_score": {
        "desc": "The score in favour of the vassal for the scoped vassal contract obligation level",
        "usage": [
            "obligation_level_score > 2"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "vassal_contract_obligation_level",
        "supported_targets": null
    },
    "any_confederation_member": {
        "desc": "Iterates through all members of the scoped confederation",
        "usage": [
            "any_confederation_member = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "confederation",
        "supported_targets": "character"
    },
    "member_count": {
        "desc": "Number of members in the scoped confederation",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "confederation",
        "supported_targets": null
    },
    "any_opposite_trait": {
        "desc": "Iterate through all opposite traits of the scoped trait",
        "usage": [
            "any_opposite_trait = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "trait",
        "supported_targets": "trait"
    },
    "has_trait_category": {
        "desc": "Does the scoped trait belong to the given trait cateogry.",
        "usage": [
            "has_trait_category = health"
        ],
        "traits": "personality, education, childhood, commander, winter_commander, lifestyle, court_type, fame, health",
        "supported_scopes": "trait",
        "supported_targets": null
    },
    "has_trait_flag": {
        "desc": "Does the scoped trait have the given flag.",
        "usage": [
            "has_trait_flag = can_not_marry"
        ],
        "traits": null,
        "supported_scopes": "trait",
        "supported_targets": null
    },
    "is_opposite_of_trait": {
        "desc": "Is the scoped trait an opposite trait of the target trait.",
        "usage": [
            "is_opposite_of_trait = scope:trait"
        ],
        "traits": "class CTraitDatabase key",
        "supported_scopes": "trait",
        "supported_targets": "trait"
    },
    "any_house_claimed_artifact": {
        "desc": "Iterate through all claimed artifacts of the scoped house",
        "usage": [
            "any_house_claimed_artifact = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "dynasty_house",
        "supported_targets": "artifact"
    },
    "any_house_member": {
        "desc": "Iterate through all house members",
        "usage": [
            "any_house_member = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "dynasty_house",
        "supported_targets": "character"
    },
    "any_house_unity_member": {
        "desc": "Iterate through all valid house unity members",
        "usage": [
            "any_house_unity_member = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "dynasty_house",
        "supported_targets": "character"
    },
    "has_house_artifact_claim": {
        "desc": "Does the scoped dynasty house have a personal claim on the target artifact",
        "usage": [],
        "traits": "artifact scope",
        "supported_scopes": "dynasty_house",
        "supported_targets": "artifact"
    },
    "has_house_modifier": {
        "desc": "Does the scoped house have a given modifier",
        "usage": [
            "has_house_modifier = name"
        ],
        "traits": null,
        "supported_scopes": "dynasty_house",
        "supported_targets": null
    },
    "has_house_modifier_duration_remaining": {
        "desc": "Does the scoped house have the duration remaining on a given modifier",
        "usage": [
            "has_house_modifier_duration_remaining = name"
        ],
        "traits": null,
        "supported_scopes": "dynasty_house",
        "supported_targets": null
    },
    "has_house_unity": {
        "desc": "Is the given dynasty house has house unity",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "dynasty_house",
        "supported_targets": null
    },
    "has_house_unity_modifier": {
        "desc": "Does the scoped house with unity have a given modifier",
        "usage": [
            "has_house_unity_modifier = name"
        ],
        "traits": null,
        "supported_scopes": "dynasty_house",
        "supported_targets": null
    },
    "has_house_unity_modifier_duration_remaining": {
        "desc": "Does the scoped house have the duration remaining on a given modifier",
        "usage": [
            "has_house_unity_modifier_duration_remaining = name"
        ],
        "traits": null,
        "supported_scopes": "dynasty_house",
        "supported_targets": null
    },
    "has_house_unity_parameter": {
        "desc": "Does the given house unity have the given parameter? Can only check for bool parameters. has_house_unity_parameter = parameter_key",
        "usage": [],
        "traits": null,
        "supported_scopes": "dynasty_house",
        "supported_targets": null
    },
    "has_house_unity_stage": {
        "desc": "Is the given house unity the given stage?.",
        "usage": [
            "has_house_unity_stage = house_unity_stage_key"
        ],
        "traits": null,
        "supported_scopes": "dynasty_house",
        "supported_targets": null
    },
    "house_land_share_in_realm": {
        "desc": "Calculate share of counties held in the target liege's realm by the house.",
        "usage": [
            "scope:house = {",
            "house_land_share_in_realm = {",
            "target = scope:liege",
            "value > 0.5",
            "}",
            "}"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "dynasty_house",
        "supported_targets": null
    },
    "house_power": {
        "desc": "Compare house power: scope:house = { house_power >= value }",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "dynasty_house",
        "supported_targets": null
    },
    "house_unity_value": {
        "desc": "does the dynasty house have the required house unity value?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "dynasty_house",
        "supported_targets": null
    },
    "is_dominant_family": {
        "desc": "Is the given house considered dominant: scope:house = { is_dominant_family = yes }",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "dynasty_house",
        "supported_targets": null
    },
    "is_powerful_family": {
        "desc": "Is the given house considered powerful: scope:house = { is_powerful_family = yes }",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "dynasty_house",
        "supported_targets": null
    },
    "has_task_contract_group": {
        "desc": "Has task contract of the group",
        "usage": [
            "scope:character = { has_task_contract_group = group }"
        ],
        "traits": null,
        "supported_scopes": "task_contract",
        "supported_targets": null
    },
    "has_task_contract_type": {
        "desc": "has task contract with type",
        "usage": [
            "scope:task_contract = { has_task_contract_type = type_name }"
        ],
        "traits": null,
        "supported_scopes": "task_contract",
        "supported_targets": null
    },
    "is_criminal": {
        "desc": "Is the contract type of criminal nature?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "task_contract",
        "supported_targets": null
    },
    "is_valid_to_keep": {
        "desc": "Is contract valid to keep?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "task_contract",
        "supported_targets": null
    },
    "task_contract_tier": {
        "desc": "Tier value for task contract",
        "usage": [
            "scope:task_contract = { task_contract_tier = num }"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "task_contract",
        "supported_targets": null
    },
    "time_since_contract_taken": {
        "desc": "Days since the task contract was accepted.",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "task_contract",
        "supported_targets": null
    },
    "can_fire_position": {
        "desc": "Check if the scope task's councillor can be fired. Will check both can_fire and things like it being illegal to reassing the position",
        "usage": [
            "scope:task = { position_can_be_fired = yes }"
        ],
        "traits": "yes/no",
        "supported_scopes": "council_task",
        "supported_targets": null
    },
    "any_secret_knower": {
        "desc": "Iterate through all characters who know the secret",
        "usage": [
            "any_secret_knower = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "secret",
        "supported_targets": "character"
    },
    "any_secret_participant": {
        "desc": "Iterate through participants in a secret",
        "usage": [
            "any_secret_participant = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "secret",
        "supported_targets": "character"
    },
    "can_be_exposed_by": {
        "desc": "can the scope secret be exposed by the target character? can_be_exposed_by = target",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "secret",
        "supported_targets": null
    },
    "is_criminal_for": {
        "desc": "is this secret criminal for the target participant? is_criminal_for = <character>",
        "usage": [],
        "traits": "character scope",
        "supported_scopes": "secret",
        "supported_targets": "character"
    },
    "is_known_by": {
        "desc": "is the scope secret known by the target character?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "secret",
        "supported_targets": null
    },
    "is_shunned_for": {
        "desc": "is this secret shunned for the target participant? is_shunned_for = <character>",
        "usage": [],
        "traits": "character scope",
        "supported_scopes": "secret",
        "supported_targets": "character"
    },
    "is_shunned_or_criminal_for": {
        "desc": "is this secret shunned or criminal for the target participant? is_shunned_or_illegal_for = <character>",
        "usage": [],
        "traits": "character scope",
        "supported_scopes": "secret",
        "supported_targets": "character"
    },
    "is_spent_by": {
        "desc": "has the scope secret been spent by the target character? is_spent_by = target",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "secret",
        "supported_targets": null
    },
    "local_player_knows_this_secret": {
        "desc": "Does the local player have knowledge about the secret?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "secret",
        "supported_targets": null
    },
    "same_secret_type_as": {
        "desc": "Is the scope secret of the same type as the target secret?",
        "usage": [
            "same_secret_type_as = scope:some_secret"
        ],
        "traits": "secret scope",
        "supported_scopes": "secret",
        "supported_targets": "secret"
    },
    "secret_type": {
        "desc": "Is the scope secret of the specified type?",
        "usage": [],
        "traits": null,
        "supported_scopes": "secret",
        "supported_targets": null
    },
    "any_faith": {
        "desc": "Iterate through all faiths within a religion",
        "usage": [
            "any_faith = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "religion",
        "supported_targets": "faith"
    },
    "is_in_family": {
        "desc": "Is the scoped faith in a given religious family",
        "usage": [
            "is_in_family = abrhamic"
        ],
        "traits": null,
        "supported_scopes": "religion",
        "supported_targets": null
    },
    "any_army_maa_regiment": {
        "desc": "Iterate through all MaA regiments in the army",
        "usage": [
            "scope:army = {",
            "any_army_maa_regiment = {",
            "include_hired = yes # should it include merc and holy order regiments (yes by default)",
            "}",
            "}",
            "any_army_maa_regiment = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "army",
        "supported_targets": "regiment"
    },
    "army_is_moving": {
        "desc": "is this army moving?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "army",
        "supported_targets": null
    },
    "army_max_size": {
        "desc": "what size is this army's max size?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "army",
        "supported_targets": null
    },
    "army_size": {
        "desc": "what size is this army?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "army",
        "supported_targets": null
    },
    "army_supply": {
        "desc": "Can we disband this army?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "army",
        "supported_targets": null
    },
    "can_disband_army": {
        "desc": "Can we disband this army?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "army",
        "supported_targets": null
    },
    "is_army_in_combat": {
        "desc": "Is the scoped army in combat?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "army",
        "supported_targets": null
    },
    "is_army_in_raid": {
        "desc": "Is the scoped army in a raid (this includes a raid interrupted by combat)?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "army",
        "supported_targets": null
    },
    "is_army_in_siege": {
        "desc": "Is the scoped army in a siege (this includes a siege interrupted by combat)?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "army",
        "supported_targets": null
    },
    "is_army_in_siege_relevant_for": {
        "desc": "Is the scoped army in a siege that is relevant to the target character?",
        "usage": [
            "is_army_in_siege_relevant_for = scope:character"
        ],
        "traits": "character scope",
        "supported_scopes": "army",
        "supported_targets": "character"
    },
    "is_raid_army": {
        "desc": "Is the scoped army a raid army?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "army",
        "supported_targets": null
    },
    "raid_intent": {
        "desc": "Does the Army have the given raid intent?",
        "usage": [
            "raid_intent = key"
        ],
        "traits": null,
        "supported_scopes": "army",
        "supported_targets": null
    },
    "raid_loot": {
        "desc": "How much raid loot is the army carrying?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "army",
        "supported_targets": null
    },
    "total_army_damage": {
        "desc": "What is the army's total damage stat in its current location?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "army",
        "supported_targets": null
    },
    "total_army_pursuit": {
        "desc": "What is the army's total pursuit stat in its current location?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "army",
        "supported_targets": null
    },
    "total_army_screen": {
        "desc": "What is the army's total screen stat in its current location?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "army",
        "supported_targets": null
    },
    "total_army_siege_value": {
        "desc": "What is the army's total siege value stat in its current location?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "army",
        "supported_targets": null
    },
    "total_army_toughness": {
        "desc": "What is the army's total toughness stat in its current location?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "army",
        "supported_targets": null
    },
    "any_entourage_character": {
        "desc": "Iterate through all characters travelling along with the travel plan owner. Includes travel leader, but not the travel plan owner.",
        "usage": [
            "any_entourage_character = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "travel_plan",
        "supported_targets": "character"
    },
    "any_future_path_location": {
        "desc": "Iterate through all provinces this travel plan has in its route.",
        "usage": [
            "any_future_path_location = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "travel_plan",
        "supported_targets": "province"
    },
    "any_visited_location": {
        "desc": "Iterate through all provinces this travel plan has arrived at so far.",
        "usage": [
            "any_visited_location = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "travel_plan",
        "supported_targets": "province"
    },
    "can_cancel": {
        "desc": "Can this travel plan be cancelled? (associated activity might disallow it)",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "travel_plan",
        "supported_targets": null
    },
    "current_danger_value": {
        "desc": "Danger value of the current province the travel plan is in (-100.0 to +100.0).",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "travel_plan",
        "supported_targets": null
    },
    "days_travelled": {
        "desc": "Total number of days since this travel plan started.",
        "usage": [],
        "traits": "<, <=, =, >, >= valid date",
        "supported_scopes": "travel_plan",
        "supported_targets": null
    },
    "departure_date": {
        "desc": "Compare the date the travel plan started.",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "travel_plan",
        "supported_targets": null
    },
    "final_destination_arrival_date": {
        "desc": "Estimation date of arrival at the final destination",
        "usage": [],
        "traits": "<, <=, =, >, >= valid date",
        "supported_scopes": "travel_plan",
        "supported_targets": null
    },
    "final_destination_arrival_days": {
        "desc": "Estimation of days until we arrive at the final destination?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "travel_plan",
        "supported_targets": null
    },
    "final_destination_progress": {
        "desc": "Time progress (0.0 - 1.0) towards the final destination of the travel plan, compared to departure date from the very start of the Travel Plan.",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "travel_plan",
        "supported_targets": null
    },
    "has_travel_option": {
        "desc": "Does the travel plan have this travel option active?",
        "usage": [
            "<travel_plan> = { has_travel_option = name }"
        ],
        "traits": null,
        "supported_scopes": "travel_plan",
        "supported_targets": null
    },
    "has_travel_plan_modifier": {
        "desc": "Does the scoped travel plan have a given modifier",
        "usage": [
            "has_travel_plan_modifier = name"
        ],
        "traits": null,
        "supported_scopes": "travel_plan",
        "supported_targets": null
    },
    "has_travel_plan_modifier_duration_remaining": {
        "desc": "Does the scoped travel plan have the duration remaining on a given modifier",
        "usage": [
            "nhas_county_modifier_duration_remaining = name"
        ],
        "traits": null,
        "supported_scopes": "travel_plan",
        "supported_targets": null
    },
    "is_aborted": {
        "desc": "Is this travel plan aborted?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "travel_plan",
        "supported_targets": null
    },
    "is_cancelled": {
        "desc": "Is this travel plan cancelled? (manually stopped, and rerouted home)",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "travel_plan",
        "supported_targets": null
    },
    "is_completed": {
        "desc": "Is this travel plan completed? (finished by arrival at final destination)",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "travel_plan",
        "supported_targets": null
    },
    "is_paused": {
        "desc": "Is this travel plan paused?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "travel_plan",
        "supported_targets": null
    },
    "is_travel_with_domicile": {
        "desc": "Is character travelling with a domicile?",
        "usage": [
            "<travel_plan> = { is_travel_with_domicile = yes }"
        ],
        "traits": "yes/no",
        "supported_scopes": "travel_plan",
        "supported_targets": null
    },
    "next_destination_arrival_date": {
        "desc": "Estimation date of arrival at the next destination",
        "usage": [],
        "traits": "<, <=, =, >, >= valid date",
        "supported_scopes": "travel_plan",
        "supported_targets": null
    },
    "next_destination_arrival_days": {
        "desc": "Estimation of days until we arrive at the next destination",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "travel_plan",
        "supported_targets": null
    },
    "next_destination_progress": {
        "desc": "Time progress (0.0 - 1.0) towards the next destination of the travel plan, compared to departure date of the previous destination.",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "travel_plan",
        "supported_targets": null
    },
    "num_entourage_characters": {
        "desc": "Size of the travel plan entourage.",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "travel_plan",
        "supported_targets": null
    },
    "num_options": {
        "desc": "Number of travel options selected.",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "travel_plan",
        "supported_targets": null
    },
    "travel_safety": {
        "desc": "Gets the current travel safety for travel",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "travel_plan",
        "supported_targets": null
    },
    "travel_speed": {
        "desc": "Gets the current travel speed for travel (percentage points above 100%)",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "travel_plan",
        "supported_targets": null
    },
    "was_activity_completed": {
        "desc": "If there is/was an activity attached to this travel plan, was it completed?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "travel_plan",
        "supported_targets": null
    },
    "was_activity_invalidated": {
        "desc": "If there is/was an activity attached to this travel plan, was it invalidated?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "travel_plan",
        "supported_targets": null
    },
    "any_defensive_great_holy_wars": {
        "desc": "Iterate through all great holy wars this faith is defending against",
        "usage": [
            "any_defensive_great_holy_wars = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "faith",
        "supported_targets": "ghw"
    },
    "any_faith_character": {
        "desc": "Iterate through characters of the scoped faith",
        "usage": [
            "any_faith_character = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "faith",
        "supported_targets": "character"
    },
    "any_faith_holy_order": {
        "desc": "Iterate through all holy orders of the faith",
        "usage": [
            "any_faith_holy_order = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "faith",
        "supported_targets": "holy_order"
    },
    "any_faith_playable_ruler": {
        "desc": "Iterate through playable rulers of the scoped faith",
        "usage": [
            "any_faith_playable_ruler = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "faith",
        "supported_targets": "character"
    },
    "any_faith_ruler": {
        "desc": "Iterate through rulers of the scoped faith",
        "usage": [
            "any_faith_ruler = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "faith",
        "supported_targets": "character"
    },
    "any_holy_site": {
        "desc": "Iterate through all holy site baronies of a faith",
        "usage": [
            "any_holy_site = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "faith",
        "supported_targets": "landed_title"
    },
    "controls_holy_site": {
        "desc": "Does the faith control a holy site? controls_holy_site = key_of_holy_site",
        "usage": [],
        "traits": null,
        "supported_scopes": "faith",
        "supported_targets": null
    },
    "controls_holy_site_with_flag": {
        "desc": "Does the faith control a holy site with the given flag? controls_holy_site_with_flag = some flag",
        "usage": [],
        "traits": null,
        "supported_scopes": "faith",
        "supported_targets": null
    },
    "estimated_faith_strength": {
        "desc": "How strong is the scoped faith? *Expensive*, if you're gonna use the value repeatedly, save it to a scope first! This is scaled by a factor of 1000, so '1' means 1000 men. This is due to the cap of ~2 million, which would be too low in many cases",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "faith",
        "supported_targets": null
    },
    "faith_hostility_level": {
        "desc": "What is the faith's hostility level towards the target faith? faith_hostility_level { target = scope:some_faith value > 1 }",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "faith",
        "supported_targets": null
    },
    "faith_hostility_level_comparison": {
        "desc": "Compares the scoped faith's hostility level towards two other faiths. faith_hostility_level_comparison { faith1 > faith2 }",
        "usage": [],
        "traits": null,
        "supported_scopes": "faith",
        "supported_targets": null
    },
    "fervor": {
        "desc": "What is the faith's fervor?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "faith",
        "supported_targets": null
    },
    "has_allowed_gender_for_clergy": {
        "desc": "Is the target character of the allowed gender to be clergy of the faith?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "faith",
        "supported_targets": null
    },
    "has_doctrine": {
        "desc": "Does the given faith have the given doctrine?? has_doctrine = doctrine_key",
        "usage": [],
        "traits": "class CFaithDoctrineDatabase key",
        "supported_scopes": "faith",
        "supported_targets": "doctrine"
    },
    "has_doctrine_parameter": {
        "desc": "Does the given faith have the given doctrine parameter? Can only check for bool parameters. has_doctrine_parameter = parameter_key",
        "usage": [],
        "traits": null,
        "supported_scopes": "faith",
        "supported_targets": null
    },
    "has_dominant_ruling_gender": {
        "desc": "Is the target character's gender a dominant ruling gender of the faith? Also evaluates to true if there's no dominant ruling gender",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "faith",
        "supported_targets": null
    },
    "has_graphical_faith": {
        "desc": "Does the faith have this graphical faith?",
        "usage": [
            "<faith> = { has_graphical_faith = orthodoxgfx }"
        ],
        "traits": null,
        "supported_scopes": "faith",
        "supported_targets": null
    },
    "has_icon": {
        "desc": "Does the faith have the given icon",
        "usage": [
            "has_icon = some_cool_custom_icon"
        ],
        "traits": null,
        "supported_scopes": "faith",
        "supported_targets": null
    },
    "has_preferred_gender_for_clergy": {
        "desc": "Is the target character of the preferred gender to be clergy of the faith?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "faith",
        "supported_targets": null
    },
    "holy_sites_controlled": {
        "desc": "How many holy sites does the faith control? holy_sites_controlled > 1",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "faith",
        "supported_targets": null
    },
    "num_character_followers": {
        "desc": "Returns how many characters follow the given faith",
        "usage": [
            "num_character_followers > 0"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "faith",
        "supported_targets": null
    },
    "num_county_followers": {
        "desc": "Returns how many counties follow the given faith",
        "usage": [
            "num_county_followers > 0"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "faith",
        "supported_targets": null
    },
    "religion_tag": {
        "desc": "checks the tag of the religion of the current faith",
        "usage": [],
        "traits": null,
        "supported_scopes": "faith",
        "supported_targets": null
    },
    "trait_is_sin": {
        "desc": "Does the scoped faith consider the given trait a sin?",
        "usage": [
            "trait_is_sin = lustful"
        ],
        "traits": "class CTraitDatabase key",
        "supported_scopes": "faith",
        "supported_targets": "trait"
    },
    "trait_is_virtue": {
        "desc": "Does the scoped faith consider the given trait a virtue?",
        "usage": [
            "trait_is_virtue = lustful"
        ],
        "traits": "class CTraitDatabase key",
        "supported_scopes": "faith",
        "supported_targets": "trait"
    },
    "any_interloper_ruler": {
        "desc": "Iterate through all characters that are interloper in a struggle.",
        "usage": [
            "any_interloper_ruler = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "struggle",
        "supported_targets": "character"
    },
    "any_involved_county": {
        "desc": "Iterate through all counties that are involved in a struggle",
        "usage": [
            "any_involved_county = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "struggle",
        "supported_targets": "landed_title"
    },
    "any_involved_ruler": {
        "desc": "Iterate through all characters that are involved in a struggle.",
        "usage": [
            "any_involved_ruler = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "struggle",
        "supported_targets": "character"
    },
    "has_struggle_phase_parameter": {
        "desc": "Does the given struggle's current phase have the given parameter? Can only check for bool parameters. has_struggle_phase_parameter = parameter_key",
        "usage": [],
        "traits": null,
        "supported_scopes": "struggle",
        "supported_targets": null
    },
    "is_culture_involved_in_struggle": {
        "desc": "is the culture involved in struggle?",
        "usage": [
            "is_culture_involved_in_struggle = culture:english"
        ],
        "traits": "culture scope",
        "supported_scopes": "struggle",
        "supported_targets": "culture"
    },
    "is_faith_involved_in_struggle": {
        "desc": "is the faith involved in struggle?",
        "usage": [
            "is_faith_involved_in_struggle  = faith:baltic_pagan"
        ],
        "traits": "faith scope",
        "supported_scopes": "struggle",
        "supported_targets": "faith"
    },
    "is_struggle_phase": {
        "desc": "is the scope struggle's current phase particular phase?",
        "usage": [
            "is_struggle_phase = struggle_iberia_phase_opportunity"
        ],
        "traits": null,
        "supported_scopes": "struggle",
        "supported_targets": null
    },
    "is_struggle_type": {
        "desc": "is the scope struggle's type particular type?",
        "usage": [
            "is_struggle_type = iberian_struggle"
        ],
        "traits": null,
        "supported_scopes": "struggle",
        "supported_targets": null
    },
    "phase_has_catalyst": {
        "desc": "Is any of the future phases affected by the given catalyst?phase_has_catalyst = catalyst_key",
        "usage": [],
        "traits": null,
        "supported_scopes": "struggle",
        "supported_targets": null
    },
    "any_situation_sub_region_county": {
        "desc": "Iterate through all counties of a situation sub-region (warning: not fast)",
        "usage": [
            "any_situation_sub_region_county = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "situation_sub_region",
        "supported_targets": "landed_title"
    },
    "any_situation_sub_region_geographical_region": {
        "desc": "Iterate through all geographical regions of a situation sub-region",
        "usage": [
            "any_situation_sub_region_geographical_region = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "situation_sub_region",
        "supported_targets": "geographical_region"
    },
    "any_situation_sub_region_participant": {
        "desc": "Iterate through all characters that are participating in a situation, in a specific subregion",
        "usage": [
            "any_situation_sub_region_participant = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "situation_sub_region",
        "supported_targets": "character"
    },
    "any_situation_sub_region_participant_group": {
        "desc": "Iterate through all participant groups of the situation sub-region",
        "usage": [
            "any_situation_sub_region_participant_group = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "situation_sub_region",
        "supported_targets": "situation_participant_group"
    },
    "has_sub_region_phase_parameter": {
        "desc": "Checks if sub-region has phase parameter or not",
        "usage": [
            "has_sub_region_phase_parameter = parameter_key"
        ],
        "traits": null,
        "supported_scopes": "situation_sub_region",
        "supported_targets": null
    },
    "phase_takeover_duration_days": {
        "desc": "Checks the takeover days left of a future phase in this sub-region.",
        "usage": [
            "phase_takeover_duration_days:future_phase_key <= scripted_value"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "situation_sub_region",
        "supported_targets": null
    },
    "phase_takeover_points": {
        "desc": "Checks the takeover points of a future phase in this sub-region.",
        "usage": [
            "phase_takeover_points:future_phase_key <= scripted_value"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "situation_sub_region",
        "supported_targets": null
    },
    "situation_sub_region_has_county": {
        "desc": "Checks if scoped sub-region of a situation contains county",
        "usage": [
            "situation_sub_region_has_county = scope:county"
        ],
        "traits": "landed_title scope",
        "supported_scopes": "situation_sub_region",
        "supported_targets": "landed_title"
    },
    "situation_sub_region_has_geographical_region": {
        "desc": "Is geographical region part of situation sub-region?",
        "usage": [
            "situation_sub_region_has_geographical_region = scope:geographical_region"
        ],
        "traits": "class CGeographicalRegionDatabase key",
        "supported_scopes": "situation_sub_region",
        "supported_targets": "geographical_region"
    },
    "situation_sub_region_has_province": {
        "desc": "Checks if scoped sub-region of a situation contains province",
        "usage": [
            "situation_sub_region_has_province = scope:province"
        ],
        "traits": "province target province scope",
        "supported_scopes": "situation_sub_region",
        "supported_targets": "province"
    },
    "sub_region_current_phase": {
        "desc": "Checks if sub-region current phase equals phase_type",
        "usage": [
            "sub_region_current_phase = phase_type"
        ],
        "traits": null,
        "supported_scopes": "situation_sub_region",
        "supported_targets": null
    },
    "agent_slot_contribution": {
        "desc": "The contribution value given by the scoped filled agent slot.",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "agent_slot",
        "supported_targets": null
    },
    "agent_slot_has_contribution_type": {
        "desc": "Does the agent slot have provide the given type of contribution?",
        "usage": [
            "agent_slot_has_contribution_type = <type>"
        ],
        "traits": null,
        "supported_scopes": "agent_slot",
        "supported_targets": null
    },
    "is_agent_slot_type": {
        "desc": "Does the Agent Slot have the given type?",
        "usage": [
            "is_agent_slot_type = key"
        ],
        "traits": null,
        "supported_scopes": "agent_slot",
        "supported_targets": null
    },
    "is_filled": {
        "desc": "Is this agent slot filled?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "agent_slot",
        "supported_targets": null
    },
    "any_pledged_attacker": {
        "desc": "Iterate through all pledged attackers within a great holy war",
        "usage": [
            "any_pledged_attacker = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "ghw",
        "supported_targets": "character"
    },
    "any_pledged_defender": {
        "desc": "Iterate through all pledged defenders within a great holy war",
        "usage": [
            "any_pledged_defender = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "ghw",
        "supported_targets": "character"
    },
    "days_until_ghw_launch": {
        "desc": "How many days is it until the given GHW launches its war?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "ghw",
        "supported_targets": null
    },
    "ghw_attackers_strength": {
        "desc": "What is the max (if all levies were fully reinforced) military strength of the pledged attackers in the given Great Holy War?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "ghw",
        "supported_targets": null
    },
    "ghw_defenders_strength": {
        "desc": "What is the max (if all levies were fully reinforced) military strength of the pledged defenders in the given Great Holy War?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "ghw",
        "supported_targets": null
    },
    "ghw_war_chest_gold": {
        "desc": "How much gold is in the great holy war's war chest?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "ghw",
        "supported_targets": null
    },
    "ghw_war_chest_piety": {
        "desc": "How much piety is in the great holy war's war chest?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "ghw",
        "supported_targets": null
    },
    "ghw_war_chest_prestige": {
        "desc": "How much prestige is in the great holy war's war chest?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "ghw",
        "supported_targets": null
    },
    "has_forced_defender": {
        "desc": "Is the target character forced to be a defender in the given Great Holy War?",
        "usage": [],
        "traits": "character scope",
        "supported_scopes": "ghw",
        "supported_targets": "character"
    },
    "has_pledged_attacker": {
        "desc": "Is the target character pledged as an attacker in the given Great Holy War?",
        "usage": [],
        "traits": "character scope",
        "supported_scopes": "ghw",
        "supported_targets": "character"
    },
    "has_pledged_defender": {
        "desc": "Is the target character pledged as a defender in the given Great Holy War?",
        "usage": [],
        "traits": "character scope",
        "supported_scopes": "ghw",
        "supported_targets": "character"
    },
    "is_directed_ghw": {
        "desc": "Is the scoped GHW a directed GHW?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "ghw",
        "supported_targets": null
    },
    "any_infected_province": {
        "desc": "Gets all provinces infected by the scoped epidemic",
        "usage": [
            "any_infected_province = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "epidemic",
        "supported_targets": "province"
    },
    "days_since_outbreak_start": {
        "desc": "Number of days since the epidemic outbreak started.",
        "usage": [
            "days_since_outbreak_start >= 20"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "epidemic",
        "supported_targets": null
    },
    "outbreak_intensity": {
        "desc": "Get the outbreak intensity of this epidemic.",
        "usage": [
            "outbreak_intensity = major"
        ],
        "traits": "minor, major, apocalyptic",
        "supported_scopes": "epidemic",
        "supported_targets": null
    },
    "outbreak_start_date": {
        "desc": "Date when the epidemic outbreak began.",
        "usage": [],
        "traits": "<, <=, =, >, >= valid date",
        "supported_scopes": "epidemic",
        "supported_targets": null
    },
    "total_infected_provinces": {
        "desc": "Get the total number of provinces infected over the lifetime of this epidemic.",
        "usage": [
            "total_infected_provinces >= 20"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "epidemic",
        "supported_targets": null
    },
    "any_tax_slot_vassal": {
        "desc": "Iterates through all Vassals assigned to the scoped Tax Slot",
        "usage": [
            "any_tax_slot_vassal = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "tax_slot",
        "supported_targets": "character"
    },
    "available_taxpayer_slots": {
        "desc": "How many slots for taxpayers are available in scoped tax slot?",
        "usage": [
            "scope:tax_slot = { available_tax_player_slots > 2 }"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "tax_slot",
        "supported_targets": null
    },
    "has_tax_collector": {
        "desc": "has_tax_collector = yes",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "tax_slot",
        "supported_targets": null
    },
    "is_active_obligation": {
        "desc": "Is this the current active tax obligation?",
        "usage": [
            "scope:tax_slot = { is_active_obligation = obligation_key }"
        ],
        "traits": null,
        "supported_scopes": "tax_slot",
        "supported_targets": null
    },
    "any_situation_group_participant": {
        "desc": "Iterate through all characters that are part of a participation group in a situation.",
        "usage": [
            "any_situation_group_participant = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "situation_participant_group",
        "supported_targets": "character"
    },
    "auto_add_rulers": {
        "desc": "If region rulers are automatically checked to be valid participants for this group.",
        "usage": [
            "auto_add_rulers = yes/no"
        ],
        "traits": "yes/no",
        "supported_scopes": "situation_participant_group",
        "supported_targets": null
    },
    "participant_group_has_character": {
        "desc": "Is this character a participant in this participant group?",
        "usage": [
            "participant_group_has_character = scope:character"
        ],
        "traits": "character scope",
        "supported_scopes": "situation_participant_group",
        "supported_targets": "character"
    },
    "participant_group_type": {
        "desc": "Is the scoped participant group of a specific type?",
        "usage": [
            "participant_group_type = group_key"
        ],
        "traits": null,
        "supported_scopes": "situation_participant_group",
        "supported_targets": null
    },
    "require_capital_in_sub_region": {
        "desc": "Is it required that the capital of participants is in the sub-region?",
        "usage": [
            "require_capital_in_sub_region = yes/no"
        ],
        "traits": "yes/no",
        "supported_scopes": "situation_participant_group",
        "supported_targets": null
    },
    "require_domain_in_sub_region": {
        "desc": "Is it required that some part of the domain of participants is in the sub-region?",
        "usage": [
            "require_domain_in_sub_region = yes/no"
        ],
        "traits": "yes/no",
        "supported_scopes": "situation_participant_group",
        "supported_targets": null
    },
    "require_realm_in_sub_region": {
        "desc": "Is it required that some part of the realm of participants is in the sub-region?",
        "usage": [
            "require_realm_in_sub_region = yes/no"
        ],
        "traits": "yes/no",
        "supported_scopes": "situation_participant_group",
        "supported_targets": null
    },
    "accolade_type_tier": {
        "desc": "Is the scoped Accolade Type's tier equal to?",
        "usage": [],
        "traits": null,
        "supported_scopes": "accolade_type",
        "supported_targets": null
    },
    "type_has_accolade_category": {
        "desc": "Does the scoped Accolade Type have the given category?",
        "usage": [
            "type_has_accolade_category = flag"
        ],
        "traits": null,
        "supported_scopes": "accolade_type",
        "supported_targets": null
    },
    "has_tradition_category": {
        "desc": "has_tradition_category = realm",
        "usage": [],
        "traits": null,
        "supported_scopes": "culture_tradition",
        "supported_targets": null
    },
    "any_target_title": {
        "desc": "Iterate through all casus belli's target titles",
        "usage": [
            "any_target_title = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "casus_belli",
        "supported_targets": "landed_title"
    },
    "any_artifact_claimant": {
        "desc": "Iterate through all characters with a claim on the scoped artifact",
        "usage": [
            "any_artifact_claimant = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "artifact",
        "supported_targets": "character"
    },
    "any_artifact_house_claimant": {
        "desc": "Iterate through all dynasty houses with a claim on the scoped artifact",
        "usage": [
            "any_artifact_house_claimant = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "artifact",
        "supported_targets": "dynasty_house"
    },
    "artifact_durability": {
        "desc": "does this artifact have the required durability?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "artifact",
        "supported_targets": null
    },
    "artifact_max_durability": {
        "desc": "does this artifact have the required max durability?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "artifact",
        "supported_targets": null
    },
    "artifact_slot_type": {
        "desc": "is the artifact of the given inventory slot type?",
        "usage": [],
        "traits": null,
        "supported_scopes": "artifact",
        "supported_targets": null
    },
    "artifact_type": {
        "desc": "is the artifact of the given type?",
        "usage": [],
        "traits": null,
        "supported_scopes": "artifact",
        "supported_targets": null
    },
    "can_be_claimed_by": {
        "desc": "Can the scoped artifact be claimed by the given character?",
        "usage": [],
        "traits": "character scope",
        "supported_scopes": "artifact",
        "supported_targets": "character"
    },
    "category": {
        "desc": "is the scoped artifact of given category?",
        "usage": [],
        "traits": null,
        "supported_scopes": "artifact",
        "supported_targets": null
    },
    "has_artifact_feature": {
        "desc": "Does the artifact have the given feature?",
        "usage": [
            "has_artifact_feature = key"
        ],
        "traits": null,
        "supported_scopes": "artifact",
        "supported_targets": null
    },
    "has_artifact_feature_group": {
        "desc": "Does the artifact have the given feature group?",
        "usage": [
            "has_artifact_feature_group = key"
        ],
        "traits": null,
        "supported_scopes": "artifact",
        "supported_targets": null
    },
    "has_artifact_modifier": {
        "desc": "Does the artifact have the given modifier?",
        "usage": [
            "has_artifact_modifier  = key"
        ],
        "traits": null,
        "supported_scopes": "artifact",
        "supported_targets": null
    },
    "is_equipped": {
        "desc": "is the scoped artifact currently equipped in its owners inventory?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "artifact",
        "supported_targets": null
    },
    "is_unique": {
        "desc": "Is the scoped artifact unique",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "artifact",
        "supported_targets": null
    },
    "num_artifact_kills": {
        "desc": "How many kills has this artifact been used in?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "artifact",
        "supported_targets": null
    },
    "rarity": {
        "desc": "is the scoped artifact of given rarity?",
        "usage": [],
        "traits": null,
        "supported_scopes": "artifact",
        "supported_targets": null
    },
    "should_decay": {
        "desc": "should the scoped artifact decay with time?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "artifact",
        "supported_targets": null
    },
    "region_is_adjacent": {
        "desc": "Checks if given region is adjacent or overlaps with the target region.",
        "usage": [
            "scope:situation_subregion/geographical_region:key = {",
            "region_is_adjacent = scope:geographical_region",
            "}"
        ],
        "traits": "geographical_region scope",
        "supported_scopes": "geographical_region, situation_sub_region",
        "supported_targets": "geographical_region"
    },
    "region_is_adjacent_situation_subregion": {
        "desc": "Checks if given region is adjacent or overlaps with the target region.",
        "usage": [
            "scope:situation_subregion/geographical_region:key = {",
            "region_is_adjacent_situation_subregion = scope:situation_subregion",
            "}"
        ],
        "traits": "situation_sub_region scope",
        "supported_scopes": "geographical_region, situation_sub_region",
        "supported_targets": "situation_sub_region"
    },
    "mercenary_company_expiration_days": {
        "desc": "How many days are left in the mercenary contract. 0 if not hired.",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "mercenary_company",
        "supported_targets": null
    },
    "any_killed_character": {
        "desc": "Iterate through all kills of a character",
        "usage": [
            "any_killed_character = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character, artifact",
        "supported_targets": "character"
    },
    "add_to_temporary_list": {
        "desc": "Saves a temporary target for use during the trigger execution",
        "usage": [
            "In order to add every instance of a scope that fulfills certain conditions, use \"count = all\" while also placing this \"effect\" at the very end of the any-trigger (so that every condition is evaluated for every iteration)."
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "all_false": {
        "desc": "true if all children are false (equivalent to NOR)",
        "usage": [],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "always": {
        "desc": "checks if the assigned yes/no value is true",
        "usage": [
            "always = yes # always succeeds",
            "always = no  # always fails",
            "always = scope:a_boolean_value # evaluated at runtime"
        ],
        "traits": "yes/no",
        "supported_scopes": "none",
        "supported_targets": null
    },
    "and": {
        "desc": "all inside trigger must be true",
        "usage": [],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "any_accolade_type": {
        "desc": "Iterate through every accolade_type in the database",
        "usage": [
            "any_accolade_type = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": "accolade_type"
    },
    "any_activity": {
        "desc": "Iterate through all activities in the world",
        "usage": [
            "any_activity = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": "activity"
    },
    "any_activity_type": {
        "desc": "Iterate through every activity_type in the database",
        "usage": [
            "any_activity_type = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": "activity_type"
    },
    "any_artifact": {
        "desc": "Iterate through all existing artifacts",
        "usage": [
            "any_artifact = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": "artifact"
    },
    "any_barony": {
        "desc": "Iterate through all baronies in the game",
        "usage": [
            "any_barony = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": "landed_title"
    },
    "any_casus_belli_type": {
        "desc": "Iterate through every casus_belli_type in the database",
        "usage": [
            "any_casus_belli_type = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": "casus_belli_type"
    },
    "any_character_with_royal_court": {
        "desc": "Iterate through all characters with a royal court",
        "usage": [
            "any_character_with_royal_court = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": "character"
    },
    "any_completed_legend": {
        "desc": "Gets all legends in the world that have been completed",
        "usage": [
            "any_completed_legend = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": "legend"
    },
    "any_county": {
        "desc": "Iterate through all counties in the game",
        "usage": [
            "any_county = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": "landed_title"
    },
    "any_county_in_region": {
        "desc": "Iterate through all counties in the region. Put 'region = region_name' inside it",
        "usage": [
            "any_county_in_region = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": "landed_title"
    },
    "any_court_position_type": {
        "desc": "Iterate through every court_position_type in the database",
        "usage": [
            "any_court_position_type = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": "court_position_type"
    },
    "any_culture_global": {
        "desc": "Iterate through all cultures in the game",
        "usage": [
            "any_culture_global = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": "culture"
    },
    "any_culture_pillar": {
        "desc": "Iterate through every culture_pillar in the database",
        "usage": [
            "any_culture_pillar = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": "culture_pillar"
    },
    "any_culture_tradition": {
        "desc": "Iterate through every culture_tradition in the database",
        "usage": [
            "any_culture_tradition = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": "culture_tradition"
    },
    "any_decision": {
        "desc": "Iterate through every decision in the database",
        "usage": [
            "any_decision = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": "decision"
    },
    "any_doctrine": {
        "desc": "Iterate through every doctrine in the database",
        "usage": [
            "any_doctrine = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": "doctrine"
    },
    "any_domicile": {
        "desc": "Iterate through all domiciles",
        "usage": [
            "any_domicile = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": "domicile"
    },
    "any_duchy": {
        "desc": "Iterate through all duchies in the game",
        "usage": [
            "any_duchy = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": "landed_title"
    },
    "any_empire": {
        "desc": "Iterate through all empires in the game",
        "usage": [
            "any_empire = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": "landed_title"
    },
    "any_epidemic": {
        "desc": "Gets all epidemics in the world",
        "usage": [
            "any_epidemic = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": "epidemic"
    },
    "any_epidemic_type": {
        "desc": "Iterate through every epidemic_type in the database",
        "usage": [
            "any_epidemic_type = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": "epidemic_type"
    },
    "any_false": {
        "desc": "true if any child is false (equivalent to NAND)",
        "usage": [],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "any_geographical_region": {
        "desc": "Iterate through every geographical_region in the database",
        "usage": [
            "any_geographical_region = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": "geographical_region"
    },
    "any_government_type": {
        "desc": "Iterate through every government_type in the database",
        "usage": [
            "any_government_type = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": "government_type"
    },
    "any_holding_type": {
        "desc": "Iterate through every holding_type in the database",
        "usage": [
            "any_holding_type = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": "holding_type"
    },
    "any_important_location": {
        "desc": "Iterate through all counties that are important for at least some title",
        "usage": [
            "any_important_location = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": "landed_title"
    },
    "any_in_global_list": {
        "desc": "Iterate through all items in global list. list = name or variable = name",
        "usage": [
            "any_in_global_list = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "any_in_list": {
        "desc": "Iterate through all items in list. list = name or variable = name",
        "usage": [
            "any_in_list = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "any_in_local_list": {
        "desc": "Iterate through all items in local list. list = name or variable = name",
        "usage": [
            "any_in_local_list = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "any_independent_ruler": {
        "desc": "Independent rulers list with a COUNT tier or above who hold land",
        "usage": [
            "any_independent_ruler = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": "character"
    },
    "any_inspiration": {
        "desc": "Iterate through all inspirations in the world",
        "usage": [
            "any_inspiration = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": "inspiration"
    },
    "any_inspired_character": {
        "desc": "Iterate through all characters with an inspirations in the world",
        "usage": [
            "any_inspired_character = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": "character"
    },
    "any_interested_title": {
        "desc": "Iterate through all titles that are interested in any county",
        "usage": [
            "any_interested_title = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": "landed_title"
    },
    "any_kingdom": {
        "desc": "Iterate through all kingdoms in the game",
        "usage": [
            "any_kingdom = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": "landed_title"
    },
    "any_legend": {
        "desc": "Gets all legends in the world that have not been completed",
        "usage": [
            "any_legend = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": "legend"
    },
    "any_legend_type": {
        "desc": "Iterate through every legend_type in the database",
        "usage": [
            "any_legend_type = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": "legend_type"
    },
    "any_living_character": {
        "desc": "Iterate through all living characters",
        "usage": [
            "any_living_character = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": "character"
    },
    "any_mercenary_company": {
        "desc": "Iterate through all mercenary companies",
        "usage": [
            "any_mercenary_company = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": "mercenary_company"
    },
    "any_open_invite_activity": {
        "desc": "Iterate through all open invite activities in the world",
        "usage": [
            "any_open_invite_activity = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": "activity"
    },
    "any_player": {
        "desc": "Iterate through all player characters",
        "usage": [
            "any_player = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": "character"
    },
    "any_pool_character": {
        "desc": "Iterate through all characters in the pool of the given province",
        "usage": [
            "any_pool_character = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": "character"
    },
    "any_province": {
        "desc": "Iterate through all provinces (skips non-land and impassable provinces)",
        "usage": [
            "any_province = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": "province"
    },
    "any_religion_global": {
        "desc": "Iterate through all religions in the game",
        "usage": [
            "any_religion_global = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": "religion"
    },
    "any_ruler": {
        "desc": "Rulers list with a COUNT tier o above",
        "usage": [
            "any_ruler = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": "character"
    },
    "any_special_building_province": {
        "desc": "Iterate through all provinces with a special building slot (built or un-built)",
        "usage": [
            "any_special_building_province = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": "province"
    },
    "any_task_contract": {
        "desc": "Gets all available and accepted task contracts.",
        "usage": [
            "any_task_contract = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": "task_contract"
    },
    "any_task_contract_type": {
        "desc": "Iterate through every task_contract_type in the database",
        "usage": [
            "any_task_contract_type = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": "task_contract_type"
    },
    "any_trait": {
        "desc": "Iterate through every trait in the database",
        "usage": [
            "any_trait = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": "trait"
    },
    "any_trait_in_category": {
        "desc": "Iterate through all traits in a given category",
        "usage": [
            "any_trait_in_category = { category = fame/health/etc }",
            "any_trait_in_category = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": "trait"
    },
    "any_vassal_contract": {
        "desc": "Iterate through every vassal_contract in the database",
        "usage": [
            "any_vassal_contract = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": "vassal_contract"
    },
    "assert_if": {
        "desc": "Conditionally cause an assert during run time",
        "usage": [
            "assert_if = { limit = { X } text = Y }, where X is a trigger and Y is an optional string"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "assert_read": {
        "desc": "Conditionally cause an assert during read time",
        "usage": [
            "assert_read = X, where X is yes or the string to be printed in the assert"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "calc_true_if": {
        "desc": "Returns true if the specified number of sub-triggers return true",
        "usage": [
            "calc_true_if = { amount = 2 <trigger> <trigger> <trigger> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "can_start_tutorial_lesson": {
        "desc": "Can the specified tutorial lesson be started?",
        "usage": [
            "can_start_tutorial_lesson = reactive_advice_succession",
            "An interface trigger, can only be used in specific places"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "current_computer_date": {
        "desc": "Compare the current computer date.",
        "usage": [],
        "traits": "<, <=, =, >, >= valid date",
        "supported_scopes": "none",
        "supported_targets": null
    },
    "current_computer_date_day": {
        "desc": "Compare the current computer day.",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "none",
        "supported_targets": null
    },
    "current_computer_date_month": {
        "desc": "Compare the current computer month.",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "none",
        "supported_targets": null
    },
    "current_computer_date_year": {
        "desc": "Compare the current computer year.",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "none",
        "supported_targets": null
    },
    "current_date": {
        "desc": "Compare the current ingame date.",
        "usage": [],
        "traits": "<, <=, =, >, >= valid date",
        "supported_scopes": "none",
        "supported_targets": null
    },
    "current_day": {
        "desc": "Compare the current ingame day [1, 31]",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "none",
        "supported_targets": null
    },
    "current_month": {
        "desc": "Compare the current ingame month [1..12]",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "none",
        "supported_targets": null
    },
    "current_tooltip_depth": {
        "desc": "What is number of tooltips open rigth now?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "none",
        "supported_targets": null
    },
    "current_year": {
        "desc": "Compare the current ingame year",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "none",
        "supported_targets": null
    },
    "custom_description": {
        "desc": "Wraps triggers that get a custom description instead of the auto-generated one",
        "usage": [
            "custom_description = {",
            "text = <trigger_localization_key>",
            "subject = <optional subject scope> #defaults to current scope",
            "object = <optional object scope>",
            "value = <optional script value>",
            "... triggers ...",
            "}"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "custom_tooltip": {
        "desc": "Replaces the tooltips for the enclosed triggers with a custom text",
        "usage": [
            "custom_tooltip = {",
            "text = <text>",
            "subject = <scope> (optional)",
            "<trigger>",
            "}"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "debug_log": {
        "desc": "Log whether the parent trigger succeeded or failed",
        "usage": [],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "debug_log_details": {
        "desc": "Log whether the parent trigger succeeded or failed. Log which children succeeded or failed",
        "usage": [],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "debug_only": {
        "desc": "Checks if the game is in debug mode or not.",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "none",
        "supported_targets": null
    },
    "exists": {
        "desc": "Checks whether the specified scope target exists (check for not being the null object)",
        "usage": [
            "exists = from.owner.var:cool_var.mother"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "game_start_date": {
        "desc": "Compare the date of the bookmarked game launched.",
        "usage": [],
        "traits": "<, <=, =, >, >= valid date",
        "supported_scopes": "none",
        "supported_targets": null
    },
    "global_variable_list_size": {
        "desc": "Checks the size of a variable list",
        "usage": [
            "variable_list_size = { name = X target >= Y }",
            "Where X is the name of the variable",
            "Where Y is a script value or number"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "has_dlc": {
        "desc": "Does the host have this DLC",
        "usage": [],
        "traits": "Valid DLCs: The Fate of Iberia, Tours and Tournaments, Elegance of the Empire, Roads to Power, Couture of the Capets, Legends of the Dead, The Northern Lords, Garments of the Holy Roman Empire, The Royal Court, Legacy of Persia, Wandering Nobles, Friends and Foes, Fashion of the Abbasid Court, and Wards and Wardens",
        "supported_scopes": "none",
        "supported_targets": null
    },
    "has_dlc_feature": {
        "desc": "Does the host have DLC that enables this particular feature",
        "usage": [],
        "traits": "Valid Features: garments_of_the_hre, fashion_of_the_abbasid_court, the_northern_lords, hybridize_culture, diverge_culture, royal_court, reform_culture, court_artifacts, the_fate_of_iberia, friends_and_foes, tours_and_tournaments, advanced_activities, accolades, legacy_of_persia, elegance_of_the_empire, wards_and_wardens, legends_of_the_dead, legends, north_african_attire, couture_of_the_capets, landless_playable, admin_gov, roads_to_power, court_room_view, wandering_nobles, west_slavic_attire, medieval_monuments, khans_of_the_steppe, nomads, arctic_attire, crowns_of_the_world, and landless_adventurer",
        "supported_scopes": "none",
        "supported_targets": null
    },
    "has_game_rule": {
        "desc": "Is the given game rule setting enabled?",
        "usage": [
            "has_game_rule = faster_conversion"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "has_global_variable": {
        "desc": "Checks whether the current scope has the specified variable set",
        "usage": [
            "has_variable = name"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "has_global_variable_list": {
        "desc": "Checks whether the current scope has the specified variable list set",
        "usage": [
            "has_variable_list = name"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "has_local_player_open_court_event": {
        "desc": "Has the local player opened a court event in the royal court view?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "none",
        "supported_targets": null
    },
    "has_local_player_seen_unopened_court_event": {
        "desc": "Has the local player seen the unopened court event(s) waiting in the royal court view?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "none",
        "supported_targets": null
    },
    "has_local_player_unopened_court_event": {
        "desc": "Has the local player an unopened court event waiting in the royal court view?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "none",
        "supported_targets": null
    },
    "has_local_variable": {
        "desc": "Checks whether the current scope has the specified variable set",
        "usage": [
            "has_variable = name"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "has_local_variable_list": {
        "desc": "Checks whether the current scope has the specified variable list set",
        "usage": [
            "has_variable_list = name"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "has_map_mode": {
        "desc": "Checks if the current map mode is the specified one",
        "usage": [
            "has_map_mode = realms",
            "An interface trigger, can only be used in specific places"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "has_multiple_players": {
        "desc": "Does the game have at least two players currently connected?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "none",
        "supported_targets": null
    },
    "has_reward_item": {
        "desc": "Does the player have a reward item",
        "usage": [],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "has_variable": {
        "desc": "Checks whether the current scope has the specified variable set",
        "usage": [
            "has_variable = name"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "has_variable_list": {
        "desc": "Checks whether the current scope has the specified variable list set",
        "usage": [
            "has_variable_list = name"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "has_vassal_stance": {
        "desc": "Does the scoped vassal character have the given vassal stance",
        "usage": [
            "has_vassal_stance = glory_hound"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "has_war_result_message_with_outcome": {
        "desc": "Is there a war result message with the specified outcome?",
        "usage": [
            "has_war_result_message_with_outcome = victory/defeat/white_peace/invalidated/any",
            "An interface trigger, can only be used in specific places"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "is_bad_nickname": {
        "desc": "Is the nickname bad?",
        "usage": [],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "is_frontend_character_selected": {
        "desc": "is the specified front end character selected (also can be used with \"= yes\" and \"= no\")?",
        "usage": [],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "is_game_view_open": {
        "desc": "is the specified in-game view open?",
        "usage": [],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "is_gamestate_tutorial_active": {
        "desc": "Is the gamestate tutorial active? See save_progress_in_gamestate in tutorial_lesson_chains documentation.",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "none",
        "supported_targets": null
    },
    "is_in_list": {
        "desc": "Checks if a target in in a list",
        "usage": [],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "is_mercenary_in_hire_range": {
        "desc": "Is the mercenary company within the hiring range of the target character.",
        "usage": [
            "is_mercenary_in_hire_range = scope:character"
        ],
        "traits": "character scope",
        "supported_scopes": "none",
        "supported_targets": "character"
    },
    "is_player_selected": {
        "desc": "is the player playing a character?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "none",
        "supported_targets": null
    },
    "is_rightful_liege_of": {
        "desc": "Was the target character the preferred heir of the scoped character",
        "usage": [
            "was_preferred_heir = scope:character"
        ],
        "traits": "character scope",
        "supported_scopes": "none",
        "supported_targets": "character"
    },
    "is_set": {
        "desc": "Checks whether the specified scope target has been set (includes being the null object)",
        "usage": [
            "is_set = from.owner.var:cool_var.mother"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "is_target_in_global_variable_list": {
        "desc": "Checks if a target is in a variable list",
        "usage": [
            "is_target_in_variable_list = { name = X target = Y }",
            "Where X is the name of the variable",
            "Where Y is an event target"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "is_target_in_local_variable_list": {
        "desc": "Checks if a target is in a variable list",
        "usage": [
            "is_target_in_variable_list = { name = X target = Y }",
            "Where X is the name of the variable",
            "Where Y is an event target"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "is_target_in_variable_list": {
        "desc": "Checks if a target is in a variable list",
        "usage": [
            "is_target_in_variable_list = { name = X target = Y }",
            "Where X is the name of the variable",
            "Where Y is an event target"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "is_tooltip_with_name_open": {
        "desc": "is the tooltip with the specified name open?",
        "usage": [],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "is_tutorial_active": {
        "desc": "Is the tutorial active?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "none",
        "supported_targets": null
    },
    "is_tutorial_lesson_active": {
        "desc": "Is this the current tutorial lesson?",
        "usage": [
            "is_tutorial_lesson_active = reactive_advice_succession",
            "An interface trigger, can only be used in specific places"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "is_tutorial_lesson_chain_completed": {
        "desc": "Has the tutorial lesson chain with the specified key been finished?",
        "usage": [],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "is_tutorial_lesson_completed": {
        "desc": "has the tutorial lesson with the specified name been finished?",
        "usage": [],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "is_tutorial_lesson_step_completed": {
        "desc": "Has the tutorial lesson step been finished?",
        "usage": [
            "is_tutorial_lesson_step_completed = lesson_key:step_key",
            "An interface trigger, can only be used in specific places"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "is_war_overview_tab_open": {
        "desc": "is the war overview open at a specified tab (victory, defeat, white_peace)?",
        "usage": [],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "is_widgetid_open": {
        "desc": "Is the widget with the specified `widgetid` open (visible and not animating)?",
        "usage": [],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "list_size": {
        "desc": "Checks the size of a list",
        "usage": [
            "list_size = { name = X value >= Y }",
            "Where X is the name of the list",
            "Where Y is a script value"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "none",
        "supported_targets": null
    },
    "local_variable_list_size": {
        "desc": "Checks the size of a variable list",
        "usage": [
            "variable_list_size = { name = X target >= Y }",
            "Where X is the name of the variable",
            "Where Y is a script value or number"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "meets_legitimacy_expectation_of": {
        "desc": "Does the scoped character meet the legitimacy expectations of the target AI vassal",
        "usage": [
            "meets_legitimacy_expectation_of = scope:some_vassal"
        ],
        "traits": "character scope",
        "supported_scopes": "none",
        "supported_targets": "character"
    },
    "months_from_game_start": {
        "desc": "How many months it has been since the start of the game",
        "usage": [
            "months_from_game_start > 5"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "none",
        "supported_targets": null
    },
    "nand": {
        "desc": "a negated AND trigger",
        "usage": [],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "nor": {
        "desc": "a negated OR trigger",
        "usage": [],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "not": {
        "desc": "negates content of trigger",
        "usage": [],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "or": {
        "desc": "at least one entry inside trigger must be true",
        "usage": [],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "perks_in_diplomacy_lifestyle": {
        "desc": "How many perks does this lifestyle have?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "none",
        "supported_targets": null
    },
    "perks_in_intrigue_lifestyle": {
        "desc": "How many perks does this lifestyle have?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "none",
        "supported_targets": null
    },
    "perks_in_learning_lifestyle": {
        "desc": "How many perks does this lifestyle have?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "none",
        "supported_targets": null
    },
    "perks_in_martial_lifestyle": {
        "desc": "How many perks does this lifestyle have?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "none",
        "supported_targets": null
    },
    "perks_in_stewardship_lifestyle": {
        "desc": "How many perks does this lifestyle have?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "none",
        "supported_targets": null
    },
    "perks_in_wanderer_lifestyle": {
        "desc": "How many perks does this lifestyle have?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "none",
        "supported_targets": null
    },
    "release_only": {
        "desc": "Checks if the game is in release mode or not.",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "none",
        "supported_targets": null
    },
    "save_temporary_opinion_value_as": {
        "desc": "Saves the scoped character's opinion of the target character as an arbitrarily-named target to be referenced later in the in the same trigger",
        "usage": [
            "save_temporary_opinion_value_as = { name = <string> target = x"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "save_temporary_scope_as": {
        "desc": "Saves a temporary target for use during the trigger execution",
        "usage": [],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "save_temporary_scope_value_as": {
        "desc": "Saves a numerical or bool value as an arbitrarily-named temporary target to be referenced later in the same effect",
        "usage": [
            "save_temporary_scope_value_as = { name = <string> value = x }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "scripted_tests": {
        "desc": "Checks if the game is currently running scripted tests.",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "none",
        "supported_targets": null
    },
    "should_show_disturbing_portrait_modifiers": {
        "desc": "can disturbing portrait modifiers be shown?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "none",
        "supported_targets": null
    },
    "should_show_nudity": {
        "desc": "can nudity be shown?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "none",
        "supported_targets": null
    },
    "switch": {
        "desc": "Switch on a trigger for the evaluation of another trigger with an optional fallback trigger.",
        "usage": [
            "switch = {",
            "trigger = simple_assign_trigger",
            "case_1 = { <triggers> }",
            "case_2 = { <triggers> }",
            "case_n = { <triggers> }",
            "fallback = { <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "time_of_year": {
        "desc": "Check if the current date is within the bounds",
        "usage": [
            "time_of_year = {",
            "min = 11.1 # default: beginning of year",
            "max = 2.29 # default: end of year",
            "}",
            "Dates are formatted as \"<month>.<day>\" or just \"<month>\".",
            "The check includes the min and max dates.",
            "min can be larger than max, in this case we wrap around to the next year (i.e., February is between October and March)."
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "trigger_else": {
        "desc": "Evaluates the triggers if the display_triggers of preceding 'trigger_if' or 'trigger_else_if' is not mettrigger_if = { limit = { <display_triggers> } <triggers> }",
        "usage": [
            "trigger_else = { <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "trigger_else_if": {
        "desc": "Evaluates the enclosed triggers if the display_triggers of the preceding `trigger_if` or `trigger_else_if` is not met and its own display_trigger of the limit is mettrigger_if = { limit = { <display_triggers> } <triggers> }",
        "usage": [
            "trigger_else_if = { limit = { <display_triggers> } <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "trigger_if": {
        "desc": "Evaluates the triggers if the display_triggers of the limit are met",
        "usage": [
            "trigger_if = { limit = { <display_triggers> } <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "variable_list_size": {
        "desc": "Checks the size of a variable list",
        "usage": [
            "variable_list_size = { name = X target >= Y }",
            "Where X is the name of the variable",
            "Where Y is a script value or number"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "was_preferred_heir": {
        "desc": "Was the target character the preferred heir of the scoped character",
        "usage": [
            "was_preferred_heir = scope:character"
        ],
        "traits": "character scope",
        "supported_scopes": "none",
        "supported_targets": "character"
    },
    "weighted_calc_true_if": {
        "desc": "Returns true if the sum of weights of fulfilled sub-triggers amount to the specified sum",
        "usage": [
            "weighted_calc_true_if = { amount = 10 5 = { <trigger> } 15 = { <trigger> } 7 = { <trigger> } }"
        ],
        "traits": null,
        "supported_scopes": "none",
        "supported_targets": null
    },
    "years_from_game_start": {
        "desc": "How many years it has been since the start of the game",
        "usage": [
            "years_from_game_start > 5"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "none",
        "supported_targets": null
    },
    "any_army_in_location": {
        "desc": "Iterate through all armies currently located in the scoped province",
        "usage": [
            "any_army_in_location = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "province",
        "supported_targets": "army"
    },
    "any_character_in_location": {
        "desc": "Iterate through all characters currently located in the scoped province",
        "usage": [
            "any_character_in_location = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "province",
        "supported_targets": "character"
    },
    "any_neighboring_province": {
        "desc": "Iterate through all neighboring provinces of a province",
        "usage": [
            "any_neighboring_province = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "province",
        "supported_targets": "province"
    },
    "any_province_domicile": {
        "desc": "Iterate through all domiciles of scoped province",
        "usage": [
            "any_province_domicile = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "province",
        "supported_targets": "domicile"
    },
    "any_province_epidemic": {
        "desc": "Gets epidemics affecting the scoped province",
        "usage": [
            "any_province_epidemic = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "province",
        "supported_targets": "epidemic"
    },
    "any_province_legend": {
        "desc": "Gets legends affecting the scoped province",
        "usage": [
            "any_province_legend = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "province",
        "supported_targets": "legend"
    },
    "available_loot": {
        "desc": "How much gold is available to loot for raiding armies?",
        "usage": [
            "available_loot >= 7"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "province",
        "supported_targets": null
    },
    "building_slots": {
        "desc": "How many building slots exist (including occupied ones)?",
        "usage": [
            "building_slots > 3"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "province",
        "supported_targets": null
    },
    "combined_building_level": {
        "desc": "How many levels of normal buildings are there? Duchy and such buildings do not count. Building under construction does not count. The capital building does count",
        "usage": [
            "combined_building_level > 10"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "province",
        "supported_targets": null
    },
    "days_since_province_infection": {
        "desc": "Number of days since the target epidemic infected the scoped province.",
        "usage": [
            "days_since_province_infection >= 20"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "province",
        "supported_targets": null
    },
    "epidemic_resistance": {
        "desc": "Get the epidemic resistance of the scoped province.",
        "usage": [
            "epidemic_resistance >= 20"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "province",
        "supported_targets": null
    },
    "fort_level": {
        "desc": "Compares the fort level of a province",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "province",
        "supported_targets": null
    },
    "free_building_slots": {
        "desc": "How many free building slots exist? A building in construction is considered to be taking a slot",
        "usage": [
            "free_building_slots > 3"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "province",
        "supported_targets": null
    },
    "geographical_region": {
        "desc": "Checks if a province is in a certain geographical region",
        "usage": [],
        "traits": "class CGeographicalRegionDatabase key",
        "supported_scopes": "province",
        "supported_targets": "geographical_region"
    },
    "has_building": {
        "desc": "does the scope province have a particular building?",
        "usage": [
            "has_building = temple_01"
        ],
        "traits": null,
        "supported_scopes": "province",
        "supported_targets": null
    },
    "has_building_or_higher": {
        "desc": "does the scope province have a particular building or its successor?",
        "usage": [
            "has_building_or_higher = temple_01"
        ],
        "traits": null,
        "supported_scopes": "province",
        "supported_targets": null
    },
    "has_building_with_flag": {
        "desc": "does the scope province have a building with a certain flag?",
        "usage": [
            "has_building_with_flag = { flag = temple count >= 2 }",
            "has_building_with_flag = temple # count >= 1"
        ],
        "traits": null,
        "supported_scopes": "province",
        "supported_targets": null
    },
    "has_construction_with_flag": {
        "desc": "does the scope province have a construction of a building with the specified flag?",
        "usage": [
            "has_construction_with_flag = temple"
        ],
        "traits": null,
        "supported_scopes": "province",
        "supported_targets": null
    },
    "has_free_building_slot": {
        "desc": "does the scope province have a free building slot? has_free_building_slot = yes",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "province",
        "supported_targets": null
    },
    "has_holding": {
        "desc": "does the scope province have holding?",
        "usage": [
            "has_holding = yes"
        ],
        "traits": "yes/no",
        "supported_scopes": "province",
        "supported_targets": null
    },
    "has_holding_type": {
        "desc": "does the scope province have a holding of particular type?",
        "usage": [
            "has_holding_type = castle_holding"
        ],
        "traits": null,
        "supported_scopes": "province",
        "supported_targets": null
    },
    "has_ongoing_construction": {
        "desc": "does the scope province have a construction ongoing?",
        "usage": [
            "has_ongoing_construction = yes"
        ],
        "traits": "yes/no",
        "supported_scopes": "province",
        "supported_targets": null
    },
    "has_province_modifier": {
        "desc": "Does the scoped province have a given modifier",
        "usage": [
            "has_province_modifier = name"
        ],
        "traits": null,
        "supported_scopes": "province",
        "supported_targets": null
    },
    "has_province_modifier_duration_remaining": {
        "desc": "Does the scoped province have the duration remaining on a given modifier",
        "usage": [
            "has_province_modifier_duration_remaining = name"
        ],
        "traits": null,
        "supported_scopes": "province",
        "supported_targets": null
    },
    "has_special_building": {
        "desc": "Does the province (holding) have a special building?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "province",
        "supported_targets": null
    },
    "has_special_building_slot": {
        "desc": "Does the province (holding) have a special building slot?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "province",
        "supported_targets": null
    },
    "has_stationed_regiment": {
        "desc": "Does this province have stationed regiments?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "province",
        "supported_targets": null
    },
    "has_stationed_regiment_of_base_type": {
        "desc": "Does the province have stationed regiment of base type?",
        "usage": [],
        "traits": null,
        "supported_scopes": "province",
        "supported_targets": null
    },
    "has_travel_point_of_interest": {
        "desc": "Checks if there is a travel point of interest of type X in the province.",
        "usage": [
            "has_travel_point_of_interest = point_of_interest_type"
        ],
        "traits": "class CTravelPointOfInterestTypeDatabase key",
        "supported_scopes": "province",
        "supported_targets": null
    },
    "is_coastal": {
        "desc": "Is the province a coastal province (next to sea, not including lakes)?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "province",
        "supported_targets": null
    },
    "is_county_capital": {
        "desc": "Is the province the county capital?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "province",
        "supported_targets": null
    },
    "is_lake_province": {
        "desc": "Is this a lake province?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "province",
        "supported_targets": null
    },
    "is_lakeside_province": {
        "desc": "Is the province next to a lake?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "province",
        "supported_targets": null
    },
    "is_occupied": {
        "desc": "Is this province currently being occupied?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "province",
        "supported_targets": null
    },
    "is_raided": {
        "desc": "Is this province currently being raided?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "province",
        "supported_targets": null
    },
    "is_river_province": {
        "desc": "Is the province a river?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "province",
        "supported_targets": null
    },
    "is_riverside_province": {
        "desc": "Is the province riverside?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "province",
        "supported_targets": null
    },
    "is_sea_province": {
        "desc": "Is this a sea province?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "province",
        "supported_targets": null
    },
    "monthly_income": {
        "desc": "Check the income of the scoped province",
        "usage": [
            "monthly_income > 10"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "province",
        "supported_targets": null
    },
    "num_buildings": {
        "desc": "How many normal buildings are there? Duchy and such buildings do not count. Building under construction does count",
        "usage": [
            "num_buildings > 3"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "province",
        "supported_targets": null
    },
    "number_of_characters_in_pool": {
        "desc": "Check the number of characters in the pool the scoped province is a part of",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "province",
        "supported_targets": null
    },
    "province_infection_date": {
        "desc": "Date when the target epidemic infected the scoped province.",
        "usage": [],
        "traits": "<, <=, =, >, >= valid date",
        "supported_scopes": "province",
        "supported_targets": null
    },
    "province_infection_rate": {
        "desc": "Infection rate of target epidemic in the scoped province.",
        "usage": [
            "province_infection_rate >= 20"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "province",
        "supported_targets": null
    },
    "terrain": {
        "desc": "Checks if a province is of a specific terrain type",
        "usage": [],
        "traits": null,
        "supported_scopes": "province",
        "supported_targets": null
    },
    "travel_danger_type": {
        "desc": "Checks if a province's danger type is of a specific type for a specific travel plan",
        "usage": [
            "travel_danger_type = { travel_plan = scope:some_travel_plan type = name_of_danger_type }",
            "travel_danger_type = { travel_plan = scope:some_travel_plan terrain = terrain type }"
        ],
        "traits": null,
        "supported_scopes": "province",
        "supported_targets": null
    },
    "travel_danger_value": {
        "desc": "What is the province's danger value for a specific travel plan? travel_danger_value = { target = scope:some_travel_plan value > 1 }",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "province",
        "supported_targets": null
    },
    "any_war_attacker": {
        "desc": "Iterate through all attackers in the war",
        "usage": [
            "any_war_attacker = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "war",
        "supported_targets": "character"
    },
    "any_war_defender": {
        "desc": "Iterate through all defenders in the war",
        "usage": [
            "any_war_defender = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "war",
        "supported_targets": "character"
    },
    "any_war_participant": {
        "desc": "Iterate through all participants in the war",
        "usage": [
            "any_war_participant = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "war",
        "supported_targets": "character"
    },
    "attacker_war_score": {
        "desc": "compares the attacker war score",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "war",
        "supported_targets": null
    },
    "days_since_max_war_score": {
        "desc": "Number of days since the war score has been at max (+100 or -100). Returns -1 if the war score is not +100 or -100",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "war",
        "supported_targets": null
    },
    "defender_war_score": {
        "desc": "compares the defender war score",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "war",
        "supported_targets": null
    },
    "has_valid_casus_belli": {
        "desc": "does the war interaction still have a valid casus belli (those should be automatically removed on daily tick, but can exist for a tick)",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "war",
        "supported_targets": null
    },
    "is_attacker": {
        "desc": "is the target character in the scope war as an attacker?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "war",
        "supported_targets": null
    },
    "is_civil_war": {
        "desc": "Check if the scope war is a civil war or not",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "war",
        "supported_targets": null
    },
    "is_defender": {
        "desc": "is the target character in the scope war as a defender?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "war",
        "supported_targets": null
    },
    "is_participant": {
        "desc": "is the target character participating in the scope war as an attacker or defender?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "war",
        "supported_targets": null
    },
    "is_war_leader": {
        "desc": "is the target character leading one of the sides in the scope war?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "war",
        "supported_targets": null
    },
    "is_white_peace_possible": {
        "desc": "Check if the scoped war's CB has is_white_peace_possible = yes",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "war",
        "supported_targets": null
    },
    "using_cb": {
        "desc": "is the scope war using the specified CB? using_cb = religious_war",
        "usage": [],
        "traits": null,
        "supported_scopes": "war",
        "supported_targets": null
    },
    "war_contribution": {
        "desc": "Checks how much a character has contributed to the scoped war",
        "usage": [
            "war_contribution = {",
            "target = some character",
            "value > 5",
            "}"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "war",
        "supported_targets": null
    },
    "war_days": {
        "desc": "compares the number of days the war is going on for",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "war",
        "supported_targets": null
    },
    "was_called": {
        "desc": "has the target character been called to the scope war already?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "war",
        "supported_targets": null
    },
    "any_leased_title": {
        "desc": "Iterate through all titles leased to a holy order",
        "usage": [
            "any_leased_title = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "holy_order",
        "supported_targets": "landed_title"
    },
    "num_leased_titles": {
        "desc": "How many holdings the holy order has under lease",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "holy_order",
        "supported_targets": null
    },
    "accolade_rank": {
        "desc": "How many ranks does this Accolade have unlocked?",
        "usage": [
            "accolade_rank > 2"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "accolade",
        "supported_targets": null
    },
    "has_accolade_category": {
        "desc": "Does any of the Accolades types have the given category flag?",
        "usage": [
            "has_accolade_category = flag"
        ],
        "traits": null,
        "supported_scopes": "accolade",
        "supported_targets": null
    },
    "has_accolade_parameter": {
        "desc": "Does any of the Accolades unlocked ranks have the given parameter flag?",
        "usage": [
            "has_accolade_parameter = flag"
        ],
        "traits": null,
        "supported_scopes": "accolade",
        "supported_targets": null
    },
    "has_accolade_type": {
        "desc": "Does the Accolade have the given type?",
        "usage": [
            "has_accolade_type = key"
        ],
        "traits": null,
        "supported_scopes": "accolade",
        "supported_targets": null
    },
    "has_potential_accolade_successors": {
        "desc": "Does the given Accolade's Owner have any character in their court ( including guests ) that could act as Successor of this Accolade if made into a Knight?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "accolade",
        "supported_targets": null
    },
    "is_accolade_active": {
        "desc": "Is the scoped Accolade active, i.e. assinged by their Liege?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "accolade",
        "supported_targets": null
    },
    "primary_tier": {
        "desc": "Is the scoped Accolade's primary type tier equal to?",
        "usage": [],
        "traits": null,
        "supported_scopes": "accolade",
        "supported_targets": null
    },
    "secondary_tier": {
        "desc": "Is the scoped Accolade's secondary type tier equal to?",
        "usage": [],
        "traits": null,
        "supported_scopes": "accolade",
        "supported_targets": null
    },
    "any_required_heir_government_type": {
        "desc": "Iterate through all defined required government types for a holding type",
        "usage": [
            "any_required_heir_government_type = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "holding_type",
        "supported_targets": "government_type"
    },
    "has_holding_parameter": {
        "desc": "Does the scoped holding type have the given parameter?",
        "usage": [
            "has_holding_parameter = parameter"
        ],
        "traits": null,
        "supported_scopes": "holding_type",
        "supported_targets": null
    },
    "has_required_heir_governments": {
        "desc": "Does the scoped holding type have required heir government types defined?",
        "usage": [
            "has_required_heir_governments = yes/no"
        ],
        "traits": "yes/no",
        "supported_scopes": "holding_type",
        "supported_targets": null
    },
    "any_legend_promoter": {
        "desc": "Gets all promoters of the scoped legend",
        "usage": [
            "any_legend_promoter = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "legend",
        "supported_targets": "character"
    },
    "any_spread_province": {
        "desc": "Gets all provinces the scoped legend has spread into",
        "usage": [
            "any_spread_province = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "legend",
        "supported_targets": "province"
    },
    "days_since_legend_completion": {
        "desc": "Days since when the legend was completed.",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "legend",
        "supported_targets": null
    },
    "days_since_legend_start_date": {
        "desc": "Days since when the legend was created.",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "legend",
        "supported_targets": null
    },
    "has_legend_chapter": {
        "desc": "Does the legend have the given localization key set for the named chapter.",
        "usage": [
            "has_legend_chapter = { name = opening localization_key = default_legend_opening }",
            "has_legend_chapter = opening"
        ],
        "traits": null,
        "supported_scopes": "legend",
        "supported_targets": null
    },
    "has_legend_chronicle": {
        "desc": "Does the scoped legend have the specified legend chronicle.",
        "usage": [
            "has_legend_chronicle = beast_slayer"
        ],
        "traits": null,
        "supported_scopes": "legend",
        "supported_targets": null
    },
    "has_legend_county_modifier": {
        "desc": "Does the scoped legend have a given modifier affecting the counties",
        "usage": [
            "has_legend_county_modifier = name"
        ],
        "traits": null,
        "supported_scopes": "legend",
        "supported_targets": null
    },
    "has_legend_county_modifier_duration_remaining": {
        "desc": "Does the scoped legend have the duration remaining on a given modifier affecting the counties",
        "usage": [
            "has_legend_county_modifier_duration_remaining = name"
        ],
        "traits": null,
        "supported_scopes": "legend",
        "supported_targets": null
    },
    "has_legend_owner_modifier": {
        "desc": "Does the scoped legend have a given modifier affecting the owner",
        "usage": [
            "has_legend_owner_modifier = name"
        ],
        "traits": null,
        "supported_scopes": "legend",
        "supported_targets": null
    },
    "has_legend_owner_modifier_duration_remaining": {
        "desc": "Does the scoped legend have the duration remaining on a given modifier affecting the owner",
        "usage": [
            "has_legend_owner_modifier_duration_remaining = name"
        ],
        "traits": null,
        "supported_scopes": "legend",
        "supported_targets": null
    },
    "has_legend_province_modifier": {
        "desc": "Does the scoped legend have a given modifier affecting the provinces",
        "usage": [
            "has_legend_province_modifier = name"
        ],
        "traits": null,
        "supported_scopes": "legend",
        "supported_targets": null
    },
    "has_legend_province_modifier_duration_remaining": {
        "desc": "Does the scoped legend have the duration remaining on a given modifier affecting the provinces",
        "usage": [
            "has_legend_province_modifier_duration_remaining = name"
        ],
        "traits": null,
        "supported_scopes": "legend",
        "supported_targets": null
    },
    "is_legend_completed": {
        "desc": "Is the scoped legend completed?.",
        "usage": [
            "scope:legend = {",
            "is_legend_completed = yes",
            "}"
        ],
        "traits": "yes/no",
        "supported_scopes": "legend",
        "supported_targets": null
    },
    "legend_completion_date": {
        "desc": "Date when the legend was completed.",
        "usage": [],
        "traits": "<, <=, =, >, >= valid date",
        "supported_scopes": "legend",
        "supported_targets": null
    },
    "legend_quality": {
        "desc": "Get the quality of this legend.",
        "usage": [
            "legend_quality = famed"
        ],
        "traits": "famed, illustrious, mythical",
        "supported_scopes": "legend",
        "supported_targets": null
    },
    "legend_start_date": {
        "desc": "Date when the legend was created.",
        "usage": [],
        "traits": "<, <=, =, >, >= valid date",
        "supported_scopes": "legend",
        "supported_targets": null
    },
    "any_participant_group": {
        "desc": "Iterate through all participant groups of the situation (in all sub-regions)",
        "usage": [
            "any_participant_group = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "situation",
        "supported_targets": "situation_participant_group"
    },
    "any_situation_county": {
        "desc": "Iterate through all counties that are involved in a situation",
        "usage": [
            "any_situation_county = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "situation",
        "supported_targets": "landed_title"
    },
    "any_situation_participant": {
        "desc": "Iterate through all characters that are participating in a situation.",
        "usage": [
            "any_situation_participant = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "situation",
        "supported_targets": "character"
    },
    "any_situation_sub_region": {
        "desc": "Iterate through all sub-regions of a situation",
        "usage": [
            "any_situation_sub_region = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "situation",
        "supported_targets": "situation_sub_region"
    },
    "has_situation_top_phase_parameter": {
        "desc": "Checks if top sub-region has phase parameter or not",
        "usage": [
            "has_situation_top_phase_parameter = parameter_key"
        ],
        "traits": null,
        "supported_scopes": "situation",
        "supported_targets": null
    },
    "is_manual_participant": {
        "desc": "Is this character considered a manual participant candidate in this situation?",
        "usage": [
            "is_manual_participant = yes/no"
        ],
        "traits": "character scope",
        "supported_scopes": "situation",
        "supported_targets": "character"
    },
    "is_situation_unique": {
        "desc": "Is the type of scoped situation unique.",
        "usage": [
            "is_situation_unique = yes/no"
        ],
        "traits": "yes/no",
        "supported_scopes": "situation",
        "supported_targets": null
    },
    "situation_current_phase": {
        "desc": "Checks if situation current phase equals phase_type_key (will take first sub-region)",
        "usage": [
            "situation_current_phase = phase_type_key"
        ],
        "traits": null,
        "supported_scopes": "situation",
        "supported_targets": null
    },
    "situation_days_since_end_date": {
        "desc": "Days since when the situation was completed.",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "situation",
        "supported_targets": null
    },
    "situation_days_since_start_date": {
        "desc": "Days since the situation started.",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "situation",
        "supported_targets": null
    },
    "situation_end_date": {
        "desc": "Date when the situation was completed.",
        "usage": [],
        "traits": "<, <=, =, >, >= valid date",
        "supported_scopes": "situation",
        "supported_targets": null
    },
    "situation_has_catalyst": {
        "desc": "Checks if any sub-region of the situation has any of their future phases affected by the given catalyst.",
        "usage": [
            "has_situation_top_catalyst = situation_catalyst_key"
        ],
        "traits": null,
        "supported_scopes": "situation",
        "supported_targets": null
    },
    "situation_start_date": {
        "desc": "Date when the situation started.",
        "usage": [],
        "traits": "<, <=, =, >, >= valid date",
        "supported_scopes": "situation",
        "supported_targets": null
    },
    "situation_top_has_catalyst": {
        "desc": "Checks if top sub-region of situation has any of the future phases affected by the given catalyst",
        "usage": [
            "has_situation_top_catalyst = situation_catalyst_key"
        ],
        "traits": null,
        "supported_scopes": "situation",
        "supported_targets": null
    },
    "situation_top_has_county": {
        "desc": "Checks if top sub-region of situation contains county",
        "usage": [
            "situation_top_has_county = scope:county"
        ],
        "traits": "province target province scope",
        "supported_scopes": "situation",
        "supported_targets": "province"
    },
    "situation_top_has_province": {
        "desc": "Checks if top sub-region of situation contains province",
        "usage": [
            "situation_top_has_province = scope:province"
        ],
        "traits": "province target province scope",
        "supported_scopes": "situation",
        "supported_targets": "province"
    },
    "situation_type": {
        "desc": "Is the scoped situation of a specific situation type?",
        "usage": [
            "situation_type = situation_key"
        ],
        "traits": null,
        "supported_scopes": "situation",
        "supported_targets": null
    },
    "any_scheme_agent_character": {
        "desc": "Iterate through all characters in agent slots in the scheme",
        "usage": [
            "any_scheme_agent_character = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "scheme",
        "supported_targets": "character"
    },
    "any_scheme_agent_slot": {
        "desc": "Iterate through all agent slots in the scheme",
        "usage": [
            "any_scheme_agent_slot = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "scheme",
        "supported_targets": "agent_slot"
    },
    "has_scheme_modifier": {
        "desc": "Is the scheme currently affected by the specified modifier? has_scheme_modifier = X",
        "usage": [],
        "traits": null,
        "supported_scopes": "scheme",
        "supported_targets": null
    },
    "is_hostile": {
        "desc": "Is the scoped scheme a hostile scheme?",
        "usage": [
            "is_hostile = bool"
        ],
        "traits": "yes/no",
        "supported_scopes": "scheme",
        "supported_targets": null
    },
    "is_scheme_agent_exposed": {
        "desc": "Is the target character an exposed agent in the scope scheme?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "scheme",
        "supported_targets": null
    },
    "is_scheme_category": {
        "desc": "Does the scheme have the given category?",
        "usage": [
            "is_scheme_category = <category>"
        ],
        "traits": null,
        "supported_scopes": "scheme",
        "supported_targets": null
    },
    "is_scheme_exposed": {
        "desc": "Is the scheme exposed?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "scheme",
        "supported_targets": null
    },
    "is_scheme_target_type": {
        "desc": "Does the scheme have a target of the given type?",
        "usage": [
            "is_scheme_target_type = <type>"
        ],
        "traits": null,
        "supported_scopes": "scheme",
        "supported_targets": null
    },
    "is_type_basic": {
        "desc": "Is the scoped scheme's type a basic type?",
        "usage": [
            "is_type_basic = bool"
        ],
        "traits": "yes/no",
        "supported_scopes": "scheme",
        "supported_targets": null
    },
    "is_type_secret": {
        "desc": "Is the scoped scheme's type a secret type?",
        "usage": [
            "is_type_secret = bool"
        ],
        "traits": "yes/no",
        "supported_scopes": "scheme",
        "supported_targets": null
    },
    "max_scheme_success_chance": {
        "desc": "Max Scheme Success Chance",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "scheme",
        "supported_targets": null
    },
    "maximum_scheme_breaches": {
        "desc": "The maximum number of breaches the scheme can have",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "scheme",
        "supported_targets": null
    },
    "scheme_agent_charges": {
        "desc": "The number of the scheme's currently available agent charges",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "scheme",
        "supported_targets": null
    },
    "scheme_breaches": {
        "desc": "The number of breaches the scheme currently has",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "scheme",
        "supported_targets": null
    },
    "scheme_duration_days": {
        "desc": "The number of days since scheme was started",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "scheme",
        "supported_targets": null
    },
    "scheme_is_character_agent": {
        "desc": "Is the target character part of this scheme?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "scheme",
        "supported_targets": null
    },
    "scheme_number_of_exposed_agents": {
        "desc": "The number of exposed agents in a scheme",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "scheme",
        "supported_targets": null
    },
    "scheme_number_of_filled_agent_slots": {
        "desc": "The number of agents in a scheme",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "scheme",
        "supported_targets": null
    },
    "scheme_phase_duration": {
        "desc": "Scheme phase duration",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "scheme",
        "supported_targets": null
    },
    "scheme_progress": {
        "desc": "Scheme progress (0 - 10 (defined))",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "scheme",
        "supported_targets": null
    },
    "scheme_secrecy": {
        "desc": "Scheme secrecy",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "scheme",
        "supported_targets": null
    },
    "scheme_skill": {
        "desc": "Is the scheme currently affected by the specified modifier? has_scheme_modifier = X",
        "usage": [],
        "traits": null,
        "supported_scopes": "scheme",
        "supported_targets": null
    },
    "scheme_success_chance": {
        "desc": "Scheme success chance",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "scheme",
        "supported_targets": null
    },
    "scheme_type": {
        "desc": "Is the scheme of the specified type? scheme_type = X",
        "usage": [],
        "traits": null,
        "supported_scopes": "scheme",
        "supported_targets": null
    },
    "story_type": {
        "desc": "Is the story in scope of this type?",
        "usage": [],
        "traits": null,
        "supported_scopes": "story",
        "supported_targets": null
    },
    "age": {
        "desc": "Get character age: scope:character = { age > 16 }",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "ai_boldness": {
        "desc": "AI boldness",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "ai_compassion": {
        "desc": "AI compassion",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "ai_diplomacy_stance": {
        "desc": "The AI's diplomatic view of the target character",
        "usage": [
            "ai_diplomacy_stance = {",
            "target = target_character",
            "stance = neutral/threat/enemy/friend",
            "}"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "ai_energy": {
        "desc": "AI energy",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "ai_greed": {
        "desc": "AI greed",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "ai_honor": {
        "desc": "AI honor",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "ai_rationality": {
        "desc": "AI rationality",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "ai_sociability": {
        "desc": "AI sociability",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "ai_values_divergence": {
        "desc": "target = other character value >/</= sum of differences in ai values",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "ai_vengefulness": {
        "desc": "AI vengefulness",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "ai_zeal": {
        "desc": "AI zeal",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "all_court_artifact_slots": {
        "desc": "check if all the scoped characters court artifact slots are empty or full",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "all_inventory_artifact_slots": {
        "desc": "check if all the scoped characters inventory artifact slots are empty or full",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "allowed_concubines": {
        "desc": "Can the scope owner have concubines?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "allowed_more_concubines": {
        "desc": "Can the scope owner have more concubines?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "allowed_more_spouses": {
        "desc": "Can the scope owner have more spouses?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "amenity_level": {
        "desc": "amenity_level = { type = food value >= 5 }",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "any_acclaimed_knight": {
        "desc": "Iterate through all acclaimed knights employed by a given character",
        "usage": [
            "any_acclaimed_knight = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_accolade": {
        "desc": "Iterate through all ( active and inactive ) Accolades of a given liege character's Acclaimed Knights",
        "usage": [
            "any_accolade = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "accolade"
    },
    "any_active_accolade": {
        "desc": "Iterate through all active Accolades of a given liege character's Acclaimed Knights",
        "usage": [
            "any_active_accolade = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "accolade"
    },
    "any_alert_creatable_title": {
        "desc": "Iterate through all titles that can be created by the character. (only for alerts)",
        "usage": [
            "any_alert_creatable_title = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "landed_title"
    },
    "any_alert_usurpable_title": {
        "desc": "Iterate through all titles that can be usurped by the character. (only for alerts)",
        "usage": [
            "any_alert_usurpable_title = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "landed_title"
    },
    "any_ally": {
        "desc": "Iterate through all allies",
        "usage": [
            "any_ally = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_ancestor": {
        "desc": "Iterate through all the ancestors of the scope character up to 5 generations",
        "usage": [
            "any_ancestor = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_army": {
        "desc": "Iterate through all armies",
        "usage": [
            "any_army = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "army"
    },
    "any_available_task_contract": {
        "desc": "Iterate through all task contracts of location of root province",
        "usage": [
            "any_available_task_contract = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "task_contract"
    },
    "any_character_active_contract": {
        "desc": "Gets all accepted task contracts of the root character",
        "usage": [
            "any_character_active_contract = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "task_contract"
    },
    "any_character_artifact": {
        "desc": "Iterate through all artifacts in a given characters inventory",
        "usage": [
            "any_character_artifact = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "artifact"
    },
    "any_character_epidemic": {
        "desc": "Gets epidemics affecting the scoped character",
        "usage": [
            "any_character_epidemic = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "epidemic"
    },
    "any_character_situation": {
        "desc": "Iterate through all situations that a character is participating in",
        "usage": [
            "any_character_situation = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "situation"
    },
    "any_character_struggle": {
        "desc": "Iterate through all struggles that character is involved in. Optional: Narrow down the involvement status *_chracter_struggle = { involvement = involved | interloper }",
        "usage": [
            "any_character_struggle = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "struggle"
    },
    "any_character_task_contract": {
        "desc": "Gets all task contracts of the scoped character",
        "usage": [
            "any_character_task_contract = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "task_contract"
    },
    "any_character_to_title_neighboring_and_across_water_county": {
        "desc": "Scopes from a character to a neighboring county (incl. across water, looking trough the de Jure lieges)",
        "usage": [
            "any_character_to_title_neighboring_and_across_water_county = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "landed_title"
    },
    "any_character_to_title_neighboring_and_across_water_duchy": {
        "desc": "Scopes from a character to a neighboring duchy (incl. across water, looking trough the de Jure lieges)",
        "usage": [
            "any_character_to_title_neighboring_and_across_water_duchy = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "landed_title"
    },
    "any_character_to_title_neighboring_and_across_water_empire": {
        "desc": "Scopes from a character to a neighboring empire (incl. across water, looking trough the de Jure lieges)",
        "usage": [
            "any_character_to_title_neighboring_and_across_water_empire = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "landed_title"
    },
    "any_character_to_title_neighboring_and_across_water_kingdom": {
        "desc": "Scopes from a character to a neighboring kingdom (incl. across water, looking trough the de Jure lieges)",
        "usage": [
            "any_character_to_title_neighboring_and_across_water_kingdom = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "landed_title"
    },
    "any_character_to_title_neighboring_county": {
        "desc": "Scopes from a character to a neighboring county (looking trough the de Jure lieges)",
        "usage": [
            "any_character_to_title_neighboring_county = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "landed_title"
    },
    "any_character_to_title_neighboring_duchy": {
        "desc": "Scopes from a character to a neighboring duchy (looking trough the de Jure lieges)",
        "usage": [
            "any_character_to_title_neighboring_duchy = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "landed_title"
    },
    "any_character_to_title_neighboring_empire": {
        "desc": "Scopes from a character to a neighboring empire (looking trough the de Jure lieges)",
        "usage": [
            "any_character_to_title_neighboring_empire = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "landed_title"
    },
    "any_character_to_title_neighboring_kingdom": {
        "desc": "Scopes from a character to a neighboring kingdom (looking trough the de Jure lieges)",
        "usage": [
            "any_character_to_title_neighboring_kingdom = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "landed_title"
    },
    "any_character_trait": {
        "desc": "Iterate through all traits a character has",
        "usage": [
            "any_character_trait = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "trait"
    },
    "any_character_war": {
        "desc": "Wars of the scoped character",
        "usage": [
            "any_character_war = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "war"
    },
    "any_child": {
        "desc": "Iterate through all children",
        "usage": [
            "any_child = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_claim": {
        "desc": "Iterate through the titles of all claims held by a character; parameters: explicit = yes/no/all pressed = yes/no/all",
        "usage": [
            "any_claim = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "landed_title"
    },
    "any_claimed_artifact": {
        "desc": "Iterate through all claimed artifacts of the scoped character",
        "usage": [
            "any_claimed_artifact = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "artifact"
    },
    "any_close_family_member": {
        "desc": "Iterate through all the close family [father, mother, siblings, children, grandparents]",
        "usage": [
            "any_close_family_member = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_close_or_extended_family_member": {
        "desc": "Iterate through all the close and extended relatives [father, mother, siblings, children, grandparents, uncles/aunts, nephew/niece, cousins]",
        "usage": [
            "any_close_or_extended_family_member = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_concubine": {
        "desc": "Iterate through all concubines",
        "usage": [
            "any_concubine = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_consort": {
        "desc": "Iterate through all consorts (concubines and spouses)",
        "usage": [
            "any_consort = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_contact": {
        "desc": "Iterate through all contact characters of the root character",
        "usage": [
            "any_contact = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_councillor": {
        "desc": "Iterate through all councillors",
        "usage": [
            "any_councillor = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_court_position_candidate": {
        "desc": "Iterate through all valid candidates for a court position type.",
        "usage": [
            "*_court_position_candidate = {",
            "court_position = bodyguard_court_position",
            "OR",
            "court_position = scope:my_scoped_court_position_type",
            "...",
            "}",
            "any_court_position_candidate = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_court_position_employer": {
        "desc": "Iterates through all characters that employ the scoped character in any court position.",
        "usage": [
            "any_court_position_employer = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_court_position_holder": {
        "desc": "Iterates through all characters employed by the scoped character in the target court position.",
        "usage": [
            "any_court_position_holder = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_courtier": {
        "desc": "Iterate through all courtiers",
        "usage": [
            "any_courtier = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_courtier_away": {
        "desc": "Iterate through all courtiers that are away",
        "usage": [
            "any_courtier_away = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_courtier_or_guest": {
        "desc": "Iterate through all courtiers and guests (pool and foreign court guests)",
        "usage": [
            "any_courtier_or_guest = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_de_jure_claim": {
        "desc": "Iterate through all de jure claims for a character",
        "usage": [
            "any_de_jure_claim = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "landed_title"
    },
    "any_diarchy_succession_character": {
        "desc": "Iterate through all character in the diarchy line of succession.If there's no active diarchy or active one doesn't have succession,it iterates over regency candidates",
        "usage": [
            "any_diarchy_succession_character = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_diplomacy_councillor": {
        "desc": "Iterate through all diplomacy-based councillors",
        "usage": [
            "any_diplomacy_councillor = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_directly_owned_province": {
        "desc": "Iterate through all directly owned provinces",
        "usage": [
            "any_directly_owned_province = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "province"
    },
    "any_election_title": {
        "desc": "Iterate through all titles the scoped character can vote on",
        "usage": [
            "any_election_title = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "landed_title"
    },
    "any_equipped_character_artifact": {
        "desc": "Iterate through all equipped artifacts in a given characters inventory",
        "usage": [
            "any_equipped_character_artifact = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "artifact"
    },
    "any_extended_family_member": {
        "desc": "Iterate through all the extended family [uncles/aunts, nephew/niece, cousins]",
        "usage": [
            "any_extended_family_member = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_foreign_court_guest": {
        "desc": "Iterate through all guests visiting from another court (in contrast to pool_guest they have a liege)",
        "usage": [
            "any_foreign_court_guest = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_former_concubine": {
        "desc": "Iterate through all former concubines. Not persisted past death",
        "usage": [
            "any_former_concubine = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_former_concubinist": {
        "desc": "Iterate through all former concubinists. Not persisted past death",
        "usage": [
            "any_former_concubinist = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_former_spouse": {
        "desc": "Iterate through all former spouses",
        "usage": [
            "any_former_spouse = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_general_councillor": {
        "desc": "Iterate through all councillors that are not related to a skill",
        "usage": [
            "any_general_councillor = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_heir": {
        "desc": "Heirs of the scoped character",
        "usage": [
            "any_heir = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_heir_title": {
        "desc": "Iterate through all titles the scoped character is heir to",
        "usage": [
            "any_heir_title = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "landed_title"
    },
    "any_held_title": {
        "desc": "Iterate through all held landed titles",
        "usage": [
            "any_held_title = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "landed_title"
    },
    "any_hired_mercenary": {
        "desc": "Iterate through all hired mercenary companies",
        "usage": [
            "any_hired_mercenary = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "mercenary_company"
    },
    "any_home_court_hostage": {
        "desc": "Iterate through all hostages currently abroad",
        "usage": [
            "any_home_court_hostage = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_hooked_character": {
        "desc": "Iterate through all characters this character has a hook on",
        "usage": [
            "any_hooked_character = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_hostile_raider": {
        "desc": "Iterate through anyone the character is hostile to due to their top-liege's realm having been raided",
        "usage": [
            "any_hostile_raider = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_intrigue_councillor": {
        "desc": "Iterate through all intrigue-based councillors",
        "usage": [
            "any_intrigue_councillor = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_invited_activity": {
        "desc": "Iterate through all activities a character has been invited to",
        "usage": [
            "any_invited_activity = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "activity"
    },
    "any_knight": {
        "desc": "Iterate through all knights",
        "usage": [
            "any_knight = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_known_secret": {
        "desc": "Iterate through all secrets known by the character",
        "usage": [
            "any_known_secret = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "secret"
    },
    "any_land_neighboring_realm_with_tributaries": {
        "desc": "A realm with a different top liege neighboring the realm of the scope character's top liege; switches to the realm's top title. Can be based on borders a day or two out of date. Includes land borders extended due to tributaries.",
        "usage": [
            "any_land_neighboring_realm_with_tributaries = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "landed_title"
    },
    "any_land_neighboring_realm_with_tributaries_owner": {
        "desc": "A realm with a different top liege neighboring the realm of the scope character's top liege; switches to the holder of the realm. Can be based on borders a day or two out of date. Includes land borders extended due to tributaries.",
        "usage": [
            "any_land_neighboring_realm_with_tributaries_owner = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_learning_councillor": {
        "desc": "Iterate through all learning-based councillors",
        "usage": [
            "any_learning_councillor = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_liege_or_above": {
        "desc": "Iterate through all lieges above a character (skipping the character themselves)",
        "usage": [
            "any_liege_or_above = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_maa_regiment": {
        "desc": "Iterate through all MaA regiments",
        "usage": [
            "any_maa_regiment = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "regiment"
    },
    "any_martial_councillor": {
        "desc": "Iterate through all martial-based councillors",
        "usage": [
            "any_martial_councillor = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_memory": {
        "desc": "Iterate through all memories of a character",
        "usage": [
            "any_memory = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character_memory"
    },
    "any_neighboring_and_across_water_realm_same_rank_owner": {
        "desc": "A sub-realm or realm bordering the scope character's realm (including across water) and has the same rank as the scope character (look for lieges of he owner of the land if necessary)",
        "usage": [
            "any_neighboring_and_across_water_realm_same_rank_owner = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_neighboring_and_across_water_top_liege_realm": {
        "desc": "A realm with a different top liege neighboring the realm of the scope character's top liege (including across water); switches to the realm's top title. Can be based on borders a day or two out of date",
        "usage": [
            "any_neighboring_and_across_water_top_liege_realm = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "landed_title"
    },
    "any_neighboring_and_across_water_top_liege_realm_owner": {
        "desc": "A realm with a different top liege neighboring the realm of the scope character's top liege (including across water); switches to the holder of the realm. Can be based on borders a day or two out of date",
        "usage": [
            "any_neighboring_and_across_water_top_liege_realm_owner = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_neighboring_and_across_water_top_suzerain_realm": {
        "desc": "A realm with a different top suzerain neighboring the realm of the scope character's top suzerain (including across water); switches to the realm's top title. Can be based on borders a day or two out of date",
        "usage": [
            "any_neighboring_and_across_water_top_suzerain_realm = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "landed_title"
    },
    "any_neighboring_and_across_water_top_suzerain_realm_owner": {
        "desc": "A realm with a different top suzerain neighboring the realm of the scope character's top suzerain (including across water); switches to the holder of the realm. Can be based on borders a day or two out of date",
        "usage": [
            "any_neighboring_and_across_water_top_suzerain_realm_owner = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_neighboring_realm_same_rank_owner": {
        "desc": "A sub-realm or realm bordering the scope character's realm and has the same rank as the scope character (look for lieges of he owner of the land if necessary)",
        "usage": [
            "any_neighboring_realm_same_rank_owner = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_neighboring_top_liege_realm": {
        "desc": "A realm with a different top liege neighboring the realm of the scope character's top liege; switches to the realm's top title. Can be based on borders a day or two out of date",
        "usage": [
            "any_neighboring_top_liege_realm = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "landed_title"
    },
    "any_neighboring_top_liege_realm_owner": {
        "desc": "A realm with a different top liege neighboring the realm of the scope character's top liege; switches to the holder of the realm. Can be based on borders a day or two out of date",
        "usage": [
            "any_neighboring_top_liege_realm_owner = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_neighboring_top_suzerain_realm": {
        "desc": "A realm with a different top suzerain neighboring the realm of the scope character's top suzerain; switches to the realm's top title. Can be based on borders a day or two out of date",
        "usage": [
            "any_neighboring_top_suzerain_realm = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "landed_title"
    },
    "any_neighboring_top_suzerain_realm_owner": {
        "desc": "A realm with a different top suzerain neighboring the realm of the scope character's top suzerain; switches to the holder of the realm. Can be based on borders a day or two out of date",
        "usage": [
            "any_neighboring_top_suzerain_realm_owner = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_noble_family": {
        "desc": "Iterate through all noble family titles in the realm of scoped character",
        "usage": [
            "any_noble_family = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "landed_title"
    },
    "any_opposite_sex_spouse_candidate": {
        "desc": "Iterate through all the spouse candidates of the opposite sex of a character.",
        "usage": [
            "any_opposite_sex_spouse_candidate = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_owned_story": {
        "desc": "Iterate through all owned stories for a character",
        "usage": [
            "any_owned_story = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "story"
    },
    "any_parent": {
        "desc": "Iterate through all (both) parents",
        "usage": [
            "any_parent = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_patroned_holy_order": {
        "desc": "Iterate through all holy orders that the scoped character is a patron of",
        "usage": [
            "any_patroned_holy_order = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "holy_order"
    },
    "any_personal_claimed_artifact": {
        "desc": "Iterate through all personally claimed artifacts of the scoped character",
        "usage": [
            "any_personal_claimed_artifact = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "artifact"
    },
    "any_pinned_character": {
        "desc": "Iterate through characters this player has pinned",
        "usage": [
            "any_pinned_character = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_pinning_character": {
        "desc": "Iterate through characters whose player has this character pinned",
        "usage": [
            "any_pinning_character = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_played_character": {
        "desc": "Iterate through all characters the player playing this character has played. Matches the game over legacy, except for excluding the currently played character",
        "usage": [
            "any_played_character = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_player_heir": {
        "desc": "Iterate through player heirs, capped at the first 10",
        "usage": [
            "any_player_heir = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_player_legend_library": {
        "desc": "Get all legends in a player character library.",
        "usage": [
            "any_player_legend_library = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "legend"
    },
    "any_pool_guest": {
        "desc": "Iterate through all guests visiting the court from the pool (in contrast to foreign_court_guest they don't have a liege)",
        "usage": [
            "any_pool_guest = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_potential_marriage_option": {
        "desc": "Iterate through all potential selectable marriage or betrohed options",
        "usage": [
            "any_potential_marriage_option = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_powerful_family": {
        "desc": "Iterate through all directly owned provinces",
        "usage": [
            "any_powerful_family = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "dynasty_house"
    },
    "any_powerful_vassal": {
        "desc": "Iterate through the all powerful vassals of a character",
        "usage": [
            "any_powerful_vassal = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_pretender_title": {
        "desc": "Iterate through all landed titles character is pretender to",
        "usage": [
            "any_pretender_title = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "landed_title"
    },
    "any_primary_war_enemy": {
        "desc": "Iterate through all primary war enemies",
        "usage": [
            "any_primary_war_enemy = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_prisoner": {
        "desc": "Iterate through all prisoners",
        "usage": [
            "any_prisoner = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_prowess_councillor": {
        "desc": "Iterate through all prowess-based councillors",
        "usage": [
            "any_prowess_councillor = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_raid_target": {
        "desc": "Iterate through anyone the character is hostile to due to having raided them. Only returns top lieges",
        "usage": [
            "any_raid_target = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_realm_border_county": {
        "desc": "Iterate through all counties that are on the edge of your realm bordering a different neighboring realm.",
        "usage": [
            "any_realm_border_county = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "landed_title"
    },
    "any_realm_county": {
        "desc": "Iterate through all counties in the realm. Based on top liege",
        "usage": [
            "any_realm_county = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "landed_title"
    },
    "any_realm_de_jure_duchy": {
        "desc": "Iterate through all de jure duchies that have at least one county in the realm. Based on top liege",
        "usage": [
            "any_realm_de_jure_duchy = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "landed_title"
    },
    "any_realm_de_jure_empire": {
        "desc": "Iterate through all de jure empire that have at least one county in the realm. Based on top liege",
        "usage": [
            "any_realm_de_jure_empire = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "landed_title"
    },
    "any_realm_de_jure_kingdom": {
        "desc": "Iterate through all de jure kingdom that have at least one county in the realm. Based on top liege",
        "usage": [
            "any_realm_de_jure_kingdom = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "landed_title"
    },
    "any_realm_province": {
        "desc": "Iterate through all realm provinces of a character",
        "usage": [
            "any_realm_province = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "province"
    },
    "any_relation": {
        "desc": "Iterate through scripted relations of a given type or multiple types, if someone is multiple relations they will only be in the list once",
        "usage": [
            "any_relation = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_same_sex_spouse_candidate": {
        "desc": "Iterate through all the spouse candidates of the same sex of a character.",
        "usage": [
            "any_same_sex_spouse_candidate = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_scheme": {
        "desc": "Iterate through all schemes owned by the character",
        "usage": [
            "any_scheme = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "scheme"
    },
    "any_secret": {
        "desc": "Iterate through all secrets of the character",
        "usage": [
            "any_secret = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "secret"
    },
    "any_sibling": {
        "desc": "Iterate through all siblings",
        "usage": [
            "any_sibling = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_sponsored_inspiration": {
        "desc": "Iterate through all sponsored inspirations",
        "usage": [
            "any_sponsored_inspiration = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "inspiration"
    },
    "any_spouse": {
        "desc": "Iterate through all spouses",
        "usage": [
            "any_spouse = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_spouse_candidate": {
        "desc": "Iterate through all the spouse candidates of a character.",
        "usage": [
            "any_spouse_candidate = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_stewardship_councillor": {
        "desc": "Iterate through all stewardship-based councillors",
        "usage": [
            "any_stewardship_councillor = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_sub_realm_barony": {
        "desc": "Iterate through all baronies in sub-realm",
        "usage": [
            "any_sub_realm_barony = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "landed_title"
    },
    "any_sub_realm_county": {
        "desc": "Iterate through all counties in sub-realm",
        "usage": [
            "any_sub_realm_county = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "landed_title"
    },
    "any_sub_realm_duchy": {
        "desc": "Iterate through all duchies in sub-realm",
        "usage": [
            "any_sub_realm_duchy = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "landed_title"
    },
    "any_sub_realm_empire": {
        "desc": "Iterate through all empires in sub-realm",
        "usage": [
            "any_sub_realm_empire = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "landed_title"
    },
    "any_sub_realm_kingdom": {
        "desc": "Iterate through all kingdoms in sub-realm",
        "usage": [
            "any_sub_realm_kingdom = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "landed_title"
    },
    "any_sub_realm_title": {
        "desc": "Iterate through all titles in sub-realm",
        "usage": [
            "any_sub_realm_title = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "landed_title"
    },
    "any_succession_appointment_invested_candidate": {
        "desc": "Iterate through all candidates supported by the scoped investor character for any title",
        "usage": [
            "any_succession_appointment_invested_candidate = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_succession_appointment_invested_title": {
        "desc": "Iterate through all titles that has candidates supported by the scoped investor",
        "usage": [
            "any_succession_appointment_invested_title = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "landed_title"
    },
    "any_targeting_faction": {
        "desc": "Iterate through all factions targeting the scope character",
        "usage": [
            "any_targeting_faction = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "faction"
    },
    "any_targeting_scheme": {
        "desc": "Iterate through all schemes targeting the character",
        "usage": [
            "any_targeting_scheme = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "scheme"
    },
    "any_targeting_secret": {
        "desc": "Iterate through all secrets that target the specified scope",
        "usage": [
            "any_targeting_secret = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "secret"
    },
    "any_tax_collector": {
        "desc": "Iterates through all Tax Collectors employed by the scoped character",
        "usage": [
            "any_tax_collector = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_tax_collector_vassal": {
        "desc": "Iterates through all Vassals the scoped Character is the Tax Collector for",
        "usage": [
            "any_tax_collector_vassal = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_tax_slot": {
        "desc": "Iterates through all Tax Slots the scoped character has",
        "usage": [
            "any_tax_slot = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "tax_slot"
    },
    "any_top_realm_border_county": {
        "desc": "Iterate through all counties that are on the edge of your realm bordering a different neighboring top realm.",
        "usage": [
            "any_top_realm_border_county = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "landed_title"
    },
    "any_traveling_family_member": {
        "desc": "Iterate though all characters that should travel with the scoped one (when moving between courts for instance); includes the scoped character",
        "usage": [
            "any_traveling_family_member = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_tributary": {
        "desc": "Iterate through all tributaries",
        "usage": [
            "any_tributary = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_truce_holder": {
        "desc": "Iterate through all characters that have a truce on this character",
        "usage": [
            "any_truce_holder = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_truce_target": {
        "desc": "Iterate through all characters this character has a truce on",
        "usage": [
            "any_truce_target = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_unassigned_taxpayers": {
        "desc": "Iterates through all unassigned taxpayers for scoped Character",
        "usage": [
            "any_unassigned_taxpayers = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_unspent_known_secret": {
        "desc": "Iterate through all unspent secrets known by the character",
        "usage": [
            "any_unspent_known_secret = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "secret"
    },
    "any_vassal": {
        "desc": "Iterate through all DIRECT vassals",
        "usage": [
            "any_vassal = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_vassal_or_below": {
        "desc": "Iterate through ALL vassals, not just direct vassals",
        "usage": [
            "any_vassal_or_below = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_war_ally": {
        "desc": "Iterate through all direct war allies",
        "usage": [
            "any_war_ally = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_war_enemy": {
        "desc": "Iterate through all direct war enemies",
        "usage": [
            "any_war_enemy = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "any_warden_hostage": {
        "desc": "Iterate through all hostages having this warden",
        "usage": [
            "any_warden_hostage = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "appointment_candidate_accumulated_score": {
        "desc": "Charater's accumulated score for appointment for the target title.",
        "usage": [
            "appointment_candidate_accumulated_score = {",
            "title = scope:title",
            "value >= scope:fixed_point",
            "}",
            "\"appointment_candidate_accumulated_score(scope:title)\" >= value"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "appointment_candidate_score": {
        "desc": "Charater's total score for appointment for the target title",
        "usage": [
            "appointment_candidate_score = {",
            "title = scope:title",
            "value >= scope:fixed_point",
            "}",
            "\"appointment_candidate_score(scope:title)\" >= value"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "aptitude": {
        "desc": "What is the scoped character's aptitude in the target court position type? aptitude = { court_position = court_position_type value >= 1 }",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "attraction": {
        "desc": "Attraction value for the scoped character",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "average_amenity_level": {
        "desc": "average_amenity_level >= 3",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "base_weight": {
        "desc": "Base weight of the scoped character",
        "usage": [
            "base_weight > 10"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "can_accept_task_contract": {
        "desc": "Check character against task contract requirement triggers?",
        "usage": [
            "scope:actor = { can_accept_task_contract = SCOPE_TASK_CONTRACT }"
        ],
        "traits": "task_contract scope",
        "supported_scopes": "character",
        "supported_targets": "task_contract"
    },
    "can_add_hook": {
        "desc": "will trying to hook the target character override the current hook? (if no current hook, always returns true)",
        "usage": [
            "can_add_hook = {",
            "target = <character>",
            "type = <hook type>",
            "days/months/year = whatever (optional; will use the duration from the type if not provided)",
            "}"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "can_appoint_for_title": {
        "desc": "Can character be appointed for the target title.",
        "usage": [],
        "traits": "landed_title scope",
        "supported_scopes": "character",
        "supported_targets": "landed_title"
    },
    "can_arrive_in_time_to_activity_minimum": {
        "desc": "can_arrive_in_time_to_activity_minimum = target_activity",
        "usage": [],
        "traits": "activity scope",
        "supported_scopes": "character",
        "supported_targets": "activity"
    },
    "can_assign_to_tax_slot": {
        "desc": "Is this scoped character valid to assign to target tax slot",
        "usage": [
            "scope:character = { can_assign_to_tax_slot = scope:tax_slot }"
        ],
        "traits": "tax_slot scope",
        "supported_scopes": "character",
        "supported_targets": "tax_slot"
    },
    "can_attack_in_hierarchy": {
        "desc": "can the scope target be attacking the defender based on their liege-vassal relations?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "can_be_acclaimed": {
        "desc": "Can the given character potentially be the Acclaimed Knight of an Accolade?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "can_be_child_of": {
        "desc": "Would the target character have been able to have children at the time of the scoped character's birth? Only age is taken into account",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "can_be_employed_as": {
        "desc": "can the scoped character be employed as target court position type?",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "can_be_parent_of": {
        "desc": "Would the scoped character have been able to have children at the time of the target character's birth? Only age is taken into account",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "can_be_tributary_of": {
        "desc": "Can the scoped character be tributary of target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "can_become_owner_of_legend": {
        "desc": "Can the scoped character become owner of the provided legend?",
        "usage": [
            "scope:character = {",
            "can_become_owner_of_legend = <legend>",
            "}"
        ],
        "traits": "legend scope",
        "supported_scopes": "character",
        "supported_targets": "legend"
    },
    "can_benefit_from_artifact": {
        "desc": "Can the scoped character benefit from the main bonuses of this artifact?",
        "usage": [],
        "traits": "artifact scope",
        "supported_scopes": "character",
        "supported_targets": "artifact"
    },
    "can_create_faction": {
        "desc": "can the character create the faction of the specified type against the specified character?",
        "usage": [
            "can_create_faction = { type = X target = Y }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "can_create_maa": {
        "desc": "Can target character create MaA of specified type",
        "usage": [],
        "traits": "class CMenAtArmsTypeDatabase key",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "can_create_task_contract": {
        "desc": "scope:owner = { can_create_task_contact = { type_name = <key> employer = <character> }",
        "usage": [
            "can_create_task_contact = <key>",
            "Can create task contract with <key> type and employer(optional)"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "can_declare_war": {
        "desc": "Can the scoped character declare war on the defender with the specified casus bellis on the defender character for the target titles with an optional claimant. can_declare_war = { defender = X casus_belli = Y target_titles = { Z } claimant = A }",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "can_diverge": {
        "desc": "Can this ruler diverge their culture? Includes checking the cost",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "can_diverge_excluding_cost": {
        "desc": "Can this ruler diverge their culture? Does not check the cost",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "can_embrace_tradition": {
        "desc": "Can scoped charater embrace new culture tradition?",
        "usage": [
            "scope:character = { can_embrace_tradition = scope:new_tradition }",
            "scope:character = {",
            "can_embrace_tradition = {",
            "tradition = scope:new_tradition",
            "replace = my_old_tradition",
            "}",
            "}"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "can_employ_court_position_type": {
        "desc": "Can the scoped character employ the target court position type and is the position vacant?",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "can_equip_artifact": {
        "desc": "Can the scoped character equip given artifact?",
        "usage": [],
        "traits": "artifact scope",
        "supported_scopes": "character",
        "supported_targets": "artifact"
    },
    "can_execute_decision": {
        "desc": "Is the scoped character able to execute the asigned decision?",
        "usage": [],
        "traits": "class CDecisionTypeDatabase key",
        "supported_scopes": "character",
        "supported_targets": "decision"
    },
    "can_have_children": {
        "desc": "can the character have children? Only checks hard blocks from traits, not fertility",
        "usage": [
            "can_have_children = yes/no"
        ],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "can_host_activity": {
        "desc": "can_host_activity = target_activity",
        "usage": [],
        "traits": "class CActivityTypeDatabase key",
        "supported_scopes": "character",
        "supported_targets": "activity_type"
    },
    "can_hybridize": {
        "desc": "Can this ruler hybridize with the target culture? Includes checking the cost",
        "usage": [],
        "traits": "culture scope",
        "supported_scopes": "character",
        "supported_targets": "culture"
    },
    "can_hybridize_excluding_cost": {
        "desc": "Can this ruler hybridize with the target culture? Does not check the cost",
        "usage": [],
        "traits": "culture scope",
        "supported_scopes": "character",
        "supported_targets": "culture"
    },
    "can_join_activity": {
        "desc": "can_join_activity = target_activity",
        "usage": [],
        "traits": "activity scope",
        "supported_scopes": "character",
        "supported_targets": "activity"
    },
    "can_join_faction": {
        "desc": "Can the scope character join the faction? can_join_faction = faction",
        "usage": [],
        "traits": "faction scope",
        "supported_scopes": "character",
        "supported_targets": "faction"
    },
    "can_join_or_create_faction_against": {
        "desc": "Can the scope character create if join a faction against the target?",
        "usage": [
            "can_join_or_create_faction_against = scope:faction_target",
            "can_join_or_create_faction_against = {",
            "who = scope:faction_target",
            "faction = faction_key # optional",
            "check_in_a_faction = no # default: yes",
            "}"
        ],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "can_sponsor_inspiration": {
        "desc": "can_sponsor_inspiration = inspiration",
        "usage": [],
        "traits": "inspiration scope",
        "supported_scopes": "character",
        "supported_targets": "inspiration"
    },
    "can_start_scheme": {
        "desc": "can the character start the scheme?",
        "usage": [
            "can_start_scheme = { type = X target = Y }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "cease_tribute_payments_ai_chance": {
        "desc": "cease_tribute_payments_ai_chance > 10",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "character_has_commander_trait_scope_does_not": {
        "desc": "Does the character have a commander trait that the scope does not?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "character_is_land_realm_neighbor": {
        "desc": "Is the scoped character a realm neighbor of the target? Meaning they're independent or has the same liege, and border your realm.",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "character_is_realm_neighbor": {
        "desc": "Is the scoped character a realm neighbor of the target? Meaning they're independent or has the same liege, and border your realm. Including across two sea zones",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "character_men_at_arms_expense_gold_relative": {
        "desc": "What is the ratio of the scoped character's men-at-arms gold expenses, relative to their income?",
        "usage": [
            "Similar calc compared to `ai_men_at_arms_expense_gold_min` / `ai_men_at_arms_expense_gold_ideal`.",
            "(Relative value 0.0 - 1.0 - *, where 1.0 is all income, unraised maa costs)"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "character_men_at_arms_expense_prestige_relative": {
        "desc": "What is the ratio of the scoped character's men-at-arms prestige expenses, relative to their income?",
        "usage": [
            "Similar calc compared to `ai_men_at_arms_expense_prestige_min` / `ai_men_at_arms_expense_prestige_ideal`.",
            "(Relative value 0.0 - 1.0 - *, where 1.0 is all income, unraised maa costs)"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "completely_controls": {
        "desc": "does the character controls all counties and baronies inside de jure title (no hostile occupation either)?",
        "usage": [],
        "traits": "landed_title scope",
        "supported_scopes": "character",
        "supported_targets": "landed_title"
    },
    "completely_controls_region": {
        "desc": "does the character controls all counties and baronies inside the specified region (no hostile occupation either)?",
        "usage": [],
        "traits": "class CGeographicalRegionDatabase key",
        "supported_scopes": "character",
        "supported_targets": "geographical_region"
    },
    "council_task_monthly_progress": {
        "desc": "Is the scoped character's monthly progress on their assigned council task this big?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "court_grandeur_base": {
        "desc": "Gets the base court grandeur value for a character, always NRoyalCourt::COURT_GRANDEUR_MIN for those without one",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "court_grandeur_current": {
        "desc": "Gets the current court grandeur value for a character, always NRoyalCourt::COURT_GRANDEUR_MIN for those without one",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "court_grandeur_current_level": {
        "desc": "Gets the current court grandeur level for a character, always 0 for those without one",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "court_grandeur_minimum_expected": {
        "desc": "Gets the minimum expected court grandeur value for a character, always NRoyalCourt::COURT_GRANDEUR_MIN for those without one",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "court_grandeur_minimum_expected_level": {
        "desc": "Gets the minimum expected court grandeur level for a character, always 0 for those without one",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "court_positions_currently_available": {
        "desc": "How many court positions the scoped character CAN currently employs",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "court_positions_currently_filled": {
        "desc": "How many court positions the scope character currently employs",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "create_faction_type_chance": {
        "desc": "Check if the chance to create a faction against a target of the scope character is is true against the scripted value",
        "usage": [
            "create_faction_type_chance = {",
            "type = faction_type #An ongoing faction",
            "target = target_character",
            "value <|<=|>=|> 0",
            "}"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "current_domain_fertility": {
        "desc": "Get the current domain fertility of the scoped character",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "current_military_strength": {
        "desc": "Is the scoped character's current military strength this big?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "current_raised_military_strength": {
        "desc": "Is the scoped character's current raised military strength this big?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "current_weight": {
        "desc": "Current weight of the scoped character",
        "usage": [
            "current_weight > 10"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "current_weight_for_portrait": {
        "desc": "Current weight of the scoped character as a value for portraits scaled between 0.0 and 1.0",
        "usage": [
            "current_weight_for_portrait > 0.1"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "days_as_ruler": {
        "desc": "Number of days this character has been a ruler, returns -1 if character isn't a ruler",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "days_in_prison": {
        "desc": "number of days the character has been imprisoned for (0 if not imprisoned)",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "days_of_continuous_peace": {
        "desc": "Number of days the character has been in peace (0 if in war). Raids count as 'not peace'",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "days_of_continuous_war": {
        "desc": "Number of days the character has been in peace (0 if in peace)",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "days_since_death": {
        "desc": "number of days since the character has died.",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "days_since_joined_court": {
        "desc": "days_since_joined_court > 5",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "days_since_vassal_contract_liege_dynasty_reign_start": {
        "desc": "Days since this vassal's liege's dynasty started ruling over this vassal",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "death_reason": {
        "desc": "Does the scoped character have the given death reason?",
        "usage": [
            "death_reason = death_natural_causes"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "debt_level": {
        "desc": "Is the scoped character's debt level this value? -1 if not meeting any debt level threshold.",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "diarch_aptitude": {
        "desc": "Diarch aptitude score for the scoped (potential) diarch",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "diarch_loyalty": {
        "desc": "Diarch loyalty score for the scoped (potential) diarch",
        "usage": [
            "scope:diarch = { diarch_loyalty >= 50 }"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "diarchy_swing": {
        "desc": "Get diarchy scales of power swing",
        "usage": [
            "scope:liege = { diarchy_swing > 50 }"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "diplomacy": {
        "desc": "does the character have the required diplomacy skill level?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "diplomacy_diff": {
        "desc": "does the character have the required diplomacy skill level difference against target?",
        "usage": [
            "diplomacy = { target = character value <= script_value abs = yes/no(optional, default no) }"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "diplomacy_for_portrait": {
        "desc": "Diplomacy skill scaled between 0.0 and 1.0 for portraits",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "diplomacy_lifestyle_perk_points": {
        "desc": "How many perk points available does the character have?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "diplomacy_lifestyle_perks": {
        "desc": "How many perks from this lifestyle does the character have?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "diplomacy_lifestyle_unlockable_perks": {
        "desc": "How many perks from this lifestyle can the character currently unlock? This checks that they have the parent perks, and that the can_be_picked is met. It doesn't check perk points",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "diplomacy_lifestyle_xp": {
        "desc": "How many perk points available does the character have?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "does_ai_liege_in_vassal_contract_desire_obligation_change": {
        "desc": "Does the AI liege in a vassal contract desire changing an obligation level",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "does_ai_vassal_in_vassal_contract_desire_obligation_change": {
        "desc": "Does the AI vassal in a vassal contract desire changing an obligation level",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "domain_limit": {
        "desc": "Is the scoped character's domain limit this big?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "domain_limit_available": {
        "desc": "Is there this much space left in the character's domain limit? Negative values also work for checking characters that are above their limit",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "domain_limit_percentage": {
        "desc": "Is the scoped character's domain this big in comparison to their limit?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "domain_size": {
        "desc": "Is the scoped character's domain this big?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "domain_size_excluding_grace_period": {
        "desc": "Is the scoped character's domain this big? Does not count titles currently in the grace period",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "dread": {
        "desc": "does the character have the required dread?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "dread_modified_ai_boldness": {
        "desc": "AI boldness modified by the dread of the specified character",
        "usage": [
            "dread_modified_ai_boldness = {",
            "character = root\t# the character whose dread is affecting the target character",
            "value >= 5",
            "}"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "effective_age": {
        "desc": "is the character old/young enough? If immortal, this uses the age they became immortal at",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "employs_court_position": {
        "desc": "is the scoped character employing a target court position type?",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "employs_tax_collector": {
        "desc": "employs_tax_collector = yes",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "fertility": {
        "desc": "does the character have the required fertility?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "focus_progress": {
        "desc": "Does the character have this much focus progress",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "gold": {
        "desc": "does the character have the required gold?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "government_allows": {
        "desc": "checks if the government of the character allows something",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "government_disallows": {
        "desc": "checks if the government of the character disallows something",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "government_has_flag": {
        "desc": "checks if the government of the character has a specific flag",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_access_to_maa": {
        "desc": "Does the target character have access to MaA of specified type (excluding through tributaries)",
        "usage": [],
        "traits": "class CMenAtArmsTypeDatabase key",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_active_diarchy": {
        "desc": "Does the scoped character has an active diarchy",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_active_mandate": {
        "desc": "Does the diarch have this mandate active?",
        "usage": [
            "scope:diarch = { has_active_mandate = live_long_and_prosper }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_activity_intent": {
        "desc": "has_activity_intent = key",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_activity_state": {
        "desc": "has_activity_state > travel/passive/active",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_any_artifact": {
        "desc": "does the scoped character have any artifacts?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_any_artifact_claim": {
        "desc": "does the scoped character have any artifact claims at all? ( CHEAP )",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_any_cb_on": {
        "desc": "does the scope character have any casus bellis on the taget character?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_any_court_position": {
        "desc": "does the scoped character have any court positions?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_any_display_cb_on": {
        "desc": "does the scope character have any casus bellis on the taget character that should be displayed? (Allowed to fail valid_to_start_display_regardless)",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_any_focus": {
        "desc": "Does the character have any focus set?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_any_nickname": {
        "desc": "Has the scope character any nickname?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_any_opinion_with_reason": {
        "desc": "Does the scoped character have an opinion toward anyone with the target reason?",
        "usage": [
            "has_any_opinion_with_reason = imprisonment_reason"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_any_scripted_relation": {
        "desc": "does the scope character have any scripted relation with the taget character?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_any_secret_relation": {
        "desc": "does the scope character have any secret relation with the taget character?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_any_secrets": {
        "desc": "Does the character have any secrets?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_any_unequipped_artifact": {
        "desc": "does the scoped character have any unequipped artifacts?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_appointment_invested_character": {
        "desc": "Has scoped investor supported appointment of target character in the same realm.",
        "usage": [
            "scope:investor = {",
            "has_appointment_investment_in_character = scope:candidate",
            "}"
        ],
        "traits": "character scope",
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "has_appointment_invested_title": {
        "desc": "Has scoped investor supported appointment for target title in the same realm.",
        "usage": [
            "scope:investor = {",
            "has_appointment_investment_in_title = scope:title",
            "}"
        ],
        "traits": "landed_title scope",
        "supported_scopes": "character",
        "supported_targets": "landed_title"
    },
    "has_artifact_claim": {
        "desc": "Does the scoped character have a personal or house claim on the target artifact",
        "usage": [],
        "traits": "artifact scope",
        "supported_scopes": "character",
        "supported_targets": "artifact"
    },
    "has_away_hostages": {
        "desc": "Does the scoped character have Hostages abroad?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_bad_nickname": {
        "desc": "Has the scope character a bad nickname?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_banish_reason": {
        "desc": "Does the character have the banish reason towards the target?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_cb_on": {
        "desc": "does the scope character have the specified casus bellis on the taget character? Invalid target returns false automatically. has_cb_on = { target = X casus_belli/cb = Y }",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_character_flag": {
        "desc": "Does the character have this flag?",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_character_modifier": {
        "desc": "Does the scoped character have a given modifier",
        "usage": [
            "has_character_modifier = name"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_character_modifier_duration_remaining": {
        "desc": "Does the scoped character have the duration remaining on a given modifier",
        "usage": [
            "has_character_modifier_duration_remaining = name"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_claim_on": {
        "desc": "does the character have an explicit claim on the target title?",
        "usage": [],
        "traits": "landed_title scope",
        "supported_scopes": "character",
        "supported_targets": "landed_title"
    },
    "has_completed_activity_intent": {
        "desc": "has_completed_activity_intent = { type = <key> target = <character> }",
        "usage": [
            "has_completed_activity_intent = <key>",
            "Has the scoped character completed an intent of the given type in their involved activity, optionally against a specific target."
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_completed_inspiration": {
        "desc": "has_completed_inspiration = bool",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_contact": {
        "desc": "Check if laamp has character as employer?",
        "usage": [
            "scope:actor = { has_contact = SCOPE_CHARACTER }"
        ],
        "traits": "character scope",
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "has_council": {
        "desc": "Does character have a council?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_council_position": {
        "desc": "Does the scoped character have the given position?",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_councillor_for_skill": {
        "desc": "does the scope character have a councillor for the specified skill?",
        "usage": [
            "has_councillor_for_skill = X, where X is a skill name or 'general'"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_court_language": {
        "desc": "Is the character's court language the given language?",
        "usage": [
            "has_court_language = language_norwegian"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_court_language_of_culture": {
        "desc": "Is the character's court language the language of the target culture?",
        "usage": [
            "has_court_language_of_culture = scope:target_culture"
        ],
        "traits": "culture scope",
        "supported_scopes": "character",
        "supported_targets": "culture"
    },
    "has_court_position": {
        "desc": "is the scoped character holding the target court position type?",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_court_type": {
        "desc": "has_court_type = court_diplomatic",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_culture": {
        "desc": "Does the character have this culture?",
        "usage": [],
        "traits": "culture scope",
        "supported_scopes": "character",
        "supported_targets": "culture"
    },
    "has_de_jure_claim_on": {
        "desc": "does the scope character have a dejure claim against the target?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_dead_character_flag": {
        "desc": "Does the dead character have this flag?",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_dead_character_variable": {
        "desc": "Does the dead character have this variable?",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_diarchy_active_parameter": {
        "desc": "Does active diarchy have this parameter active for current power level?",
        "usage": [
            "scope:liege = { has_diarchy_active_parameter = parameter_name }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_diarchy_parameter": {
        "desc": "Can active diarchy have this parameter at some power level?",
        "usage": [
            "scope:liege = { has_diarchy_parameter = parameter_name }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_diarchy_type": {
        "desc": "Is scope character in a diarchy of a specific type?",
        "usage": [
            "Trigger works even when there's no active diarchyscope:liege = { has_diarchy_type = regency }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_divorce_reason": {
        "desc": "Does the character have the divorce reason towards the target?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_domicile": {
        "desc": "Does scoped character have a domicile?",
        "usage": [
            "scope:character = { has_domicile = yes }"
        ],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_domicile_temperament_high": {
        "desc": "Does scoped character have domicile temperament high?",
        "usage": [
            "scope:character = { has_temperament_high = yes }"
        ],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_domicile_temperament_low": {
        "desc": "Does scoped character have domicile temperament low?",
        "usage": [
            "scope:character = { has_temperament_low = yes }"
        ],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_domicile_temperament_neutral": {
        "desc": "Does scoped character have domicile temperament neutral?",
        "usage": [
            "scope:character = { has_temperament_neutral = yes }"
        ],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_dread_level_towards": {
        "desc": "How much is scared the scope character agains the target. 0 = not intimidated, 1 = intimidated, 2 = cowed.",
        "usage": [
            "has_dread_level_towards = {",
            "target = X",
            "level >/</>=/<=/= Y",
            "}"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_dynasty": {
        "desc": "does the character have a valid dynasty?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_election_vote_of": {
        "desc": "Is the target character voting for the scoped character in the election of the target title",
        "usage": [
            "has_election_vote_of = { who = scope:actor title = primary_title }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_employed_any_court_position": {
        "desc": "does the scoped character have any employed court positions?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_execute_reason": {
        "desc": "Does the character have the execute reason towards the target?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_faith": {
        "desc": "Does the character have this faith?",
        "usage": [
            "has_faith = faith:baltic_pagan"
        ],
        "traits": "faith scope",
        "supported_scopes": "character",
        "supported_targets": "faith"
    },
    "has_father": {
        "desc": "does the character have a valid living father?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_focus": {
        "desc": "Does the character have this focus?",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_free_council_slot": {
        "desc": "Does the scope character have a council position to fill? (ignoring automatically filled positions)",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_gene": {
        "desc": "Does the character have the specified gene template? Only works for morph genes. An interface trigger. has_gene = { category = X template = Y }",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_government": {
        "desc": "checks if the character has a specific government type",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_had_focus_for_days": {
        "desc": "Does the character had a focus for that time?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_hook": {
        "desc": "does the character have a hook on the target, has_hook = <character>",
        "usage": [],
        "traits": "character scope",
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "has_hook_from_secret": {
        "desc": "does the character have a hook based on the target secret? example use: has_hook_from_secret = scope:saved_secret",
        "usage": [],
        "traits": "secret scope",
        "supported_scopes": "character",
        "supported_targets": "secret"
    },
    "has_hook_of_type": {
        "desc": "does the character have a hook on the target of the given type?, has_hook_of_type = { target = X type = Y }",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_imprisonment_reason": {
        "desc": "Does the character have the imprisonment reason towards the target?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_inactive_trait": {
        "desc": "Does the character have this trait or a trait of this trait group amongst their inactive traits?",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_legitimacy": {
        "desc": "Does the scoped character uses legitimacy",
        "usage": [
            "has_legitimacy = yes"
        ],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_legitimacy_flag": {
        "desc": "Does the scoped character's current legitimacy level have the given flag",
        "usage": [
            "has_legitimacy_flag = cool_folk"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_lifestyle": {
        "desc": "Does the character have this lifestyle?",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_mother": {
        "desc": "does the character have a valid living mother?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_nickname": {
        "desc": "Does the character have this nickname?",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_obedience_reason": {
        "desc": "Does the character have the obedience reason towards the target?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_opinion_modifier": {
        "desc": "does the character have the specified opinion modifier on the target? (optional *value <|<=|=|>=|> X* or *value = { MIN MAX }* inclusive)",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_opposite_relation": {
        "desc": "Does the scope character have an opposite relationship of the relation value with the target character? target = , relation =",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_outstanding_artifact_claims": {
        "desc": "does the scoped character have any artifact claims that can be pressed? ( EXPENSIVE )",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_owned_scheme": {
        "desc": "Does this character own a scheme?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_pending_court_events": {
        "desc": "has_pending_court_events = bool",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_pending_interaction_of_type": {
        "desc": "Does the character have a pending interaction of the type? Only works if the scope is player-controlled.",
        "usage": [
            "Example: has_pending_interaction = interaction_key"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_perk": {
        "desc": "Does the character have this perk?",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_personal_artifact_claim": {
        "desc": "Does the scoped character have a personal claim on the target artifact",
        "usage": [],
        "traits": "artifact scope",
        "supported_scopes": "character",
        "supported_targets": "artifact"
    },
    "has_personal_legend_seed": {
        "desc": "Does the scoped character have a legend seed of the specified legend type?.",
        "usage": [
            "scope:character = {",
            "has_personal_legend_seed = heroic",
            "}"
        ],
        "traits": "class CLegendTypeDatabase key",
        "supported_scopes": "character",
        "supported_targets": "legend_type"
    },
    "has_player_court_position_automation_assign_best": {
        "desc": "Is the scoped character a player that has automated the target court position to auto-assign the best candidate?",
        "usage": [],
        "traits": "class CCourtPositionTypesDatabase key",
        "supported_scopes": "character",
        "supported_targets": "court_position_type"
    },
    "has_player_court_position_automation_assign_best_or_event": {
        "desc": "Is the scoped character a player that has automated the target court position to auto-assign the best candidate (or else show an event)?",
        "usage": [],
        "traits": "class CCourtPositionTypesDatabase key",
        "supported_scopes": "character",
        "supported_targets": "court_position_type"
    },
    "has_player_court_position_automation_event": {
        "desc": "Is the scoped character a player that has automated the target court position to show events?",
        "usage": [],
        "traits": "class CCourtPositionTypesDatabase key",
        "supported_scopes": "character",
        "supported_targets": "court_position_type"
    },
    "has_player_court_position_automation_none": {
        "desc": "Is the scoped character a player that has NOT automated the target court position?",
        "usage": [],
        "traits": "class CCourtPositionTypesDatabase key",
        "supported_scopes": "character",
        "supported_targets": "court_position_type"
    },
    "has_potential_acclaimed_knights": {
        "desc": "Does the given character have any potential knights that could be appointed as Acclaimed Knights?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_primary_title": {
        "desc": "does the character has specific title as his primary title",
        "usage": [],
        "traits": "landed_title scope",
        "supported_scopes": "character",
        "supported_targets": "landed_title"
    },
    "has_prisoners": {
        "desc": "Does the character have prisoners?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_raid_immunity_against": {
        "desc": "Is the scoped character's (top-liege) realm immune to raiding by the target due to having defeated their raid army?",
        "usage": [
            "has_raid_immunity_against = scope:character"
        ],
        "traits": "character scope",
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "has_raised_armies": {
        "desc": "does the character have raised or gathering armies?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_realm_law": {
        "desc": "Does the scoped character have the given realm law?",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_realm_law_flag": {
        "desc": "Does the scoped character have a law with the given flag?",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_relation_activity_recurrer": {
        "desc": "Checks for a scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_relation_antiquarian": {
        "desc": "Checks for a scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_relation_best_friend": {
        "desc": "Checks for a scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_relation_blood_brother": {
        "desc": "Checks for a scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_relation_bully": {
        "desc": "Checks for a scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_relation_court_physician": {
        "desc": "Checks for a scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_relation_crush": {
        "desc": "Checks for a scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_relation_event_recurrer": {
        "desc": "Checks for a scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_relation_favorite_child": {
        "desc": "Checks for a scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_relation_flag": {
        "desc": "Does the scope character have a specific flag on a relation with the target character? target = , relation = , flag =",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_relation_friend": {
        "desc": "Checks for a scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_relation_grudge": {
        "desc": "Checks for a scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_relation_guardian": {
        "desc": "Checks for a scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_relation_intrigue_mentor": {
        "desc": "Checks for a scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_relation_intrigue_student": {
        "desc": "Checks for a scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_relation_lover": {
        "desc": "Checks for a scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_relation_mentor": {
        "desc": "Checks for a scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_relation_nemesis": {
        "desc": "Checks for a scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_relation_nursed_child": {
        "desc": "Checks for a scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_relation_oaf": {
        "desc": "Checks for a scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_relation_old_flame": {
        "desc": "Checks for a scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_relation_potential_friend": {
        "desc": "Checks for a scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_relation_potential_hook": {
        "desc": "Checks for a scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_relation_potential_lover": {
        "desc": "Checks for a scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_relation_potential_rival": {
        "desc": "Checks for a scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_relation_rival": {
        "desc": "Checks for a scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_relation_soldier_friend": {
        "desc": "Checks for a scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_relation_soulmate": {
        "desc": "Checks for a scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_relation_student": {
        "desc": "Checks for a scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_relation_to": {
        "desc": "does the character have a relation to the target? Matches the logic of the data system function HasRelationTo, has_relation_to = <character>",
        "usage": [],
        "traits": "character scope",
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "has_relation_victim": {
        "desc": "Checks for a scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_relation_ward": {
        "desc": "Checks for a scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_relation_wedding_bad_fertility": {
        "desc": "Checks for a scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_relation_wedding_good_fertility": {
        "desc": "Checks for a scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_relation_wedding_very_bad_fertility": {
        "desc": "Checks for a scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_relation_wedding_very_good_fertility": {
        "desc": "Checks for a scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_relation_wet_nurse": {
        "desc": "Checks for a scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_religion": {
        "desc": "Does the character have this religion?",
        "usage": [
            "has_religion = religion:buddhism_religion"
        ],
        "traits": "religion scope",
        "supported_scopes": "character",
        "supported_targets": "religion"
    },
    "has_revoke_title_reason": {
        "desc": "Does the character have the revoke title reason towards the target?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_royal_court": {
        "desc": "has_royal_court = bool",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_same_court_language": {
        "desc": "Is the character's court language the same language as the target character's?",
        "usage": [
            "has_same_court_language = scope:target_character"
        ],
        "traits": "character scope",
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "has_same_court_type_as": {
        "desc": "has_same_court_type_as = character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_same_culture_as": {
        "desc": "Does the character have the same culture as the target?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_same_focus_as": {
        "desc": "Does the character have the same focus as the other?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_same_government": {
        "desc": "checks if the character has the same government type as another character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_same_sinful_trait": {
        "desc": "do the two characters share a trait that is considered sinful by both of their respective faiths?",
        "usage": [
            "scope:character_1 = { has_same_sinful_trait = scope:character_2 }"
        ],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_same_virtue_trait": {
        "desc": "do the two characters share a trait that is considered virtuous by both of their respective faiths?",
        "usage": [
            "scope:character_1 = { has_same_virtue_trait = scope:character_2 }"
        ],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_scheme_countermeasure_parameter": {
        "desc": "Does the given ruler, or the liege of the given courtier, have a countermeasure with the given parameter?",
        "usage": [
            "has_scheme_countermeasure_parameter = parameter_key"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_secret_relation_activity_recurrer": {
        "desc": "Checks for a secret scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_secret_relation_antiquarian": {
        "desc": "Checks for a secret scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_secret_relation_best_friend": {
        "desc": "Checks for a secret scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_secret_relation_blood_brother": {
        "desc": "Checks for a secret scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_secret_relation_bully": {
        "desc": "Checks for a secret scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_secret_relation_court_physician": {
        "desc": "Checks for a secret scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_secret_relation_crush": {
        "desc": "Checks for a secret scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_secret_relation_event_recurrer": {
        "desc": "Checks for a secret scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_secret_relation_favorite_child": {
        "desc": "Checks for a secret scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_secret_relation_friend": {
        "desc": "Checks for a secret scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_secret_relation_grudge": {
        "desc": "Checks for a secret scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_secret_relation_guardian": {
        "desc": "Checks for a secret scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_secret_relation_intrigue_mentor": {
        "desc": "Checks for a secret scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_secret_relation_intrigue_student": {
        "desc": "Checks for a secret scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_secret_relation_lover": {
        "desc": "Checks for a secret scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_secret_relation_mentor": {
        "desc": "Checks for a secret scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_secret_relation_nemesis": {
        "desc": "Checks for a secret scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_secret_relation_nursed_child": {
        "desc": "Checks for a secret scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_secret_relation_oaf": {
        "desc": "Checks for a secret scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_secret_relation_old_flame": {
        "desc": "Checks for a secret scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_secret_relation_potential_friend": {
        "desc": "Checks for a secret scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_secret_relation_potential_hook": {
        "desc": "Checks for a secret scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_secret_relation_potential_lover": {
        "desc": "Checks for a secret scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_secret_relation_potential_rival": {
        "desc": "Checks for a secret scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_secret_relation_rival": {
        "desc": "Checks for a secret scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_secret_relation_soldier_friend": {
        "desc": "Checks for a secret scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_secret_relation_soulmate": {
        "desc": "Checks for a secret scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_secret_relation_student": {
        "desc": "Checks for a secret scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_secret_relation_victim": {
        "desc": "Checks for a secret scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_secret_relation_ward": {
        "desc": "Checks for a secret scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_secret_relation_wedding_bad_fertility": {
        "desc": "Checks for a secret scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_secret_relation_wedding_good_fertility": {
        "desc": "Checks for a secret scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_secret_relation_wedding_very_bad_fertility": {
        "desc": "Checks for a secret scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_secret_relation_wedding_very_good_fertility": {
        "desc": "Checks for a secret scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_secret_relation_wet_nurse": {
        "desc": "Checks for a secret scripted relationship with a target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_selected_mandate": {
        "desc": "Was this mandate selected for the diarch?",
        "usage": [
            "Trigger works even when there's no active diarchyscope:diarch = { has_selected_mandate = live_long_and_prosper }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_sexuality": {
        "desc": "Does the character's sexuality match the scripted? (heterosexual, homosexual, bisexual, asexual, none). Characters that have yet to get a sexuality (children) have the none set.",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_spawned_court_events": {
        "desc": "has_spawned_court_events = bool",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_strong_claim_on": {
        "desc": "does the character have an explicit Pressed Claim on the target title?",
        "usage": [],
        "traits": "landed_title scope",
        "supported_scopes": "character",
        "supported_targets": "landed_title"
    },
    "has_strong_hook": {
        "desc": "does the character have a strong hook on the target, has_strong_hook = <character>",
        "usage": [],
        "traits": "character scope",
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "has_strong_implicit_claim_on": {
        "desc": "does the character have an implicit Pressed Claim on the target title",
        "usage": [],
        "traits": "landed_title scope",
        "supported_scopes": "character",
        "supported_targets": "landed_title"
    },
    "has_strong_usable_hook": {
        "desc": "does the character have a strong hook on the target that is not on cooldown, has_strong_usable_hook = <character>",
        "usage": [],
        "traits": "character scope",
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "has_subject_contract_group": {
        "desc": "Check if the character has a specific contract group",
        "usage": [
            "scope:actor = { has_contract_group = { contract_group = <key> } }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_succession_appointment_investors": {
        "desc": "Does the scope the scoped character have any investors for their appointment towards the target title?",
        "usage": [
            "scope:character = { has_succession_appointment_investors = scope:title }"
        ],
        "traits": "landed_title scope",
        "supported_scopes": "character",
        "supported_targets": "landed_title"
    },
    "has_targeting_faction": {
        "desc": "Has the scope character a faction targeting him/her?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_title": {
        "desc": "does the character hold the title?",
        "usage": [],
        "traits": "landed_title scope",
        "supported_scopes": "character",
        "supported_targets": "landed_title"
    },
    "has_trait": {
        "desc": "Does the character have this trait or a trait of this trait group?",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_trait_rank": {
        "desc": "Compare the trait rank of a character to a value or other character.",
        "usage": [
            "has_trait_rank = {",
            "trait = TRAIT_GROUP",
            "rank <=> number (can be script value) # need only one of rank or character",
            "character <=> character target # need only one of rank or character",
            "}",
            "Note that not having the trait and having rank 0 counts as the same thing. rank < X on its own will therefore always return true for a character that does not have the trait."
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_trait_with_flag": {
        "desc": "does the scope character have a trait with a certain flag?",
        "usage": [
            "has_trait_with_flag = can_not_marry"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_trait_xp": {
        "desc": "Checks if the scopd character has the given amount of XP in the trait level track. Track name is required if the trait has multiple tracks, otherwise should not be provided.",
        "usage": [
            "has_trait_xp = { trait = <trait_key> track = <track_key> value = <script_value> }"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_triggered_legend_seed": {
        "desc": "Does the scoped character qualify for the specified triggered legend seed?.",
        "usage": [
            "scope:character = {",
            "has_triggered_legend_seed = king_arthur",
            "}"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_truce": {
        "desc": "Does the scope character have a truce with the target character? Truces are one way, which means we ask if the scope character can't attack the target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "has_usable_hook": {
        "desc": "does the character have a hook on the target that isn't on cooldown, has_usable_hook = <character>",
        "usage": [],
        "traits": "character scope",
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "has_weak_claim_on": {
        "desc": "does the character have an explicit Unpressed Claim on the target title?",
        "usage": [],
        "traits": "landed_title scope",
        "supported_scopes": "character",
        "supported_targets": "landed_title"
    },
    "has_weak_hook": {
        "desc": "does the character have a weak hook on the target. A strong hook will *not* count, has_weak_hook = <character>",
        "usage": [],
        "traits": "character scope",
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "has_weak_implicit_claim_on": {
        "desc": "does the character have an implicit Unpressed Claim on the target title",
        "usage": [],
        "traits": "landed_title scope",
        "supported_scopes": "character",
        "supported_targets": "landed_title"
    },
    "health": {
        "desc": "does the character have the required health?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "highest_held_title_tier": {
        "desc": "what is the highest held landed title tier of the character?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "highest_skill": {
        "desc": "Is the skill the highest skill (excluding Prowess) of the character? True even when there are multiple skills with the same highest value.",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "highest_skill_including_prowess": {
        "desc": "Is the skill the highest skill (including Prowess) of the character? True even when there are multiple skills with the same highest value.",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "holds_landed_title": {
        "desc": "Is the scope character landed (holds a county or barony)?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "hostage_duration": {
        "desc": "For how long has the scope character been a hostage? { days/months/years =,>,< X }",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "important_action_is_valid_but_invisible": {
        "desc": "is there an important action available to the character, but they dismissed it?",
        "usage": [
            "important_action_is_valid_but_invisible = important_action_key"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "important_action_is_visible": {
        "desc": "is there an important action shown to the character?",
        "usage": [
            "important_action_is_visible = important_action_key"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "in_diplomatic_range": {
        "desc": "Is the scope character and the target character within each others diplomatic range?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "influence": {
        "desc": "does the character have the required influence?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "influence_level": {
        "desc": "does the character have the required influence level?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "intrigue": {
        "desc": "does the character have the required intrigue skill level?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "intrigue_diff": {
        "desc": "does the character have the required intrigue skill level difference against target?",
        "usage": [
            "intrigue = { target = character value <= script_value abs = yes/no(optional, default no) }"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "intrigue_for_portrait": {
        "desc": "Intrigue skill scaled between 0.0 and 1.0 for portraits",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "intrigue_lifestyle_perk_points": {
        "desc": "How many perk points available does the character have?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "intrigue_lifestyle_perks": {
        "desc": "How many perks from this lifestyle does the character have?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "intrigue_lifestyle_unlockable_perks": {
        "desc": "How many perks from this lifestyle can the character currently unlock? This checks that they have the parent perks, and that the can_be_picked is met. It doesn't check perk points",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "intrigue_lifestyle_xp": {
        "desc": "How many perk points available does the character have?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_a_faction_leader": {
        "desc": "Is the scope character a leader of a faction?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_a_faction_member": {
        "desc": "Is the scope character a member of a faction?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_acclaimed": {
        "desc": "Is the given character the Acclaimed Knight of an Accolade?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_accolade_successor": {
        "desc": "Is the given character the Successor of an Accolade?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_activity_type_on_cooldown": {
        "desc": "Is the given activity type on cooldown for the current character.",
        "usage": [
            "is_activity_type_on_cooldown = activity_type_key"
        ],
        "traits": "class CActivityTypeDatabase key",
        "supported_scopes": "character",
        "supported_targets": "activity_type"
    },
    "is_adult": {
        "desc": "Is the scope character adult?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_agent_exposed_in_scheme": {
        "desc": "Is the scope character an exposed agent in the target scheme?",
        "usage": [],
        "traits": "scheme scope",
        "supported_scopes": "character",
        "supported_targets": "scheme"
    },
    "is_ai": {
        "desc": "is the character played by AI?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_alive": {
        "desc": "is the character alive or dead?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_allied_in_war": {
        "desc": "Is the scope character allied to the target character in a war?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_allied_to": {
        "desc": "Is the scope character allied to the target character?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_at_home": {
        "desc": "is the character at home?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_at_location": {
        "desc": "Is the character currently in the target province?",
        "usage": [],
        "traits": "province target province scope",
        "supported_scopes": "character",
        "supported_targets": "province"
    },
    "is_at_same_location": {
        "desc": "Is the character currently in the same province as the target character?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_at_war": {
        "desc": "is the character at war? Does not consider your lieges' wars",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_at_war_as_attacker": {
        "desc": "is the character at war as an attacker? Does not consider your lieges' wars",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_at_war_as_defender": {
        "desc": "is the character at war as a defender? Does not consider your lieges' wars",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_at_war_with": {
        "desc": "Is the character at war with the target? Does not consider your lieges' wars",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_at_war_with_liege": {
        "desc": "is the character at war with their liege?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_attacker_in_war": {
        "desc": "is the scope character in the target war as an attacker?",
        "usage": [],
        "traits": "war scope",
        "supported_scopes": "character",
        "supported_targets": "war"
    },
    "is_attracted_to_gender_of": {
        "desc": "does the sexuality of the scope character make them attracted to the target character?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_attracted_to_men": {
        "desc": "Is the character attracted to men?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_attracted_to_women": {
        "desc": "Is the character attracted to women?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_away_from_court": {
        "desc": "Is the character away from the court?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_betrothed": {
        "desc": "Is the scope character betrothed?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_causing_raid_hostility_towards": {
        "desc": "Is the scoped character making the target hostile due to having raided their (top-liege's) realm?",
        "usage": [
            "is_causing_raid_hostility_towards = scope:character"
        ],
        "traits": "character scope",
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "is_character_interaction_potentially_accepted": {
        "desc": "Is the character interaction specified available and potentially accepted for the target character?",
        "usage": [
            "is_character_interaction_potentially_accepted = {",
            "recipient = character",
            "interaction = interaction_name",
            "secondary_actor = character <optional>",
            "secondary_recipient = character <optional>",
            "target_title = title <optional>",
            "required_response = yes/maybe <optional>",
            "ai_accept = min acceptance value <optional>",
            "}"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_character_interaction_shown": {
        "desc": "Is the character interaction specified shown for the target character?",
        "usage": [
            "is_character_interaction_shown = {",
            "recipient = character",
            "interaction = interaction_name",
            "}"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_character_interaction_valid": {
        "desc": "Is the character interaction specified valid (shown and usable) for the target character?",
        "usage": [
            "is_character_interaction_valid = {",
            "recipient = character",
            "interaction = interaction_name",
            "}"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_character_window_main_character": {
        "desc": "Is the local player the main character in the character window?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_child_of": {
        "desc": "Is the character a child of the target character?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_claimant": {
        "desc": "is the character a claimant to any landed titles?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_clergy": {
        "desc": "Is the scoped character a clergy?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_close_family_of": {
        "desc": "Is the character a close family [parents, children, siblings, grandparents, grandchildren] of the target character?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_close_or_extended_family_of": {
        "desc": "Is the character a close or extended family [parents, children, siblings, grandparents, grandchildren, cousins, uncles, aunts, nephews, nieces] of the target character?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_commanding_army": {
        "desc": "is the character a commanding an army?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_concubine": {
        "desc": "Is the scope character a concubine?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_concubine_of": {
        "desc": "Is the target character a concubine of the scope character?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_confederation_member": {
        "desc": "Is the scoped character a member of a confederation?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_consort_of": {
        "desc": "Is the character a spouse or concubine of the target character?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_contact_of": {
        "desc": "Check if character is employer of laamp",
        "usage": [
            "scope:actor = { is_contact_of = SCOPE_CHARACTER }"
        ],
        "traits": "character scope",
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "is_council_task_valid": {
        "desc": "Check if the task of the scope councillor is valid { task_type = council_position_type_key target = for_targeted_tasks }",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_councillor": {
        "desc": "Is the scoped character a councillor?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_councillor_of": {
        "desc": "Is the scoped character a councillor for the specified character?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_court_position_employer": {
        "desc": "is the scoped character employed in the target position by target character",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_courtier": {
        "desc": "Is the scope character a courtier?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_courtier_of": {
        "desc": "Is the scope character a courtier of the target character?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_cousin_of": {
        "desc": "Is the character a cousin of the target character?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_decision_on_cooldown": {
        "desc": "Is the given decision on cooldown for the current character.",
        "usage": [
            "is_decision_on_cooldown = decision_key"
        ],
        "traits": "class CDecisionTypeDatabase key",
        "supported_scopes": "character",
        "supported_targets": "decision"
    },
    "is_defender_in_war": {
        "desc": "is the scope character in the target war as a defender?",
        "usage": [],
        "traits": "war scope",
        "supported_scopes": "character",
        "supported_targets": "war"
    },
    "is_designated_diarch": {
        "desc": "Is the scoped character was diesignated as diarch by their liege?",
        "usage": [
            "scope:character = { is_designated_diarch = yes/no }"
        ],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_diarch": {
        "desc": "Is the scoped character currently an active diarch of anyone?",
        "usage": [
            "scope:character = { is_diarch = yes/no }"
        ],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_diarch_of_target": {
        "desc": "Is the scoped character currently an active diarch of the target?",
        "usage": [
            "scope:character = { is_diarch_of_target = scope:liege }"
        ],
        "traits": "character scope",
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "is_diarchy_successor": {
        "desc": "Is the scoped character next in the line of succession for diarchy?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_employer_of": {
        "desc": "Is the target character a courtier of the scope character?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_extended_family_of": {
        "desc": "Is the character a extended family [cousins, uncles, aunts, nephews, nieces] of the target character?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_favorite_child": {
        "desc": "is the character their liege's favorite child?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_female": {
        "desc": "Is the scope character female?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_forbidden_from_scheme": {
        "desc": "Is the scope character forbidden from the target scheme?",
        "usage": [],
        "traits": "scheme scope",
        "supported_scopes": "character",
        "supported_targets": "scheme"
    },
    "is_forced_into_faction": {
        "desc": "Is the scope character forced to be part of a faction?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_forced_into_scheme": {
        "desc": "Checks if the scope character is forced into the target scheme",
        "usage": [],
        "traits": "scheme scope",
        "supported_scopes": "character",
        "supported_targets": "scheme"
    },
    "is_foreign_court_guest": {
        "desc": "Is the character a guest from another a court? In contrast to is_pool_guest the character has a liege",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_foreign_court_guest_of": {
        "desc": "Is the character a guest from another a court, visiting the target character's court? In contrast to is_pool_guest_of the character has a liege",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_foreign_court_or_pool_guest": {
        "desc": "Is the character a guest? (is_pool_guest or is_foreign_court_guest)",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_foreign_court_or_pool_guest_of": {
        "desc": "Is the character a guest? (is_pool_guest_of or is_foreign_court_guest_of)",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_from_ruler_designer": {
        "desc": "Was this character made from the ruler designer",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_grandchild_of": {
        "desc": "Is the character a grandchild of the target character?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_grandparent_of": {
        "desc": "Is the character a grandparent of the target character?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_great_grandchild_of": {
        "desc": "Is the character a great grandchild of the target character?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_great_grandparent_of": {
        "desc": "Is the character a great grandparent of the target character?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_heir_of": {
        "desc": "Is the character an heir of the target [placeholder]?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_hostage": {
        "desc": "Is the scoped character a Hostage?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_hostage_from": {
        "desc": "Is the scope character a Hostage with target character as their original Liege? is_hostage_from = TARGET",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_hostage_of": {
        "desc": "Is the scope character a Hostage with target character as their Warden? is_hostage_of = TARGET",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_hostage_warden": {
        "desc": "Is the scoped character a Warden with Hostages?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_immortal": {
        "desc": "Is the character immortal?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_important_decision": {
        "desc": "Is the scoped decision an important decision for the target character?",
        "usage": [],
        "traits": "class CDecisionTypeDatabase key",
        "supported_scopes": "character",
        "supported_targets": "decision"
    },
    "is_imprisoned": {
        "desc": "is the character imprisoned?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_imprisoned_by": {
        "desc": "Is the scope character imprisoned by the target character? is_imprisoned_by = TARGET",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_in_army": {
        "desc": "is the character in an army (a commander or a knight)?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_in_civil_war": {
        "desc": "is the character at war with their liege, or one or more of their vassals?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_in_guest_subset": {
        "desc": "Is the scoped character in the specified guest subset in the activity they are",
        "usage": [
            "is_in_guest_subset = {",
            "name = <subset_key>",
            "phase = <phase_key> #Optional",
            "}",
            "If phase is not specified, it will check the current phase, otherwise it will",
            "check all phases matching the phase key."
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_in_ongoing_great_holy_war": {
        "desc": "is the character in an ongoing (i.e. the war has started) great holy war?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_in_pool_at": {
        "desc": "Is the character in the pool the target province is a part of",
        "usage": [],
        "traits": "province target province scope",
        "supported_scopes": "character",
        "supported_targets": "province"
    },
    "is_in_prison_type": {
        "desc": "is the character imprisoned in a prison of the specified type? Accepts any static modifier (see also imprison effect).",
        "usage": [
            "is_in_prison_type = house_arrest"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_in_the_same_court_as": {
        "desc": "Is the character in the same court as the target character (they have the same court owner or one is a courtier of the other)?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_in_the_same_court_as_or_guest": {
        "desc": "Is the character in the same court as the target character (they have the same court owner or one is a courtier of the other)? Includes guests in the court.",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_incapable": {
        "desc": "is the character incapable?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_independent_ruler": {
        "desc": "is the character an independent ruler?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_knight": {
        "desc": "Is the scoped character a knight",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_knight_of": {
        "desc": "Is the scoped character a knight of the target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_landed": {
        "desc": "Is the scope character landed (holds a county or barony)?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_landless_ruler": {
        "desc": "Is the scope character a landless ruler (holds any title, but no on-map land)?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_leader_in_war": {
        "desc": "is the scope character leading one of the sides in the target war?",
        "usage": [],
        "traits": "war scope",
        "supported_scopes": "character",
        "supported_targets": "war"
    },
    "is_leading_faction_type": {
        "desc": "Is the character leading a faction of the specified type?",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_liege_or_above_of": {
        "desc": "is the scope character a liege or above of the target character?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_local_player": {
        "desc": "is the character the local player?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_lowborn": {
        "desc": "Is the character a lowborn?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_male": {
        "desc": "Is the scope character male?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_married": {
        "desc": "Is the scope character married?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_member_of_confederation": {
        "desc": "Is the scoped character a member of the target confederation?",
        "usage": [],
        "traits": "confederation scope",
        "supported_scopes": "character",
        "supported_targets": "confederation"
    },
    "is_migrating": {
        "desc": "Is the character currently migrating?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_nibling_of": {
        "desc": "Is the character a nibling (niece/nephew) of the target character?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_normal_councillor": {
        "desc": "Is the scoped character a regular councillor?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_obedient": {
        "desc": "Is the scope character obedient?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_obedient_to": {
        "desc": "Is the scope character obedient to the target character?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_overriding_designated_winner": {
        "desc": "Is the scoped character overriding the winner in the GHW they're pledged to (will put their beneficiary on the throne if they're top participant)?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_parent_of": {
        "desc": "Is the character a parent of the target character?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_participant_in_activity": {
        "desc": "is_participant_in_activity = target_activity",
        "usage": [],
        "traits": "activity scope",
        "supported_scopes": "character",
        "supported_targets": "activity"
    },
    "is_participant_in_war": {
        "desc": "is the scope character participating in the target war as an attacker or defender?",
        "usage": [],
        "traits": "war scope",
        "supported_scopes": "character",
        "supported_targets": "war"
    },
    "is_performing_council_task": {
        "desc": "Is the scoped character performing the given task?",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_player_heir_of": {
        "desc": "Is the scope character the player heir of the target character?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_pledged_ghw_attacker": {
        "desc": "Is the scoped character a pledged attacker in the current GHW (it's an error to check this if there's no GHW around)",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_pool_character": {
        "desc": "Is the character in the pool? (not a ruler, courtier or guest at any court)",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_pool_guest": {
        "desc": "Is the character a guest from the pool? In contrast to is_foreign_court_guest the character has no liege",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_pool_guest_of": {
        "desc": "Is the character a guest from the pool, visiting the target character's court? In contrast to is_foreign_court_guest_of the character has no liege",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_potential_knight": {
        "desc": "Is the scoped character a POTENTIAL knight to their liege?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_powerful_vassal": {
        "desc": "Is the character a powerful vassal?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_powerful_vassal_of": {
        "desc": "Is the character a powerful vassal of the target?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_pregnant": {
        "desc": "is the character pregnant?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_primary_heir_of": {
        "desc": "Is the character the heir of the target's primary title?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_ruler": {
        "desc": "Is the scope character a ruler (holds any title)?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_scheming_against": {
        "desc": "Checks whether the scope character is an owner or an owner agent in a scheme agains target. There are 3 possible ways to use it:",
        "usage": [
            "is_scheming_against = { target = X type = Y } limits to schemes of type Y",
            "is_scheming_against = { target = X scheme_skill = Y } limits to schemes of Y skill category",
            "is_scheming_against = { target = X } considers all schemes"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_sibling_of": {
        "desc": "Is the character a sibling of the target character?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_spouse_of": {
        "desc": "Is the character a spouse of the target character, and are both alive?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_spouse_of_even_if_dead": {
        "desc": "Is the character a spouse of the target character, even if one or both are dead?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_successor_of_accolade": {
        "desc": "Is the scoped character the successor of a given Accolade?",
        "usage": [
            "is_successor_of_accolade = accolade"
        ],
        "traits": "accolade scope",
        "supported_scopes": "character",
        "supported_targets": "accolade"
    },
    "is_tax_collector": {
        "desc": "Is this scope character a tax collector?",
        "usage": [
            "scope:character = { is_tax_collector = yes/no }"
        ],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_tax_collector_of": {
        "desc": "Is the scoped character a tax collector of the target character",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_theocratic_lessee": {
        "desc": "Is the scope character a theocratic lessee (bishop)?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_travel_entourage_character": {
        "desc": "Is the character travelling and part of the entourage? (travel leader is part of the entourage)",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_travel_leader": {
        "desc": "Is the character travelling and the active travel leader?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_travelling": {
        "desc": "Is the character currently travelling?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_tributary": {
        "desc": "Is the scoped character someone else's tributary?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_tributary_of": {
        "desc": "Is the scoped character a direct tributary of the target character?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_tributary_of_suzerain_or_above": {
        "desc": "Is the scoped character a direct or indirect tributary of the target character due to cascading tributaries?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_twin_of": {
        "desc": "Is the character a twin of the target character?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_unborn_child_of_concubine": {
        "desc": "Is the unborn a child of a concubine?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_unborn_known_bastard": {
        "desc": "Is the unborn a known bastard?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_uncle_or_aunt_of": {
        "desc": "Is the character an uncle or aunt of the target character?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_valid_as_agent_in_any_slot": {
        "desc": "Is the scope character suitable as an agent for any slot in target scheme?",
        "usage": [],
        "traits": "scheme scope",
        "supported_scopes": "character",
        "supported_targets": "scheme"
    },
    "is_valid_as_agent_in_slot": {
        "desc": "Is the scope character suitable as an agent for the target agent slot?",
        "usage": [],
        "traits": "agent_slot scope",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_valid_designated_heir": {
        "desc": "Is the target character a valid potential designated heir of the scoped character?",
        "usage": [
            "is_valid_designated_heir = scope:target_character"
        ],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_valid_for_event_debug": {
        "desc": "is the scoped character valid for the given event, without checking event cooldown?",
        "usage": [
            "is_valid_for_event_debug = event_key"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_valid_for_event_debug_cooldown": {
        "desc": "is the scoped character valid for the given event, including a cooldown check?",
        "usage": [
            "is_valid_for_event_debug_cooldown = event_key"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_valid_successor_for_accolade": {
        "desc": "Is the scoped character a valid candidate to take over as successor of this Accolade?",
        "usage": [
            "is_valid_successor_for_accolade = accolade"
        ],
        "traits": "accolade scope",
        "supported_scopes": "character",
        "supported_targets": "accolade"
    },
    "is_valid_to_hire_court_position_type": {
        "desc": "Does the scoped character fulfill the requirements for being employed as the targeted court position type?",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_vassal_of": {
        "desc": "Is the character a direct vassal of the target character?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_vassal_or_below_of": {
        "desc": "is the scope character a vassal or below of the target character? Non-rulers are not considered vassals",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "is_visibly_fertile": {
        "desc": "Is the scoped character visibly fertile, that is: not too old if a woman, not too young and has no traits blocking having children",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "join_faction_chance": {
        "desc": "Check if the chance of the scope character to join the faction against the scripted value",
        "usage": [
            "join_faction_chance = {",
            "target = faction_target #An ongoing faction",
            "value <|<=|>=|> 0",
            "}"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "join_scheme_chance": {
        "desc": "Check if the chance of the scope character is between the given range (being min and max exclusive)",
        "usage": [
            "join_scheme_chance = {",
            "scheme = scheme_target #An ongoing scheme",
            "max = 0",
            "min = -10",
            "}"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "knows_court_language_of": {
        "desc": "Does the character know the court language of the target character?",
        "usage": [
            "knows_court_language_of = scope:target_character"
        ],
        "traits": "character scope",
        "supported_scopes": "character",
        "supported_targets": "character"
    },
    "knows_language": {
        "desc": "Does the character know the language?",
        "usage": [
            "knows_language = language_norwegian"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "knows_language_of_culture": {
        "desc": "Does the character know the language of the target culture?",
        "usage": [
            "knows_language_of_culture = scope:target_culture"
        ],
        "traits": "culture scope",
        "supported_scopes": "character",
        "supported_targets": "culture"
    },
    "learning": {
        "desc": "does the character have the required learning skill level?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "learning_diff": {
        "desc": "does the character have the required learning skill level difference against target?",
        "usage": [
            "learning = { target = character value <= script_value abs = yes/no(optional, default no) }"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "learning_for_portrait": {
        "desc": "Learning skill scaled between 0.0 and 1.0 for portraits",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "learning_lifestyle_perk_points": {
        "desc": "How many perk points available does the character have?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "learning_lifestyle_perks": {
        "desc": "How many perks from this lifestyle does the character have?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "learning_lifestyle_unlockable_perks": {
        "desc": "How many perks from this lifestyle can the character currently unlock? This checks that they have the parent perks, and that the can_be_picked is met. It doesn't check perk points",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "learning_lifestyle_xp": {
        "desc": "How many perk points available does the character have?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "legitimacy": {
        "desc": "Gets the scoped character's current legitimacy",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "legitimacy_level": {
        "desc": "Gets the scoped character's current legitimacy level",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "levies_to_liege": {
        "desc": "The amount of levies a character sends to their liege",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "long_term_gold": {
        "desc": "does the character have the required gold? (AI category 'long term')",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "long_term_gold_maximum": {
        "desc": "How big is the 'long term' budget is supposed to get?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "maa_regiments_count": {
        "desc": "Current number of personal MaA regiments",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "maa_regiments_max_count": {
        "desc": "Max number of personal MaA regiment",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "mandate_type_qualification": {
        "desc": "Diarch qualification for spefic mandate type",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "martial": {
        "desc": "does the character have the required martial skill level?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "martial_diff": {
        "desc": "does the character have the required martial skill level difference against target?",
        "usage": [
            "martial = { target = character value <= script_value abs = yes/no(optional, default no) }"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "martial_for_portrait": {
        "desc": "Martial skill scaled between 0.0 and 1.0 for portraits",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "martial_lifestyle_perk_points": {
        "desc": "How many perk points available does the character have?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "martial_lifestyle_perks": {
        "desc": "How many perks from this lifestyle does the character have?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "martial_lifestyle_unlockable_perks": {
        "desc": "How many perks from this lifestyle can the character currently unlock? This checks that they have the parent perks, and that the can_be_picked is met. It doesn't check perk points",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "martial_lifestyle_xp": {
        "desc": "How many perk points available does the character have?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "matrilinear_betrothal": {
        "desc": "Is this character's betrothal matrilinear? False if there's no betrothal.",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "matrilinear_marriage": {
        "desc": "Is the marriage with the spouse matrilinear?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "max_active_accolades": {
        "desc": "How many active accolades can this character have at most?",
        "usage": [
            "max_active_accolades <= 3"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "max_domain_fertility": {
        "desc": "Get the max domain fertility of the scoped character",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "max_military_strength": {
        "desc": "Is the scoped character's max military strength this big?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "max_number_maa_soldiers_of_base_type": {
        "desc": "Does the scope character have value amount of max soldiers of MaA of the base type?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "max_number_maa_soldiers_of_type": {
        "desc": "Does the scope character have value amount of max soldiers of MaA of the type?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "max_number_of_concubines": {
        "desc": "The maximum number of concubines a character can have",
        "usage": [
            "max_number_of_concubines > 2"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "max_number_of_knights": {
        "desc": "Check how many knights the scoped character can potentially have",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "military_power": {
        "desc": "Is the scoped character's military power this big?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "monthly_character_balance": {
        "desc": "Is the scoped character's monthly balance this big?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "monthly_character_expenses": {
        "desc": "Is the scoped character's monthly expenses this big?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "monthly_character_income": {
        "desc": "Is the scoped character's monthly income this big?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "monthly_character_income_long_term": {
        "desc": "did the character allocate the required gold? (AI category long term)",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "monthly_character_income_reserved": {
        "desc": "did the character allocate the required gold? (AI category reserved)",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "monthly_character_income_short_term": {
        "desc": "did the character allocate the required gold? (AI category short term)",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "monthly_character_income_war_chest": {
        "desc": "did the character allocate the required gold? (AI category war chest)",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "monthly_character_men_at_arms_expense_gold": {
        "desc": "Is the scoped character's monthly military gold expenses this big? (unraised maa costs)",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "monthly_character_men_at_arms_expense_prestige": {
        "desc": "Is the scoped character's monthly military prestige expenses this big? (unraised maa costs)",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "months_as_ruler": {
        "desc": "Number of months this character has been a ruler, returns -1 if character isn't a ruler",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "morph_gene_attribute": {
        "desc": "Compare entity attribute from specific gene",
        "usage": [
            "Example scope:character = {",
            "morph_gene_attribute = {",
            "category = gene_height",
            "attribute = body_height",
            "value < 0.05",
            "}",
            "}",
            "An interface trigger, can only be used in specific places"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "morph_gene_value": {
        "desc": "Compare value of specific gene. Does NOT take into account trait modifiers",
        "usage": [
            "scope:character = {",
            "morph_gene_attribute = {",
            "category = gene_height",
            "value < 0.05",
            "}",
            "}",
            "scope:character = {",
            "morph_gene_value:gene_baldness > 0.05",
            "0.05 < morph_gene_value:gene_baldness",
            "}",
            "An interface trigger, can only be used in specific places"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "num_active_accolades": {
        "desc": "How many active accolades does this character currently have?",
        "usage": [
            "num_active_accolades < 4"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "num_inactive_accolades": {
        "desc": "How many inactive accolades does this character currently have?",
        "usage": [
            "num_inactive_accolades > 0"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "num_of_bad_genetic_traits": {
        "desc": "Compare the number of bad genetic traits",
        "usage": [
            "<charater> = { num_of_bad_genetic_traits = 0 }"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "num_of_good_genetic_traits": {
        "desc": "Compare the number of good genetic traits",
        "usage": [
            "<charater> = { num_of_good_genetic_traits >= 2 }"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "num_of_known_languages": {
        "desc": "How many languages does the character know?",
        "usage": [
            "num_of_known_languages > 1"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "num_of_relation_activity_recurrer": {
        "desc": "Compares the number of scripted relations a character has of the type",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "num_of_relation_antiquarian": {
        "desc": "Compares the number of scripted relations a character has of the type",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "num_of_relation_best_friend": {
        "desc": "Compares the number of scripted relations a character has of the type",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "num_of_relation_blood_brother": {
        "desc": "Compares the number of scripted relations a character has of the type",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "num_of_relation_bully": {
        "desc": "Compares the number of scripted relations a character has of the type",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "num_of_relation_court_physician": {
        "desc": "Compares the number of scripted relations a character has of the type",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "num_of_relation_crush": {
        "desc": "Compares the number of scripted relations a character has of the type",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "num_of_relation_event_recurrer": {
        "desc": "Compares the number of scripted relations a character has of the type",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "num_of_relation_favorite_child": {
        "desc": "Compares the number of scripted relations a character has of the type",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "num_of_relation_friend": {
        "desc": "Compares the number of scripted relations a character has of the type",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "num_of_relation_grudge": {
        "desc": "Compares the number of scripted relations a character has of the type",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "num_of_relation_guardian": {
        "desc": "Compares the number of scripted relations a character has of the type",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "num_of_relation_intrigue_mentor": {
        "desc": "Compares the number of scripted relations a character has of the type",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "num_of_relation_intrigue_student": {
        "desc": "Compares the number of scripted relations a character has of the type",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "num_of_relation_lover": {
        "desc": "Compares the number of scripted relations a character has of the type",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "num_of_relation_mentor": {
        "desc": "Compares the number of scripted relations a character has of the type",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "num_of_relation_nemesis": {
        "desc": "Compares the number of scripted relations a character has of the type",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "num_of_relation_nursed_child": {
        "desc": "Compares the number of scripted relations a character has of the type",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "num_of_relation_oaf": {
        "desc": "Compares the number of scripted relations a character has of the type",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "num_of_relation_old_flame": {
        "desc": "Compares the number of scripted relations a character has of the type",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "num_of_relation_potential_friend": {
        "desc": "Compares the number of scripted relations a character has of the type",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "num_of_relation_potential_hook": {
        "desc": "Compares the number of scripted relations a character has of the type",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "num_of_relation_potential_lover": {
        "desc": "Compares the number of scripted relations a character has of the type",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "num_of_relation_potential_rival": {
        "desc": "Compares the number of scripted relations a character has of the type",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "num_of_relation_rival": {
        "desc": "Compares the number of scripted relations a character has of the type",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "num_of_relation_soldier_friend": {
        "desc": "Compares the number of scripted relations a character has of the type",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "num_of_relation_soulmate": {
        "desc": "Compares the number of scripted relations a character has of the type",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "num_of_relation_student": {
        "desc": "Compares the number of scripted relations a character has of the type",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "num_of_relation_victim": {
        "desc": "Compares the number of scripted relations a character has of the type",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "num_of_relation_ward": {
        "desc": "Compares the number of scripted relations a character has of the type",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "num_of_relation_wedding_bad_fertility": {
        "desc": "Compares the number of scripted relations a character has of the type",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "num_of_relation_wedding_good_fertility": {
        "desc": "Compares the number of scripted relations a character has of the type",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "num_of_relation_wedding_very_bad_fertility": {
        "desc": "Compares the number of scripted relations a character has of the type",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "num_of_relation_wedding_very_good_fertility": {
        "desc": "Compares the number of scripted relations a character has of the type",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "num_of_relation_wet_nurse": {
        "desc": "Compares the number of scripted relations a character has of the type",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "num_offered_task_contracts": {
        "desc": "Count of active task contract offered",
        "usage": [
            "scope:actor = { num_offered_task_contracts > 0 }"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "num_personal_legend_seeds": {
        "desc": "How many personal legend seeds are available to this character?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "num_scripted_legend_seeds": {
        "desc": "How many scripted legend seeds are available to this character? They do not need to be valid to start",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "num_sinful_traits": {
        "desc": "Does the scoped character have this number of virtous traits?",
        "usage": [
            "num_virtous_traits > 5 ORnum_virtous_traits = { value > 5 faith = scope:faith }, to base it on what a specific faith considers virtuous"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "num_taken_task_contracts": {
        "desc": "Amount of taken task contracts for character (accepted & not yet completed)",
        "usage": [
            "scope:actor = { num_taken_task_contracts > 0 }"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "num_task_contracts": {
        "desc": "Amount of tas contracts for character",
        "usage": [
            "scope:actor = { num_task_contracts > 0 }"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "num_triggered_legend_seeds": {
        "desc": "How many scripted legend seeds are available to this character and valid to start?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "num_virtuous_traits": {
        "desc": "Does the scoped character have this number of virtous traits?",
        "usage": [
            "num_virtous_traits > 5 ORnum_virtous_traits = { value > 5 faith = scope:faith }, to base it on what a specific faith considers virtuous"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "number_maa_regiments_of_base_type": {
        "desc": "Does the scope character have value amount of MaA of the base type?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "number_maa_regiments_of_type": {
        "desc": "Does the scope character have value amount of MaA of the type?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "number_maa_soldiers_of_base_type": {
        "desc": "Does the scope character have value amount of soldiers of MaA of the base type?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "number_maa_soldiers_of_type": {
        "desc": "Does the scope character have value amount of soldiers of MaA of the type?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "number_of_commander_traits": {
        "desc": "does the character have this many commander traits?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "number_of_commander_traits_in_common": {
        "desc": "does the character and the target have a number of commander traits in common?",
        "usage": [
            "number_of_personality_traits_in_common = { target = X value >/</>=/<= Y }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "number_of_concubines": {
        "desc": "The number of concubines the scoped character has",
        "usage": [
            "number_of_concubines > 2"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "number_of_desired_concubines": {
        "desc": "The number of fertile concubines the scoped character should have to not get penalties",
        "usage": [
            "number_of_desired_concubines > 2"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "number_of_election_votes": {
        "desc": "Check the number of votes the scoped character has in the target title",
        "usage": [
            "number_of_election_votes = { title = scope:actor.primary_title value = 0 }"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "number_of_fertile_concubines": {
        "desc": "The number of visibly fertile concubines the scoped character has",
        "usage": [
            "number_of_fertile_concubines > 2"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "number_of_knights": {
        "desc": "Check how many knights the scoped character has at the moment",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "number_of_lifestyle_traits": {
        "desc": "does the character have this many lifestyle traits?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "number_of_maa_regiments": {
        "desc": "The number of men at arms the scoped character has",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "number_of_opposing_personality_traits": {
        "desc": "does the character and the target have a number of opposing personality traits?",
        "usage": [
            "number_of_opposing_personality_traits = { target = X value >/</>=/<= Y }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "number_of_opposing_traits": {
        "desc": "does the character and the target have a number of opposing traits?",
        "usage": [
            "number_of_opposing_traits = { target = X value >/</>=/<= Y }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "number_of_personality_traits": {
        "desc": "does the character have this many personality traits?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "number_of_personality_traits_in_common": {
        "desc": "does the character and the target have a number of personality traits in common?",
        "usage": [
            "number_of_personality_traits_in_common = { target = X value >/</>=/<= Y }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "number_of_powerful_vassals": {
        "desc": "Does the character have a specified number of powerful vassals?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "number_of_sinful_traits_in_common": {
        "desc": "do the two characters share a number of traits that is considered sinful by both of their respective faiths?",
        "usage": [
            "number_of_sinful_traits_in_common = { target = X value >/</>=/<= Y }"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "number_of_stationed_maa_regiments": {
        "desc": "The number of stationed men at arms the scoped character has",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "number_of_traits": {
        "desc": "does the character have this many traits?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "number_of_traits_in_common": {
        "desc": "does the character and the target have a number of traits in common?",
        "usage": [
            "number_of_traits_in_common = { target = X value >/</>=/<= Y }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "number_of_tributaries": {
        "desc": "The number of tributaries the scoped character has",
        "usage": [
            "number_of_tributaries > 2"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "number_of_virtue_traits_in_common": {
        "desc": "do the two characters share a number of traits that is considered virtuous by both of their respective faiths?",
        "usage": [
            "number_of_virtue_traits_in_common = { target = X value >/</>=/<= Y }"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "number_title_maa_regiments_of_type": {
        "desc": "Does the scope character have value amount of MaA of the type for their controlled title troops?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "opinion": {
        "desc": "is the character's opinion of the target greater or equal than the value? opinion = { target = X [*value >/</>=/<= Y* or *value = { min max }*  }",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "owns_a_story": {
        "desc": "checks whether the scope character is the owner of any currently active story",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "owns_story_of_type": {
        "desc": "Does the character own a story of this type?",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "parent_relatedness": {
        "desc": "The percentage of shared DNA between the character's parents.",
        "usage": [
            "Traverses the family tree for NDefines::NChildbirth::INBREEDING_ANCESTOR_GENERATIONS amount of generations to find common ancestors. By default this means that we're traversing 4 generations (62 ancestors) and report the relatedness between the two parents. (See https://relatednesscalculator.nolanlawson.com/ for some examples).",
            "`relatedness > 0.25` where 0.0 means not related at all and 1.0 means identical twins"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "participated_wars": {
        "desc": "Checks how many wars the character has been in during their lifetime. (Only for alive characters): scope:character = { participated_wars > 3 }",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "patrilinear_betrothal": {
        "desc": "Is this character's betrothal patrilinear? False if there's no betrothal.",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "patrilinear_marriage": {
        "desc": "Is the marriage with the spouse patrilinear?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "perk_points": {
        "desc": "Does the character have this many perk points across all lifestyles combined?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "perk_points_assigned": {
        "desc": "Does the character have this many perk points assigned across all lifestyles combined?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "perks_in_tree": {
        "desc": "Does the character have this many perk points assigned to this tree? perks_in_tree = { tree = tree_key value > 5 }",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "piety": {
        "desc": "does the character have the required piety?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "piety_level": {
        "desc": "does the character have the required piety level?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "player_heir_position": {
        "desc": "Check where the target character is in the scoped character's player heir list.",
        "usage": [
            "player_heir_position = { target = scope:actor position = 0 }"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "pregnancy_days": {
        "desc": "How long has the character been pregnant? Counts from impregnation, not reveal",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "prestige": {
        "desc": "does the character have the required prestige?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "prestige_level": {
        "desc": "does the character have the required prestige level?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "provision_cost_to_domicile": {
        "desc": "What is the provision cost between the domicile owner and the domicile's current location.\"",
        "usage": [
            "scope:character = {",
            "provision_cost_to_domicile > 100",
            "}"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "prowess": {
        "desc": "does the character have the required prowess skill level?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "prowess_diff": {
        "desc": "does the character have the required prowess skill level difference against target?",
        "usage": [
            "prowess = { target = character value <= script_value abs = yes/no(optional, default no) }"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "prowess_for_portrait": {
        "desc": "Prowess skill scaled between 0.0 and 1.0 for portraits",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "prowess_no_portrait": {
        "desc": "does the character have the required prowess skill level (ignores the prowess_no_portrait modifier)?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "ransom_cost": {
        "desc": "what is the ransom cost of the character?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "realm_size": {
        "desc": "Is the scoped character's top liege's realm this big (# of counties)?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "realm_to_title_distance_squared": {
        "desc": "Is the character's realm within this distance of the title? Distance is in pixels, squared for performance reasons. realm_to_title_distance_squared = { title = some_title value > 10000 }",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "reserved_gold": {
        "desc": "does the character have the required gold? (AI category 'reserved')",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "reserved_gold_maximum": {
        "desc": "How big is the 'reserved' budget is supposed to get?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "reverse_has_opinion_modifier": {
        "desc": "does the target have the specified opinion modifier on the character? (optional *value <|<=|=|>=|> X* or *value = { MIN MAX }* inclusive)",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "reverse_opinion": {
        "desc": "is the target character's opinion of the scope character greater or equal than the value? opinion = { target = X [*value >/</>=/<= Y* or *value = { min max }*  }",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "scriptedtests_can_marry_character": {
        "desc": "can the character marry the target character?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "scriptedtests_dread_base": {
        "desc": "does the character have the specified dread baseline value?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "scriptedtests_gold_income_no_theocracy": {
        "desc": "does the character have the specified tax income, excluding income from the theocratic lessee?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "scriptedtests_piety_income": {
        "desc": "does the character have the specified piety income?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "sex_opposite_of": {
        "desc": "Are the scope character the target character of the opposite sex?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "sex_same_as": {
        "desc": "Are the scope character the target character of the same sex?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "short_term_gold": {
        "desc": "does the character have the required gold? (AI category 'short term')",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "short_term_gold_maximum": {
        "desc": "How big is the 'short term' budget is supposed to get?(It may exceed this if all other budgets are full)",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "should_decision_create_alert": {
        "desc": "Is the scoped decision an important decision for the target character?",
        "usage": [],
        "traits": "class CDecisionTypeDatabase key",
        "supported_scopes": "character",
        "supported_targets": "decision"
    },
    "should_notify_can_host_activity": {
        "desc": "should_notify_can_host_activity = target_activity",
        "usage": [],
        "traits": "class CActivityTypeDatabase key",
        "supported_scopes": "character",
        "supported_targets": "activity_type"
    },
    "should_notify_can_join_open_activity": {
        "desc": "should_notify_can_join_open_activity = target_activity",
        "usage": [],
        "traits": "class CActivityTypeDatabase key",
        "supported_scopes": "character",
        "supported_targets": "activity_type"
    },
    "static_group_filter": {
        "desc": "Check if this character 'matches' a group, with a certain match percentage.",
        "usage": [
            "static_group_filter = {",
            "group = <a_group_id>",
            "match = 0.1",
            "}",
            "Instead of a group id, you can supply a scope, and it will use that scope's value as the group 'id'.",
            "static_group_filter = {",
            "scope = <any_scope>",
            "match = 0.1",
            "}"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "stewardship": {
        "desc": "does the character have the required stewardship skill level?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "stewardship_diff": {
        "desc": "does the character have the required stewardship skill level difference against target?",
        "usage": [
            "stewardship = { target = character value <= script_value abs = yes/no(optional, default no) }"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "stewardship_for_portrait": {
        "desc": "Stewardship skill scaled between 0.0 and 1.0 for portraits",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "stewardship_lifestyle_perk_points": {
        "desc": "How many perk points available does the character have?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "stewardship_lifestyle_perks": {
        "desc": "How many perks from this lifestyle does the character have?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "stewardship_lifestyle_unlockable_perks": {
        "desc": "How many perks from this lifestyle can the character currently unlock? This checks that they have the parent perks, and that the can_be_picked is met. It doesn't check perk points",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "stewardship_lifestyle_xp": {
        "desc": "How many perk points available does the character have?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "stress": {
        "desc": "does the character have the required stress?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "stress_level": {
        "desc": "does the character have the required stress level?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "strife_opinion": {
        "desc": "Strife opinion value accumulated by the character",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "sub_realm_size": {
        "desc": "Is the scoped character's sub-realm this big (# of counties)?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "subject_can_break_tributary": {
        "desc": "Can the scoped character break the tributary it is currently a subject in?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "subject_contract_has_flag": {
        "desc": "Do any of the current active obligations in the scoped character's subject contract have the given flag",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "subject_contract_has_modifiable_obligations": {
        "desc": "Can the scoped character's subject contract be modified at all, that is: they have one, they use obligation levels, and are count or above",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "subject_contract_is_blocked_from_modification": {
        "desc": "Has the scoped character's contract been blocked from modification by script via 'set_subject_contract_modification_blocked'",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "succession_appointment_score_invested": {
        "desc": "How much has the scoped character invested in the target title towards the target candidate?",
        "usage": [
            "scope:character = {",
            "succession_appointment_score_invested = {",
            "title = scope:title",
            "candidate = scope:character",
            "value < 0",
            "}",
            "}"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "target_is_liege_or_above": {
        "desc": "is the target character the liege or above the scope character?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "target_is_same_character_or_above": {
        "desc": "is the target character the the same character or above (in the vassal hierarchy) the scope character?",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "target_is_vassal_or_below": {
        "desc": "is the target character a vassal or below of the scope character? Non-rulers are not considered vassals",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "target_weight": {
        "desc": "Target weight of the scoped character",
        "usage": [
            "target_weight > 10"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "tax_collector_aptitude": {
        "desc": "What is the scoped character's Tax Collector aptitude in the target tax slot type? tax_collector_aptitude = { tax_slot_type = tax_slot_type value >= 1 }",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "tax_to_liege": {
        "desc": "The amount of tax a character sends to their liege",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "tier_difference": {
        "desc": "What is the difference in highest_held_title_tier between the scoped character and the target character (-5 to 5)",
        "usage": [
            "scope:a_baron = {",
            "tier_difference = {",
            "target = scope:a_king",
            "value = -3",
            "}",
            "}"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "time_after_diarch_designated": {
        "desc": "How much time passed after diarch was designated?",
        "usage": [
            "time_after_designated_diarch = { days/months/years =,>,< X }"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "time_in_prison": {
        "desc": "for how long has the character been imprisoned? time_in_prison = { days/months/years =,>,< X }",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "time_in_prison_type": {
        "desc": "for how long has the character been imprisoned with the current type? time_in_prison_type = { days/months/years =,>,< X }",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "time_since_death": {
        "desc": "for how long has the character is dead? time_since_death  = { days/months/years =,>,< X }",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "time_to_hook_expiry": {
        "desc": "The # of days until the scoped character's hook on the target expires",
        "usage": [
            "time_to_hook_expiry = { target = someone value > 50 }"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "trait_compatibility": {
        "desc": "target = other character value >/</= sum of trait compatibility values",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "travel_leader_cost": {
        "desc": "What this character would cost as a travel leader",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "travel_leader_safety": {
        "desc": "The safety-aptitude of the current travel leader",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "travel_leader_speed": {
        "desc": "The speed-aptitude of the current travel leader",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "tyranny": {
        "desc": "does the character have the required tyranny?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "vassal_contract_has_flag": {
        "desc": "Do any of the current active obligations in the scoped character's vassal contract have the given flag",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "vassal_contract_has_modifiable_obligations": {
        "desc": "Can the scoped character's vassal contract be modified at all, that is: they have one, they use obligation levels, and are count or above",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "vassal_contract_liege_dynasty_reign_start_date": {
        "desc": "Date when this vassal's liege's dynasty started ruling over this vassal",
        "usage": [],
        "traits": "<, <=, =, >, >= valid date",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "vassal_contract_obligation_level": {
        "desc": "The level of the provided contract type in the scoped character's current vassal contract",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "vassal_contract_obligation_level_can_be_decreased": {
        "desc": "Can the obligation level of the scoped character's vassal contract be decreasde?",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "vassal_contract_obligation_level_can_be_increased": {
        "desc": "Can the obligation level of the scoped character's vassal contract be increased?",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "vassal_contract_obligation_level_score": {
        "desc": "The score in favour of the vassal for the provided contract type in the scoped character's current vassal contract",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "vassal_count": {
        "desc": "Is the scoped character's number of vassals (excluding barons) this high?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "vassal_limit": {
        "desc": "Is the scoped character's vassal limit this big?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "vassal_limit_available": {
        "desc": "Is there this much space left in the character's vassal limit? Negative values also work for checking characters that are above their limit",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "vassal_limit_percentage": {
        "desc": "Is the scoped character's vassal count this big in comparison to their limit?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "wanderer_lifestyle_perk_points": {
        "desc": "How many perk points available does the character have?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "wanderer_lifestyle_perks": {
        "desc": "How many perks from this lifestyle does the character have?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "wanderer_lifestyle_unlockable_perks": {
        "desc": "How many perks from this lifestyle can the character currently unlock? This checks that they have the parent perks, and that the can_be_picked is met. It doesn't check perk points",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "wanderer_lifestyle_xp": {
        "desc": "How many perk points available does the character have?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "war_chest_gold": {
        "desc": "does the character have the required gold? (AI category 'war chest')",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "war_chest_gold_maximum": {
        "desc": "How big is the 'war chest' budget is supposed to get?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "was_hostage_child": {
        "desc": "Was the scoped character a Hostage as a Child?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "would_be_valid_for_court_position": {
        "desc": "can the scoped character be employed as court position by the employer?",
        "usage": [
            "scope:character = {",
            "would_be_valid_for_court_position = {",
            "employer = scope:employer",
            "court_position = court_physician_court_position",
            "}",
            "}"
        ],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "year_of_birth": {
        "desc": "Get character year_of_birth: scope:character = { year_of_birth > 1096 }",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "yearly_character_balance": {
        "desc": "Is the scoped character's yearly balance this big?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "yearly_character_expenses": {
        "desc": "Is the scoped character's yearly expenses this big?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "yearly_character_income": {
        "desc": "Is the scoped character's yearly income this big?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "yearly_character_men_at_arms_expense_gold": {
        "desc": "Is the scoped character's yearly military gold expenses this big? (unraised maa costs)",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "yearly_character_men_at_arms_expense_prestige": {
        "desc": "Is the scoped character's yearly military prestige expenses this big? (unraised maa costs)",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "years_as_diarch": {
        "desc": "How many whole years has the character been an active diarch?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "years_as_ruler": {
        "desc": "Number of years this character has been a ruler, returns -1 if character isn't a ruler",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "years_in_diarchy": {
        "desc": "How many whole years has liege spent in a diarchy?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "character",
        "supported_targets": null
    },
    "yields_alliance": {
        "desc": "Checks if the character would get an alliance with the target character through such a marriage.",
        "usage": [],
        "traits": null,
        "supported_scopes": "character",
        "supported_targets": null
    },
    "any_combat_side": {
        "desc": "Iterate over both sides ( attacker and defender ) of the given combat",
        "usage": [
            "any_combat_side = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "combat",
        "supported_targets": "combat_side"
    },
    "num_total_troops": {
        "desc": "Number of total troops on boths sides.",
        "usage": [
            "num_total_troops >= 2000"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "combat",
        "supported_targets": null
    },
    "warscore_value": {
        "desc": "Warscore value.",
        "usage": [
            "warscore_value >= 25"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "combat",
        "supported_targets": null
    },
    "active_de_jure_drift_progress": {
        "desc": "task_current_value = scope:county.active_de_jure_drift_progress",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "any_claimant": {
        "desc": "Iterate through all claimants to title. parameters: explicit = yes/no/all - default yes",
        "usage": [
            "any_claimant = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "landed_title",
        "supported_targets": "character"
    },
    "any_connected_county": {
        "desc": "Iterate through all counties connected to this one. Is based on top liege",
        "usage": [
            "any/every/whatever_connectec_county = {",
            "max_naval_distance = 500",
            "allow_one_county_land_gap = yes",
            "any_connected_county = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "landed_title",
        "supported_targets": "landed_title"
    },
    "any_controlled_faith": {
        "desc": "Iterate through all faiths headed by a title",
        "usage": [
            "any_controlled_faith = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "landed_title",
        "supported_targets": "faith"
    },
    "any_controlled_title_maa_regiment": {
        "desc": "Iterate through controlled title regiments",
        "usage": [
            "any_controlled_title_maa_regiment = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "landed_title",
        "supported_targets": "regiment"
    },
    "any_county_province": {
        "desc": "Iterate through all provinces in a county",
        "usage": [
            "any_county_province = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "landed_title",
        "supported_targets": "province"
    },
    "any_county_situation": {
        "desc": "Iterate through all situations that a county is involved in.",
        "usage": [
            "any_county_situation = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "landed_title",
        "supported_targets": "situation"
    },
    "any_county_situation_sub_region": {
        "desc": "Iterate through all situation sub-regions that a county is involved in.",
        "usage": [
            "any_county_situation_sub_region = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "landed_title",
        "supported_targets": "situation_sub_region"
    },
    "any_county_struggle": {
        "desc": "Iterate through all struggles that a county is involved in.",
        "usage": [
            "any_county_struggle = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "landed_title",
        "supported_targets": "struggle"
    },
    "any_de_jure_county": {
        "desc": "Iterate through all counties within this dejure title",
        "usage": [
            "any_de_jure_county = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "landed_title",
        "supported_targets": "landed_title"
    },
    "any_de_jure_county_holder": {
        "desc": "Iterate through all characters directly holding counties within this dejure title",
        "usage": [
            "any_de_jure_county_holder = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "landed_title",
        "supported_targets": "character"
    },
    "any_de_jure_top_liege": {
        "desc": "Iterate through all top lieges of the counts within this dejure title",
        "usage": [
            "any_de_jure_top_liege = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "landed_title",
        "supported_targets": "character"
    },
    "any_dejure_vassal_title_holder": {
        "desc": "Iterate through all the vassal holders of the title",
        "usage": [
            "any_dejure_vassal_title_holder = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "landed_title",
        "supported_targets": "character"
    },
    "any_direct_de_facto_vassal_title": {
        "desc": "Iterate through all de facto vassal titles",
        "usage": [
            "any_direct_de_facto_vassal_title = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "landed_title",
        "supported_targets": "landed_title"
    },
    "any_direct_de_jure_vassal_title": {
        "desc": "Iterate through the all de jure vassals titles",
        "usage": [
            "any_direct_de_jure_vassal_title = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "landed_title",
        "supported_targets": "landed_title"
    },
    "any_election_candidate": {
        "desc": "Iterate through all characters who are valid candidates in an election for a title",
        "usage": [
            "any_election_candidate = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "landed_title",
        "supported_targets": "character"
    },
    "any_elector": {
        "desc": "Iterate through all characters who are valid electors in an election for a title",
        "usage": [
            "any_elector = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "landed_title",
        "supported_targets": "character"
    },
    "any_important_location_for_title": {
        "desc": "Iterate through all counties that are important for the scoped title",
        "usage": [
            "any_important_location_for_title = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "landed_title",
        "supported_targets": "landed_title"
    },
    "any_in_de_facto_hierarchy": {
        "desc": "Iterate through the title itself, all de facto vassals, and below. The continue trigger specifies whether to recursively iterate through the vassal's vassal",
        "usage": [
            "..._de_jure_vassal_and_below = { continue = { conditions } }",
            "any_in_de_facto_hierarchy = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "landed_title",
        "supported_targets": "landed_title"
    },
    "any_in_de_jure_hierarchy": {
        "desc": "Iterate through the title itself, all de jure vassals, and below. The continue trigger specifies whether to recursively iterate through the vassal's vassal",
        "usage": [
            "..._de_jure_vassal_and_below = { continue = { conditions } }",
            "any_in_de_jure_hierarchy = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "landed_title",
        "supported_targets": "landed_title"
    },
    "any_neighboring_county": {
        "desc": "Iterate through all neighboring counties. Can only be used in county scope",
        "usage": [
            "any_neighboring_county = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "landed_title",
        "supported_targets": "landed_title"
    },
    "any_owned_title_maa_regiment": {
        "desc": "Iterate through owned title MaA regiments",
        "usage": [
            "any_owned_title_maa_regiment = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "landed_title",
        "supported_targets": "regiment"
    },
    "any_past_holder": {
        "desc": "Iterate through all past owners of a title from earliest to latest",
        "usage": [
            "any_past_holder = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "landed_title",
        "supported_targets": "character"
    },
    "any_past_holder_reversed": {
        "desc": "Iterate through all past owners of a title from latest to earliest",
        "usage": [
            "any_past_holder_reversed = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "landed_title",
        "supported_targets": "character"
    },
    "any_succession_appointment_investors": {
        "desc": "Iterate through all investors of target candidate within the scoped title. Optionally specify a value to filter by investment amount",
        "usage": [
            "scope:landed_title = {",
            "any/every/ordered/random_succession_appointment_investors = {",
            "candidate = scope:character",
            "value > {\t\t\t# Optional compare value to",
            "value = 100\t\t# only have characters that",
            "add = 10\t\t# have invested this much.",
            "}",
            "}",
            "}",
            "any_succession_appointment_investors = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "landed_title",
        "supported_targets": "character"
    },
    "any_this_title_or_de_jure_above": {
        "desc": "Iterate through this title and all its dejure liege titles",
        "usage": [
            "any_this_title_or_de_jure_above = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "landed_title",
        "supported_targets": "landed_title"
    },
    "any_title_heir": {
        "desc": "Line of succession for the scoped title",
        "usage": [
            "any_title_heir = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "landed_title",
        "supported_targets": "character"
    },
    "any_title_interested_in_location": {
        "desc": "Iterate through titles that consider scoped county an important location",
        "usage": [
            "any_title_interested_in_location = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "landed_title",
        "supported_targets": "landed_title"
    },
    "any_title_joined_faction": {
        "desc": "Iterate through all factions joined the scope landed title",
        "usage": [
            "any_title_joined_faction = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "landed_title",
        "supported_targets": "faction"
    },
    "any_title_maa_regiment": {
        "desc": "Iterate through title all MaA regiments",
        "usage": [
            "any_title_maa_regiment = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "landed_title",
        "supported_targets": "regiment"
    },
    "any_title_to_title_neighboring_and_across_water_county": {
        "desc": "Scopes from a title to a neighboring county (incl. across water, looking trough the de Jure lieges)",
        "usage": [
            "any_title_to_title_neighboring_and_across_water_county = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "landed_title",
        "supported_targets": "landed_title"
    },
    "any_title_to_title_neighboring_and_across_water_duchy": {
        "desc": "Scopes from a title to a neighboring duchy (incl. across water, looking trough the de Jure lieges)",
        "usage": [
            "any_title_to_title_neighboring_and_across_water_duchy = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "landed_title",
        "supported_targets": "landed_title"
    },
    "any_title_to_title_neighboring_and_across_water_empire": {
        "desc": "Scopes from a title to a neighboring empire (incl. across water, looking trough the de Jure lieges)",
        "usage": [
            "any_title_to_title_neighboring_and_across_water_empire = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "landed_title",
        "supported_targets": "landed_title"
    },
    "any_title_to_title_neighboring_and_across_water_kingdom": {
        "desc": "Scopes from a title to a neighboring kingdom (incl. across water, looking trough the de Jure lieges)",
        "usage": [
            "any_title_to_title_neighboring_and_across_water_kingdom = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "landed_title",
        "supported_targets": "landed_title"
    },
    "any_title_to_title_neighboring_county": {
        "desc": "Scopes from a title to a neighboring county (looking trough the de Jure lieges)",
        "usage": [
            "any_title_to_title_neighboring_county = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "landed_title",
        "supported_targets": "landed_title"
    },
    "any_title_to_title_neighboring_duchy": {
        "desc": "Scopes from a title to a neighboring duchy (looking trough the de Jure lieges)",
        "usage": [
            "any_title_to_title_neighboring_duchy = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "landed_title",
        "supported_targets": "landed_title"
    },
    "any_title_to_title_neighboring_empire": {
        "desc": "Scopes from a title to a neighboring empire (looking trough the de Jure lieges)",
        "usage": [
            "any_title_to_title_neighboring_empire = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "landed_title",
        "supported_targets": "landed_title"
    },
    "any_title_to_title_neighboring_kingdom": {
        "desc": "Scopes from a title to a neighboring kingdom (looking trough the de Jure lieges)",
        "usage": [
            "any_title_to_title_neighboring_kingdom = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "landed_title",
        "supported_targets": "landed_title"
    },
    "can_be_leased_out": {
        "desc": "Can the scoped title be leased out?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "can_create_title_maa": {
        "desc": "Can create MaA of specified type for the scoped title",
        "usage": [],
        "traits": "class CMenAtArmsTypeDatabase key",
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "can_title_create_faction": {
        "desc": "can the title create the faction of the specified type against the specified character?",
        "usage": [
            "can_title_create_faction = { type = X target = Y }"
        ],
        "traits": null,
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "can_title_join_faction": {
        "desc": "Can the scope title join the faction? can_title_join_faction = faction",
        "usage": [],
        "traits": "faction scope",
        "supported_scopes": "landed_title",
        "supported_targets": "faction"
    },
    "county_control": {
        "desc": "does the county title have the required county countrol?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "county_fertility": {
        "desc": "Does the county title have the required County Fertility value?",
        "usage": [
            "scope:county.county_fertility >= <value>"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "county_holder_opinion": {
        "desc": "Compares the county's opinion of its holder",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "county_opinion": {
        "desc": "compares the county's opinion of the current count",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "county_opinion_target": {
        "desc": "compares the county's opinion of the target character to the specified value, county_opinion_target = { target = X value >/</= Y }",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "de_jure_drift_progress": {
        "desc": "Compare drift progress towards target with value<drifting_title> = { de_jure_drif_progress = {     target = <drift_target_title>    value > 50 } }",
        "usage": [],
        "traits": null,
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "de_jure_drifting_towards": {
        "desc": "Is the scoped landed title de jure drifts toward another title?<drifting_title> = { de_jure_drifting_towards = <drift_target_title> }",
        "usage": [],
        "traits": "landed_title scope",
        "supported_scopes": "landed_title",
        "supported_targets": "landed_title"
    },
    "development_level": {
        "desc": "does the county title have the required county development level?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "development_rate": {
        "desc": "how much development progress is the county gaining each month?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "development_rate_modifier": {
        "desc": "What's the multiplier to the development progress?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "development_towards_level_increase": {
        "desc": "does the county title have the required progress towards the next level of development? E.G., if level 1 is 100, level 2 is 300 (these are set in defines), and current total is 150, this would return 50",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "has_character_nominiated": {
        "desc": "Has the target character nominated a successor for the scoped elective title",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "has_county_modifier": {
        "desc": "Does the scoped county have a given modifier",
        "usage": [
            "has_county_modifier = name"
        ],
        "traits": null,
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "has_county_modifier_duration_remaining": {
        "desc": "Does the scoped county have the duration remaining on a given modifier",
        "usage": [
            "has_county_modifier_duration_remaining = name"
        ],
        "traits": null,
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "has_disabled_building": {
        "desc": "Is the scope landed title connected to a holding that contains at least one disabled building?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "has_holy_site_flag": {
        "desc": "Does the barony have a holy site with the given flag? has_holy_site_flag = some flag",
        "usage": [],
        "traits": null,
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "has_order_of_succession": {
        "desc": "Does the scoped title have a given order of succession",
        "usage": [
            "has_order_of_succession = election"
        ],
        "traits": null,
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "has_revokable_lease": {
        "desc": "Is the title under a lease that can be revoked manually?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "has_title_law": {
        "desc": "Does the scoped title have the given title-specifc-law?",
        "usage": [],
        "traits": null,
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "has_title_law_flag": {
        "desc": "Does the scoped title have a title-specific law with the given flag?",
        "usage": [],
        "traits": null,
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "has_user_set_coa": {
        "desc": "Has the user set a specific coat of arms for this title?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "has_wrong_holding_type": {
        "desc": "Is the scope landed title connected to a holding that cannot be governed by the current lessee or holder?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "is_capital_barony": {
        "desc": "Is title in the scope a capital barony?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "is_coastal_county": {
        "desc": "Is the county coastal (next to sea, not including lakes)?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "is_connected_to": {
        "desc": "Is the county connected to the other county? Is based on top liege",
        "usage": [
            "is_connected_to = {",
            "max_naval_distance = 500",
            "allow_one_county_land_gap = yes",
            "target = some other county",
            "}"
        ],
        "traits": null,
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "is_contested": {
        "desc": "Is the scope landed title contested in any war?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "is_de_facto_liege_or_above_target": {
        "desc": "is the title de facto liege or above the target title?",
        "usage": [],
        "traits": "landed_title scope",
        "supported_scopes": "landed_title",
        "supported_targets": "landed_title"
    },
    "is_de_jure_liege_or_above_target": {
        "desc": "is the title de jure liege or above the target title?",
        "usage": [],
        "traits": "landed_title scope",
        "supported_scopes": "landed_title",
        "supported_targets": "landed_title"
    },
    "is_head_of_faith": {
        "desc": "Is this title a head of faith title",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "is_holy_order": {
        "desc": "Is the scope landed title a holy order?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "is_holy_site": {
        "desc": "Is the barony a holy site of any faith? is_holy_site = yes",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "is_holy_site_controlled_by": {
        "desc": "Does the target character control a holy site of the scoped object",
        "usage": [
            "is_holy_site_controlled_by = root"
        ],
        "traits": "character scope",
        "supported_scopes": "landed_title",
        "supported_targets": "character"
    },
    "is_holy_site_of": {
        "desc": "Is the barony a holy site of the given faith? is_holy_site_of = some faith",
        "usage": [],
        "traits": "faith scope",
        "supported_scopes": "landed_title",
        "supported_targets": "faith"
    },
    "is_important_location": {
        "desc": "Is the scoped county important for target title?",
        "usage": [
            "scope:county = { is_important_location = scope:title }"
        ],
        "traits": "landed_title scope",
        "supported_scopes": "landed_title",
        "supported_targets": "landed_title"
    },
    "is_lakeside_county": {
        "desc": "Is the county next to a lake?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "is_landless_type_title": {
        "desc": "Is this title considered a landless type title?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "is_leased_out": {
        "desc": "Is the scoped title leased out?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "is_mercenary_company": {
        "desc": "Is the scope landed title a mercenary company?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "is_migration_target": {
        "desc": "Is the scoped Landed Title currently target of a migration? Is a nomadic ruler migrating in any county of this Title?",
        "usage": [
            "<scope:title> = {",
            "is_migration_target = yes/no",
            "}"
        ],
        "traits": "yes/no",
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "is_neighbor_to_realm": {
        "desc": "Is this landed title adjacent to the character's realm",
        "usage": [
            "is_neighbor_to_realm = character"
        ],
        "traits": "character scope",
        "supported_scopes": "landed_title",
        "supported_targets": "character"
    },
    "is_noble_family_title": {
        "desc": "Is this title used by noble family to allow landless playable",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "is_nomad_title": {
        "desc": "Is this title used by a nomad to allow landless playable",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "is_riverside_county": {
        "desc": "Is the county riverside?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "is_target_of_council_task": {
        "desc": "Is the county currently affected by the specified council task? Needs to be in a county title scope",
        "usage": [],
        "traits": null,
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "is_title_created": {
        "desc": "Is title in the scope created?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "is_titular": {
        "desc": "Is this title titular (has no dejure counties in it, and is not a barony/county)?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "is_under_holy_order_lease": {
        "desc": "Is the scoped title leased out to any holy order?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "monthly_county_control_change": {
        "desc": "How much county control is the county gaining/losing each month in total?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "monthly_county_control_decline": {
        "desc": "How much county control is the county declining each month? (ignoring any growth)",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "monthly_county_control_decline_factor": {
        "desc": "What's the multiplier to the control decline rate? E.G., if there's just a +20% modifier, this would return 1.2",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "monthly_county_control_growth": {
        "desc": "How much county control is the county gaining each month? (ignoring any decline)",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "monthly_county_control_growth_factor": {
        "desc": "What's the multiplier to the control growth rate? E.G., if there's just a +20% modifier, this would return 1.2",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "num_county_holdings": {
        "desc": "How many provinces in this county have holdings",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "place_in_line_of_succession": {
        "desc": "what place in line of succession does the character hold?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "recent_history": {
        "desc": "Does the scoped title have a history entry of the specified type in recent history?",
        "usage": [
            "recent_history = { type = X days/months/years = Y }",
            "The type can be omitted, all history types are considered then",
            "Possible types:",
            "conquest",
            "conquest_holy_war",
            "conquest_claim",
            "conquest_populist",
            "election",
            "inheritance",
            "abdication",
            "created",
            "destroyed",
            "usurped",
            "granted",
            "revoked",
            "independency",
            "leased_out",
            "lease_revoked",
            "returned",
            "faction_demand",
            "swear_fealty",
            "stepped_down",
            "appointment",
            "appointment_succession"
        ],
        "traits": null,
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "target_is_de_facto_liege_or_above": {
        "desc": "is the target title de facto liege or above?",
        "usage": [],
        "traits": "landed_title scope",
        "supported_scopes": "landed_title",
        "supported_targets": "landed_title"
    },
    "target_is_de_jure_liege_or_above": {
        "desc": "is the target title de jure liege or above?",
        "usage": [],
        "traits": "landed_title scope",
        "supported_scopes": "landed_title",
        "supported_targets": "landed_title"
    },
    "tier": {
        "desc": "What tier is the scoped title? barony = 1, empire = 5. Use the script values please, not raw numbers",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "title_create_faction_type_chance": {
        "desc": "Check if the chance to create a faction against a target of the scope landed title is is true against the scripted value",
        "usage": [
            "title_create_faction_type_chance = {",
            "type = faction_type #An ongoing faction",
            "target = target_character",
            "value <|<=|>=|> 0",
            "}"
        ],
        "traits": null,
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "title_held_years": {
        "desc": "Returns the number of years a title is held if valid (otherwise returns 0)",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "title_is_a_faction_member": {
        "desc": "Is the scope title a member of a faction?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "title_join_faction_chance": {
        "desc": "Check if the chance of the scope landed title to join the faction against the scripted value",
        "usage": [
            "title_join_faction_chance = {",
            "faction = faction_target #An ongoing faction",
            "value <|<=|>=|> 0",
            "}"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "title_will_leave_sub_realm_on_succession": {
        "desc": "Will the title leave the sub-realm of the character on the right-hand-side upon succession? That is, is the first heir in someone outside the sub-realm, and the highest tier title they'll inherit from the person holding the title is not higher than their current tier",
        "usage": [],
        "traits": "character target",
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "uses_county_fertility": {
        "desc": "Does the scoped county title use County Fertility?",
        "usage": [
            "uses_county_fertility = yes/no"
        ],
        "traits": "yes/no",
        "supported_scopes": "landed_title",
        "supported_targets": null
    },
    "any_faction_county_member": {
        "desc": "Iterate through all faction county members",
        "usage": [
            "any_faction_county_member = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "faction",
        "supported_targets": "landed_title"
    },
    "any_faction_member": {
        "desc": "Iterate through all faction character members",
        "usage": [
            "any_faction_member = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "faction",
        "supported_targets": "character"
    },
    "average_faction_opinion": {
        "desc": "Average opinion of all the characters of the faction scope target",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "faction",
        "supported_targets": null
    },
    "average_faction_opinion_not_powerful_vassal": {
        "desc": "Average opinion of the character that are NOT powerful vassals of the faction scope target",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "faction",
        "supported_targets": null
    },
    "average_faction_opinion_powerful_vassal": {
        "desc": "Average opinion of the character that are powerful vassals of the faction scope target",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "faction",
        "supported_targets": null
    },
    "discontent_per_month": {
        "desc": "How much is the Faction's Discontent increasing each month?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "faction",
        "supported_targets": null
    },
    "faction_can_press_demands": {
        "desc": "Can the scope faction press demands?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "faction",
        "supported_targets": null
    },
    "faction_discontent": {
        "desc": "Current discontent of the faction",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "faction",
        "supported_targets": null
    },
    "faction_is_at_war": {
        "desc": "Is the scope faction at war?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "faction",
        "supported_targets": null
    },
    "faction_is_type": {
        "desc": "Is the faction of this type?",
        "usage": [],
        "traits": null,
        "supported_scopes": "faction",
        "supported_targets": null
    },
    "faction_power": {
        "desc": "Current power of the faction",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "faction",
        "supported_targets": null
    },
    "faction_power_threshold": {
        "desc": "Current power threshold of the faction",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "faction",
        "supported_targets": null
    },
    "has_special_character": {
        "desc": "Has the faction a special character assigned?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "faction",
        "supported_targets": null
    },
    "has_special_title": {
        "desc": "Has the faction a special title assigned?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "faction",
        "supported_targets": null
    },
    "months_until_max_discontent": {
        "desc": "How many months until Discontent is max (100)?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "faction",
        "supported_targets": null
    },
    "number_of_faction_members_in_council": {
        "desc": "Current number of faction members in faction",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "faction",
        "supported_targets": null
    },
    "building_levies": {
        "desc": "The amount of levies in a county or province from buildings",
        "usage": [
            "levies > 100"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "landed_title, province",
        "supported_targets": null
    },
    "building_max_garrison": {
        "desc": "The max amount of garrison in a county or province from buildings",
        "usage": [
            "levies > 100"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "landed_title, province",
        "supported_targets": null
    },
    "squared_distance": {
        "desc": "How far away is the province/barony/county from the target? Measured in map pixels. Squared for performance reasons (square root is expensive). squared_distance = { target = some province/barony/county value > 10000 }",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "landed_title, province",
        "supported_targets": null
    },
    "allow_early_retreat": {
        "desc": "Is this side allowed to retreat early (when losing)? (set via script effect `set_allow_early_retreat = yes`)",
        "usage": [
            "allow_early_retreat = yes"
        ],
        "traits": "yes/no",
        "supported_scopes": "combat_side",
        "supported_targets": null
    },
    "any_side_commander": {
        "desc": "Iterate through all commanders (the commanders of every army on the side, not just the one leading the battle)",
        "usage": [
            "any_side_commander = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "combat_side",
        "supported_targets": "character"
    },
    "any_side_knight": {
        "desc": "Iterate through all knights",
        "usage": [
            "any_side_knight = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "combat_side",
        "supported_targets": "character"
    },
    "any_side_participant": {
        "desc": "Returns all participants in a combat side",
        "usage": [
            "any_side_participant = { <count=num/all> / <percent=fixed_point> <triggers> }"
        ],
        "traits": null,
        "supported_scopes": "combat_side",
        "supported_targets": "character"
    },
    "disallowed_retreat": {
        "desc": "Is this side disallowed from retreating via script? (via effect `set_disallowed_retreat = yes`)",
        "usage": [
            "disallowed_retreat = yes"
        ],
        "traits": "yes/no",
        "supported_scopes": "combat_side",
        "supported_targets": null
    },
    "has_maa_of_type": {
        "desc": "Does this combat side have at least one MaA of the given regiment type? has_maa_of_type = onager",
        "usage": [],
        "traits": null,
        "supported_scopes": "combat_side",
        "supported_targets": null
    },
    "is_combat_side_attacker": {
        "desc": "whether the combat side was the attacker or not",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "combat_side",
        "supported_targets": null
    },
    "is_combat_side_pursuing": {
        "desc": "is this side the winner of the combat",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "combat_side",
        "supported_targets": null
    },
    "is_combat_side_retreating": {
        "desc": "is this side defeated in the combat",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "combat_side",
        "supported_targets": null
    },
    "is_forced_winner": {
        "desc": "is this side the forced winner of the combat? (via `forced_winner = yes`)",
        "usage": [
            "is_forced_winner = yes"
        ],
        "traits": "yes/no",
        "supported_scopes": "combat_side",
        "supported_targets": null
    },
    "num_enemies_killed": {
        "desc": "Number of troops killed on the opposite side.",
        "usage": [
            "num_enemies_killed >= 500"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "combat_side",
        "supported_targets": null
    },
    "percent_enemies_killed": {
        "desc": "Percantage of enemies killed out of total number of enemy soldiers.",
        "usage": [
            "percent_enemies_killed >= 80"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "combat_side",
        "supported_targets": null
    },
    "side_army_size": {
        "desc": "what is the current size of all armies combined on this combat side?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "combat_side",
        "supported_targets": null
    },
    "side_max_army_size": {
        "desc": "what is the max possible size of all armies combined on this combat side?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "combat_side",
        "supported_targets": null
    },
    "side_soldiers": {
        "desc": "How many soldiers does this side have still fighting?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "combat_side",
        "supported_targets": null
    },
    "side_strength": {
        "desc": "How strong is this side (based on soldiers still fighting)? Scaled down by a factor of 1000 so it doesn't get too large to do math on",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "combat_side",
        "supported_targets": null
    },
    "skip_pursuit": {
        "desc": "Is this side skipping the persuit phase (if losing)? (set via script effect `set_skip_pursuit = yes`)",
        "usage": [
            "skip_pursuit = yes"
        ],
        "traits": "yes/no",
        "supported_scopes": "combat_side",
        "supported_targets": null
    },
    "troops_ratio": {
        "desc": "Side's troops/opposide side's troops.ntroops_ratio < 0.5",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "combat_side",
        "supported_targets": null
    },
    "domicile_uses_culture_and_faith": {
        "desc": "Does the scoped domicile use culture and faith?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "domicile",
        "supported_targets": null
    },
    "domicile_uses_provisions": {
        "desc": "Does the scoped domicile use provisions?",
        "usage": [],
        "traits": "yes/no",
        "supported_scopes": "domicile",
        "supported_targets": null
    },
    "external_domicile_building_slots": {
        "desc": "Total amount of external building slots for scoped domicile",
        "usage": [
            "scope:domicile = { external_domicile_building_slots == 5 }"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "domicile",
        "supported_targets": null
    },
    "free_external_domicile_building_slots": {
        "desc": "Amount of free external building slots for scoped domicile",
        "usage": [
            "scope:domicile = { free_external_domicile_building_slots < 1 }"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "domicile",
        "supported_targets": null
    },
    "has_domicile_building": {
        "desc": "Does scoped domicile have building of specified type?",
        "usage": [
            "scope:domicile = { has_domicile_building = domicile building key }"
        ],
        "traits": null,
        "supported_scopes": "domicile",
        "supported_targets": null
    },
    "has_domicile_building_or_higher": {
        "desc": "Does scoped domicile have building or one of its upgrades?",
        "usage": [
            "scope:domicile = { has_domicile_building_or_higher = domicile building key }"
        ],
        "traits": null,
        "supported_scopes": "domicile",
        "supported_targets": null
    },
    "has_domicile_construction": {
        "desc": "Is the scoped domicile currently constructing the specified building?",
        "usage": [
            "scope:domicile = { has_domicile_construction = domicile building key }"
        ],
        "traits": null,
        "supported_scopes": "domicile",
        "supported_targets": null
    },
    "has_domicile_parameter": {
        "desc": "Does scoped domicile have parameter in one or more of its buildings?",
        "usage": [
            "scope:domicile = { has_domicile_parameter = parameter_name }"
        ],
        "traits": null,
        "supported_scopes": "domicile",
        "supported_targets": null
    },
    "has_ongoing_domicile_construction": {
        "desc": "Does the scoped domicile have an ongoing construction?)",
        "usage": [
            "scope:domicile = {",
            "has_ongoing_construction = yes/no",
            "}"
        ],
        "traits": "yes/no",
        "supported_scopes": "domicile",
        "supported_targets": null
    },
    "herd": {
        "desc": "does the scoped domicile have the required herd?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "domicile",
        "supported_targets": null
    },
    "horde": {
        "desc": "what is the amount of currently raised horde (or potential horde if none are raised) of the scoped domicile?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "domicile",
        "supported_targets": null
    },
    "is_domicile_type": {
        "desc": "Is the scoped domicile of domicile type?",
        "usage": [
            "scope:domicile = { is_domicile_type = domicile_type_key }"
        ],
        "traits": null,
        "supported_scopes": "domicile",
        "supported_targets": null
    },
    "max_herd": {
        "desc": "what is the herd limit of the scoped domicile?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "domicile",
        "supported_targets": null
    },
    "max_provisions": {
        "desc": "does the scoped domicile have the required max provisions?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "domicile",
        "supported_targets": null
    },
    "num_domicile_buildings": {
        "desc": "Amount of buildings constructed for scoped domicile",
        "usage": [
            "scope:domicile = { num_domicile_buildings > 0 }"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "domicile",
        "supported_targets": null
    },
    "provision_cost_to_owner": {
        "desc": "Is the provision cost from the domicile's current location to it's owner.",
        "usage": [
            "scope:domicile = {",
            "provision_cost_to_owner < 100",
            "}"
        ],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "domicile",
        "supported_targets": null
    },
    "provisions": {
        "desc": "does the scoped domicile have the required provisions?",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "domicile",
        "supported_targets": null
    },
    "base_inspiration_gold_cost": {
        "desc": "base_inspiration_gold_cost > 5",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "inspiration",
        "supported_targets": null
    },
    "days_since_creation": {
        "desc": "days_since_creation > 5",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "inspiration",
        "supported_targets": null
    },
    "days_since_sponsorship": {
        "desc": "days_since_sponsorship > 5",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "inspiration",
        "supported_targets": null
    },
    "has_inspiration_type": {
        "desc": "has_inspiration_type = type",
        "usage": [],
        "traits": null,
        "supported_scopes": "inspiration",
        "supported_targets": null
    },
    "inspiration_gold_invested": {
        "desc": "inspiration_gold_invested > 5",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "inspiration",
        "supported_targets": null
    },
    "inspiration_progress": {
        "desc": "inspiration_progress > 5",
        "usage": [],
        "traits": "<, <=, =, !=, >, >=",
        "supported_scopes": "inspiration",
        "supported_targets": null
    }
}